{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[3][]",
          "name": "candidateNamesParty",
          "type": "string[3][]"
        },
        {
          "internalType": "string[]",
          "name": "partyNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string[3][]",
          "name": "candidateNamesParty",
          "type": "string[3][]"
        }
      ],
      "name": "addCandidates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "party",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "party",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "area",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Party[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "area",
          "type": "string"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "parties",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "removeRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "numString",
          "type": "string"
        }
      ],
      "name": "stringToUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "candidate",
          "type": "uint256"
        }
      ],
      "name": "voteCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "party",
          "type": "uint256"
        }
      ],
      "name": "voteParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canVote",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voters_count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningCandidate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningParty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningParty_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Voting.sol"
  },
  "ast": {
    "absolutePath": "contracts/Voting.sol",
    "exportedSymbols": {
      "Voting": [
        646
      ]
    },
    "id": 647,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:31:0"
      },
      {
        "id": 2,
        "literals": [
          "abicoder",
          "v2"
        ],
        "nodeType": "PragmaDirective",
        "src": "68:19:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Voting",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 646,
        "linearizedBaseContracts": [
          646
        ],
        "name": "Voting",
        "nameLocation": "98:6:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Voting.Voter",
            "id": 13,
            "members": [
              {
                "constant": false,
                "id": 4,
                "mutability": "mutable",
                "name": "id",
                "nameLocation": "141:2:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "134:9:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 3,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "134:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6,
                "mutability": "mutable",
                "name": "area",
                "nameLocation": "158:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "153:9:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "153:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 8,
                "mutability": "mutable",
                "name": "canVote",
                "nameLocation": "177:7:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "172:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 7,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "172:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 12,
                "mutability": "mutable",
                "name": "voted",
                "nameLocation": "202:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "194:13:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_bool_$2_storage_ptr",
                  "typeString": "bool[2]"
                },
                "typeName": {
                  "baseType": {
                    "id": 9,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "194:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 11,
                  "length": {
                    "hexValue": "32",
                    "id": 10,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "199:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "nodeType": "ArrayTypeName",
                  "src": "194:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bool_$2_storage_ptr",
                    "typeString": "bool[2]"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Voter",
            "nameLocation": "118:5:0",
            "nodeType": "StructDefinition",
            "scope": 646,
            "src": "111:103:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Party",
            "id": 18,
            "members": [
              {
                "constant": false,
                "id": 15,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "250:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 18,
                "src": "243:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 14,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "243:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 17,
                "mutability": "mutable",
                "name": "voteCount",
                "nameLocation": "272:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 18,
                "src": "264:17:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "264:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Party",
            "nameLocation": "227:5:0",
            "nodeType": "StructDefinition",
            "scope": 646,
            "src": "220:68:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Candidate",
            "id": 27,
            "members": [
              {
                "constant": false,
                "id": 20,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "328:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 27,
                "src": "321:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 19,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "321:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 22,
                "mutability": "mutable",
                "name": "party",
                "nameLocation": "349:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 27,
                "src": "342:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 21,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "342:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 24,
                "mutability": "mutable",
                "name": "area",
                "nameLocation": "369:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 27,
                "src": "364:9:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 23,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "364:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 26,
                "mutability": "mutable",
                "name": "voteCount",
                "nameLocation": "391:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 27,
                "src": "383:17:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 25,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "383:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nameLocation": "301:9:0",
            "nodeType": "StructDefinition",
            "scope": 646,
            "src": "294:113:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2e4176cf",
            "id": 29,
            "mutability": "mutable",
            "name": "chairperson",
            "nameLocation": "428:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 646,
            "src": "413:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 28,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "413:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "a3ec138d",
            "id": 34,
            "mutability": "mutable",
            "name": "voters",
            "nameLocation": "478:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 646,
            "src": "445:39:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
              "typeString": "mapping(address => struct Voting.Voter)"
            },
            "typeName": {
              "id": 33,
              "keyType": {
                "id": 30,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "453:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "445:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                "typeString": "mapping(address => struct Voting.Voter)"
              },
              "valueType": {
                "id": 32,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 31,
                  "name": "Voter",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13,
                  "src": "464:5:0"
                },
                "referencedDeclaration": 13,
                "src": "464:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                  "typeString": "struct Voting.Voter"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 37,
            "mutability": "mutable",
            "name": "voter_count",
            "nameLocation": "498:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 646,
            "src": "490:23:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 35,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "490:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 36,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "512:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "3477ee2e",
            "id": 41,
            "mutability": "mutable",
            "name": "candidates",
            "nameLocation": "538:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 646,
            "src": "519:29:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
              "typeString": "struct Voting.Candidate[]"
            },
            "typeName": {
              "baseType": {
                "id": 39,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 38,
                  "name": "Candidate",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27,
                  "src": "519:9:0"
                },
                "referencedDeclaration": 27,
                "src": "519:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$27_storage_ptr",
                  "typeString": "struct Voting.Candidate"
                }
              },
              "id": 40,
              "nodeType": "ArrayTypeName",
              "src": "519:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr",
                "typeString": "struct Voting.Candidate[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "70651a18",
            "id": 45,
            "mutability": "mutable",
            "name": "parties",
            "nameLocation": "569:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 646,
            "src": "554:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
              "typeString": "struct Voting.Party[]"
            },
            "typeName": {
              "baseType": {
                "id": 43,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 42,
                  "name": "Party",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 18,
                  "src": "554:5:0"
                },
                "referencedDeclaration": 18,
                "src": "554:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Party_$18_storage_ptr",
                  "typeString": "struct Voting.Party"
                }
              },
              "id": 44,
              "nodeType": "ArrayTypeName",
              "src": "554:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr",
                "typeString": "struct Voting.Party[]"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 134,
              "nodeType": "Block",
              "src": "693:624:0",
              "statements": [
                {
                  "expression": {
                    "id": 59,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 56,
                      "name": "chairperson",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29,
                      "src": "703:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 57,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "717:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 58,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "717:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "703:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 60,
                  "nodeType": "ExpressionStatement",
                  "src": "703:24:0"
                },
                {
                  "expression": {
                    "id": 66,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 61,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "737:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 63,
                        "indexExpression": {
                          "id": 62,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "744:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "737:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 64,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "737:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 65,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "767:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "737:34:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 67,
                  "nodeType": "ExpressionStatement",
                  "src": "737:34:0"
                },
                {
                  "body": {
                    "id": 104,
                    "nodeType": "Block",
                    "src": "838:309:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 83,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 50,
                                      "src": "923:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[3] memory[] memory"
                                      }
                                    },
                                    "id": 85,
                                    "indexExpression": {
                                      "id": 84,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 69,
                                      "src": "943:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "923:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                      "typeString": "string memory[3] memory"
                                    }
                                  },
                                  "id": 87,
                                  "indexExpression": {
                                    "hexValue": "30",
                                    "id": 86,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "946:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "923:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 88,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 50,
                                      "src": "977:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[3] memory[] memory"
                                      }
                                    },
                                    "id": 90,
                                    "indexExpression": {
                                      "id": 89,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 69,
                                      "src": "997:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "977:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                      "typeString": "string memory[3] memory"
                                    }
                                  },
                                  "id": 92,
                                  "indexExpression": {
                                    "hexValue": "31",
                                    "id": 91,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1000:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "977:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "baseExpression": {
                                        "baseExpression": {
                                          "id": 94,
                                          "name": "candidateNamesParty",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 50,
                                          "src": "1043:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                            "typeString": "string memory[3] memory[] memory"
                                          }
                                        },
                                        "id": 96,
                                        "indexExpression": {
                                          "id": 95,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 69,
                                          "src": "1063:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "1043:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                          "typeString": "string memory[3] memory"
                                        }
                                      },
                                      "id": 98,
                                      "indexExpression": {
                                        "hexValue": "32",
                                        "id": 97,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1066:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "1043:25:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    ],
                                    "id": 93,
                                    "name": "stringToUint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 214,
                                    "src": "1030:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                                      "typeString": "function (string memory) pure returns (uint256)"
                                    }
                                  },
                                  "id": 99,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1030:39:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 100,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1102:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 82,
                                "name": "Candidate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 27,
                                "src": "885:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Candidate_$27_storage_ptr_$",
                                  "typeString": "type(struct Voting.Candidate storage pointer)"
                                }
                              },
                              "id": 101,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "party",
                                "area",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "885:237:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$27_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Candidate_$27_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            ],
                            "expression": {
                              "id": 79,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "852:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 81,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "852:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr_$_t_struct$_Candidate_$27_storage_$returns$__$bound_to$_t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Candidate storage ref[] storage pointer,struct Voting.Candidate storage ref)"
                            }
                          },
                          "id": 102,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "852:284:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 103,
                        "nodeType": "ExpressionStatement",
                        "src": "852:284:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 75,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 72,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 69,
                      "src": "801:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 73,
                        "name": "candidateNamesParty",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50,
                        "src": "805:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[3] memory[] memory"
                        }
                      },
                      "id": 74,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "805:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "801:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 105,
                  "initializationExpression": {
                    "assignments": [
                      69
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 69,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "794:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 105,
                        "src": "786:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "786:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 71,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 70,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "798:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "786:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 77,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "833:3:0",
                      "subExpression": {
                        "id": 76,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69,
                        "src": "833:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 78,
                    "nodeType": "ExpressionStatement",
                    "src": "833:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "781:366:0"
                },
                {
                  "body": {
                    "id": 128,
                    "nodeType": "Block",
                    "src": "1204:81:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 121,
                                    "name": "partyNames",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 53,
                                    "src": "1244:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 123,
                                  "indexExpression": {
                                    "id": 122,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 107,
                                    "src": "1255:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1244:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 124,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1270:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 120,
                                "name": "Party",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 18,
                                "src": "1231:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Party_$18_storage_ptr_$",
                                  "typeString": "type(struct Voting.Party storage pointer)"
                                }
                              },
                              "id": 125,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "1231:42:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                                "typeString": "struct Voting.Party memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                                "typeString": "struct Voting.Party memory"
                              }
                            ],
                            "expression": {
                              "id": 117,
                              "name": "parties",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 45,
                              "src": "1218:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                "typeString": "struct Voting.Party storage ref[] storage ref"
                              }
                            },
                            "id": 119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1218:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr_$_t_struct$_Party_$18_storage_$returns$__$bound_to$_t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Party storage ref[] storage pointer,struct Voting.Party storage ref)"
                            }
                          },
                          "id": 126,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1218:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 127,
                        "nodeType": "ExpressionStatement",
                        "src": "1218:56:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 113,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 110,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 107,
                      "src": "1176:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 111,
                        "name": "partyNames",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 53,
                        "src": "1180:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        }
                      },
                      "id": 112,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1180:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1176:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 129,
                  "initializationExpression": {
                    "assignments": [
                      107
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 107,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1169:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 129,
                        "src": "1161:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 106,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1161:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 109,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 108,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1173:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1161:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 115,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1199:3:0",
                      "subExpression": {
                        "id": 114,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "1199:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 116,
                    "nodeType": "ExpressionStatement",
                    "src": "1199:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1156:129:0"
                },
                {
                  "expression": {
                    "id": 132,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 130,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "1294:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 131,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1309:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1294:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 133,
                  "nodeType": "ExpressionStatement",
                  "src": "1294:16:0"
                }
              ]
            },
            "id": 135,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 54,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50,
                  "mutability": "mutable",
                  "name": "candidateNamesParty",
                  "nameLocation": "623:19:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 135,
                  "src": "604:38:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[3][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 46,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "604:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "id": 48,
                      "length": {
                        "hexValue": "33",
                        "id": 47,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "611:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "nodeType": "ArrayTypeName",
                      "src": "604:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$3_storage_ptr",
                        "typeString": "string[3]"
                      }
                    },
                    "id": 49,
                    "nodeType": "ArrayTypeName",
                    "src": "604:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_string_storage_$3_storage_$dyn_storage_ptr",
                      "typeString": "string[3][]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 53,
                  "mutability": "mutable",
                  "name": "partyNames",
                  "nameLocation": "668:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 135,
                  "src": "652:26:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 51,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "652:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 52,
                    "nodeType": "ArrayTypeName",
                    "src": "652:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "594:90:0"
            },
            "returnParameters": {
              "id": 55,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "693:0:0"
            },
            "scope": 646,
            "src": "583:734:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 213,
              "nodeType": "Block",
              "src": "1396:427:0",
              "statements": [
                {
                  "assignments": [
                    143
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 143,
                      "mutability": "mutable",
                      "name": "val",
                      "nameLocation": "1416:3:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "1410:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 142,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1410:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 145,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 144,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1420:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1410:11:0"
                },
                {
                  "assignments": [
                    147
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 147,
                      "mutability": "mutable",
                      "name": "stringBytes",
                      "nameLocation": "1450:11:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "1435:26:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 146,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1435:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 152,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 150,
                        "name": "numString",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 137,
                        "src": "1470:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 149,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1464:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                        "typeString": "type(bytes storage pointer)"
                      },
                      "typeName": {
                        "id": 148,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1464:5:0",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 151,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1464:16:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1435:45:0"
                },
                {
                  "body": {
                    "id": 209,
                    "nodeType": "Block",
                    "src": "1540:253:0",
                    "statements": [
                      {
                        "assignments": [
                          165
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 165,
                            "mutability": "mutable",
                            "name": "exp",
                            "nameLocation": "1563:3:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "1558:8:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 164,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1558:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 170,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 169,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 166,
                              "name": "stringBytes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 147,
                              "src": "1569:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 167,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "1569:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 168,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 154,
                            "src": "1590:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1569:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1558:33:0"
                      },
                      {
                        "assignments": [
                          172
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 172,
                            "mutability": "mutable",
                            "name": "ival",
                            "nameLocation": "1616:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "1609:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            },
                            "typeName": {
                              "id": 171,
                              "name": "bytes1",
                              "nodeType": "ElementaryTypeName",
                              "src": "1609:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 176,
                        "initialValue": {
                          "baseExpression": {
                            "id": 173,
                            "name": "stringBytes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 147,
                            "src": "1623:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 175,
                          "indexExpression": {
                            "id": 174,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 154,
                            "src": "1635:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1623:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1609:28:0"
                      },
                      {
                        "assignments": [
                          178
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 178,
                            "mutability": "mutable",
                            "name": "uval",
                            "nameLocation": "1661:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "1655:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 177,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "1655:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 183,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 181,
                              "name": "ival",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 172,
                              "src": "1674:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            ],
                            "id": 180,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1668:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint8_$",
                              "typeString": "type(uint8)"
                            },
                            "typeName": {
                              "id": 179,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "1668:5:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 182,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1668:11:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1655:24:0"
                      },
                      {
                        "assignments": [
                          185
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 185,
                            "mutability": "mutable",
                            "name": "jval",
                            "nameLocation": "1698:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "1693:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 184,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1693:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 192,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 191,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 186,
                            "name": "uval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 178,
                            "src": "1705:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30783330",
                                "id": 189,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1717:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_48_by_1",
                                  "typeString": "int_const 48"
                                },
                                "value": "0x30"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_48_by_1",
                                  "typeString": "int_const 48"
                                }
                              ],
                              "id": 188,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1712:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 187,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "1712:4:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 190,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1712:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1705:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1693:29:0"
                      },
                      {
                        "expression": {
                          "id": 207,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 193,
                            "name": "val",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 143,
                            "src": "1741:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 205,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 196,
                                      "name": "jval",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 185,
                                      "src": "1755:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 195,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1750:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 194,
                                      "name": "uint",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1750:4:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 197,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1750:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 203,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 198,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1764:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 201,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 199,
                                              "name": "exp",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 165,
                                              "src": "1769:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "-",
                                            "rightExpression": {
                                              "hexValue": "31",
                                              "id": 200,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "1773:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_1_by_1",
                                                "typeString": "int_const 1"
                                              },
                                              "value": "1"
                                            },
                                            "src": "1769:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 202,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "1768:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "1764:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 204,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "1763:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1750:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 206,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "1749:28:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1741:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 208,
                        "nodeType": "ExpressionStatement",
                        "src": "1741:36:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 160,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 157,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 154,
                      "src": "1513:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 158,
                        "name": "stringBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 147,
                        "src": "1515:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 159,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1515:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1513:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 210,
                  "initializationExpression": {
                    "assignments": [
                      154
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 154,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1505:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 210,
                        "src": "1499:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 153,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1499:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 156,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 155,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1510:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1499:12:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 162,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1535:3:0",
                      "subExpression": {
                        "id": 161,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 154,
                        "src": "1535:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 163,
                    "nodeType": "ExpressionStatement",
                    "src": "1535:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1494:299:0"
                },
                {
                  "expression": {
                    "id": 211,
                    "name": "val",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 143,
                    "src": "1809:3:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 141,
                  "id": 212,
                  "nodeType": "Return",
                  "src": "1802:10:0"
                }
              ]
            },
            "functionSelector": "1bd95155",
            "id": 214,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "stringToUint",
            "nameLocation": "1332:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 138,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 137,
                  "mutability": "mutable",
                  "name": "numString",
                  "nameLocation": "1359:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 214,
                  "src": "1345:23:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 136,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1345:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1344:25:0"
            },
            "returnParameters": {
              "id": 141,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 140,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 214,
                  "src": "1390:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 139,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1390:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1389:6:0"
            },
            "scope": 646,
            "src": "1323:500:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 268,
              "nodeType": "Block",
              "src": "1900:504:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 223,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1931:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1931:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 225,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "1945:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1931:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c792063686169726d616e2063616e20676976652074686520726967687420746f20766f7465",
                        "id": 227,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1970:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_22e888be005b4f3499904ad360d236f8e3ef070266079c125e0e78db5100ebf5",
                          "typeString": "literal_string \"Only chairman can give the right to vote\""
                        },
                        "value": "Only chairman can give the right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_22e888be005b4f3499904ad360d236f8e3ef070266079c125e0e78db5100ebf5",
                          "typeString": "literal_string \"Only chairman can give the right to vote\""
                        }
                      ],
                      "id": 222,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1910:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1910:112:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 229,
                  "nodeType": "ExpressionStatement",
                  "src": "1910:112:0"
                },
                {
                  "body": {
                    "id": 266,
                    "nodeType": "Block",
                    "src": "2089:309:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 245,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 219,
                                      "src": "2174:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[3] memory[] memory"
                                      }
                                    },
                                    "id": 247,
                                    "indexExpression": {
                                      "id": 246,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 231,
                                      "src": "2194:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2174:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                      "typeString": "string memory[3] memory"
                                    }
                                  },
                                  "id": 249,
                                  "indexExpression": {
                                    "hexValue": "30",
                                    "id": 248,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2197:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2174:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 250,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 219,
                                      "src": "2228:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[3] memory[] memory"
                                      }
                                    },
                                    "id": 252,
                                    "indexExpression": {
                                      "id": 251,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 231,
                                      "src": "2248:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2228:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                      "typeString": "string memory[3] memory"
                                    }
                                  },
                                  "id": 254,
                                  "indexExpression": {
                                    "hexValue": "31",
                                    "id": 253,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2251:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2228:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "baseExpression": {
                                        "baseExpression": {
                                          "id": 256,
                                          "name": "candidateNamesParty",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 219,
                                          "src": "2294:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                            "typeString": "string memory[3] memory[] memory"
                                          }
                                        },
                                        "id": 258,
                                        "indexExpression": {
                                          "id": 257,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 231,
                                          "src": "2314:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "2294:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                          "typeString": "string memory[3] memory"
                                        }
                                      },
                                      "id": 260,
                                      "indexExpression": {
                                        "hexValue": "32",
                                        "id": 259,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2317:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "2294:25:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    ],
                                    "id": 255,
                                    "name": "stringToUint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 214,
                                    "src": "2281:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                                      "typeString": "function (string memory) pure returns (uint256)"
                                    }
                                  },
                                  "id": 261,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2281:39:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 262,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2353:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 244,
                                "name": "Candidate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 27,
                                "src": "2136:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Candidate_$27_storage_ptr_$",
                                  "typeString": "type(struct Voting.Candidate storage pointer)"
                                }
                              },
                              "id": 263,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "party",
                                "area",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "2136:237:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$27_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Candidate_$27_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            ],
                            "expression": {
                              "id": 241,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "2103:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 243,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2103:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr_$_t_struct$_Candidate_$27_storage_$returns$__$bound_to$_t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Candidate storage ref[] storage pointer,struct Voting.Candidate storage ref)"
                            }
                          },
                          "id": 264,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2103:284:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 265,
                        "nodeType": "ExpressionStatement",
                        "src": "2103:284:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 234,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 231,
                      "src": "2052:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 235,
                        "name": "candidateNamesParty",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 219,
                        "src": "2056:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[3] memory[] memory"
                        }
                      },
                      "id": 236,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2056:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2052:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 267,
                  "initializationExpression": {
                    "assignments": [
                      231
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 231,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2045:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 267,
                        "src": "2037:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 230,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2037:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 233,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 232,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2049:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2037:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 239,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2084:3:0",
                      "subExpression": {
                        "id": 238,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 231,
                        "src": "2084:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 240,
                    "nodeType": "ExpressionStatement",
                    "src": "2084:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "2032:366:0"
                }
              ]
            },
            "functionSelector": "9f6680a8",
            "id": 269,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addCandidates",
            "nameLocation": "1837:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 220,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 219,
                  "mutability": "mutable",
                  "name": "candidateNamesParty",
                  "nameLocation": "1870:19:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 269,
                  "src": "1851:38:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[3][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 215,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1851:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "id": 217,
                      "length": {
                        "hexValue": "33",
                        "id": 216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1858:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "nodeType": "ArrayTypeName",
                      "src": "1851:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$3_storage_ptr",
                        "typeString": "string[3]"
                      }
                    },
                    "id": 218,
                    "nodeType": "ArrayTypeName",
                    "src": "1851:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_string_storage_$3_storage_$dyn_storage_ptr",
                      "typeString": "string[3][]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1850:40:0"
            },
            "returnParameters": {
              "id": 221,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1900:0:0"
            },
            "scope": 646,
            "src": "1828:576:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 278,
              "nodeType": "Block",
              "src": "2476:34:0",
              "statements": [
                {
                  "expression": {
                    "id": 276,
                    "name": "candidates",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 41,
                    "src": "2493:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                      "typeString": "struct Voting.Candidate storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 275,
                  "id": 277,
                  "nodeType": "Return",
                  "src": "2486:17:0"
                }
              ]
            },
            "functionSelector": "06a49fce",
            "id": 279,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCandidates",
            "nameLocation": "2419:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 270,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2432:2:0"
            },
            "returnParameters": {
              "id": 275,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 274,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 279,
                  "src": "2456:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Candidate_$27_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Candidate[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 272,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 271,
                        "name": "Candidate",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 27,
                        "src": "2456:9:0"
                      },
                      "referencedDeclaration": 27,
                      "src": "2456:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$27_storage_ptr",
                        "typeString": "struct Voting.Candidate"
                      }
                    },
                    "id": 273,
                    "nodeType": "ArrayTypeName",
                    "src": "2456:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Candidate[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2455:20:0"
            },
            "scope": 646,
            "src": "2410:100:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 288,
              "nodeType": "Block",
              "src": "2575:31:0",
              "statements": [
                {
                  "expression": {
                    "id": 286,
                    "name": "parties",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 45,
                    "src": "2592:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                      "typeString": "struct Voting.Party storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 285,
                  "id": 287,
                  "nodeType": "Return",
                  "src": "2585:14:0"
                }
              ]
            },
            "functionSelector": "a8311aa8",
            "id": 289,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getParties",
            "nameLocation": "2525:10:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 280,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2535:2:0"
            },
            "returnParameters": {
              "id": 285,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 284,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "2559:14:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Party_$18_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Party[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 282,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 281,
                        "name": "Party",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 18,
                        "src": "2559:5:0"
                      },
                      "referencedDeclaration": 18,
                      "src": "2559:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Party_$18_storage_ptr",
                        "typeString": "struct Voting.Party"
                      }
                    },
                    "id": 283,
                    "nodeType": "ArrayTypeName",
                    "src": "2559:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Party[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2558:16:0"
            },
            "scope": 646,
            "src": "2516:90:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 385,
              "nodeType": "Block",
              "src": "2737:590:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 302,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 299,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2768:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 300,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2768:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 301,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "2782:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2768:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c792063686169726d616e2063616e20676976652074686520726967687420746f20766f7465",
                        "id": 303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2807:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_22e888be005b4f3499904ad360d236f8e3ef070266079c125e0e78db5100ebf5",
                          "typeString": "literal_string \"Only chairman can give the right to vote\""
                        },
                        "value": "Only chairman can give the right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_22e888be005b4f3499904ad360d236f8e3ef070266079c125e0e78db5100ebf5",
                          "typeString": "literal_string \"Only chairman can give the right to vote\""
                        }
                      ],
                      "id": 298,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2747:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 304,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2747:112:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 305,
                  "nodeType": "ExpressionStatement",
                  "src": "2747:112:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 321,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "2890:23:0",
                          "subExpression": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 307,
                                  "name": "voters",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 34,
                                  "src": "2891:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                    "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                  }
                                },
                                "id": 309,
                                "indexExpression": {
                                  "id": 308,
                                  "name": "voter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 291,
                                  "src": "2898:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2891:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Voter_$13_storage",
                                  "typeString": "struct Voting.Voter storage ref"
                                }
                              },
                              "id": 310,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "voted",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 12,
                              "src": "2891:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$2_storage",
                                "typeString": "bool[2] storage ref"
                              }
                            },
                            "id": 312,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 311,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2911:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2891:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "id": 320,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "2917:23:0",
                          "subExpression": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 314,
                                  "name": "voters",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 34,
                                  "src": "2918:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                    "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                  }
                                },
                                "id": 316,
                                "indexExpression": {
                                  "id": 315,
                                  "name": "voter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 291,
                                  "src": "2925:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2918:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Voter_$13_storage",
                                  "typeString": "struct Voting.Voter storage ref"
                                }
                              },
                              "id": 317,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "voted",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 12,
                              "src": "2918:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$2_storage",
                                "typeString": "bool[2] storage ref"
                              }
                            },
                            "id": 319,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 318,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2938:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2918:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2890:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520766f74657220616c726561647920766f746564",
                        "id": 322,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2954:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        },
                        "value": "The voter already voted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        }
                      ],
                      "id": 306,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2869:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2869:120:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 324,
                  "nodeType": "ExpressionStatement",
                  "src": "2869:120:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 330,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "3007:22:0",
                        "subExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 326,
                              "name": "voters",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 34,
                              "src": "3008:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                "typeString": "mapping(address => struct Voting.Voter storage ref)"
                              }
                            },
                            "id": 328,
                            "indexExpression": {
                              "id": 327,
                              "name": "voter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 291,
                              "src": "3015:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3008:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage",
                              "typeString": "struct Voting.Voter storage ref"
                            }
                          },
                          "id": 329,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "canVote",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 8,
                          "src": "3008:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "566f7465722063616e20616c726561647920766f7465",
                        "id": 331,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3031:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6582ac717cacb908d0fddafdc6182c53d1640512810fcb2c05e7c52b38369db7",
                          "typeString": "literal_string \"Voter can already vote\""
                        },
                        "value": "Voter can already vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6582ac717cacb908d0fddafdc6182c53d1640512810fcb2c05e7c52b38369db7",
                          "typeString": "literal_string \"Voter can already vote\""
                        }
                      ],
                      "id": 325,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2999:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2999:57:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 333,
                  "nodeType": "ExpressionStatement",
                  "src": "2999:57:0"
                },
                {
                  "expression": {
                    "id": 339,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 334,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3066:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 336,
                        "indexExpression": {
                          "id": 335,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3073:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3066:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 337,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "3066:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 338,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3090:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "3066:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 340,
                  "nodeType": "ExpressionStatement",
                  "src": "3066:28:0"
                },
                {
                  "expression": {
                    "id": 346,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 341,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3104:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 343,
                        "indexExpression": {
                          "id": 342,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3111:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3104:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 344,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4,
                      "src": "3104:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 345,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 293,
                      "src": "3123:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "3104:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 347,
                  "nodeType": "ExpressionStatement",
                  "src": "3104:21:0"
                },
                {
                  "expression": {
                    "id": 355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 348,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3135:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 350,
                        "indexExpression": {
                          "id": 349,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3142:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3135:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 351,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "area",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6,
                      "src": "3135:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 353,
                          "name": "area",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 295,
                          "src": "3169:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        ],
                        "id": 352,
                        "name": "stringToUint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "3156:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                          "typeString": "function (string memory) pure returns (uint256)"
                        }
                      },
                      "id": 354,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3156:18:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3135:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 356,
                  "nodeType": "ExpressionStatement",
                  "src": "3135:39:0"
                },
                {
                  "expression": {
                    "id": 364,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "baseExpression": {
                            "id": 357,
                            "name": "voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 34,
                            "src": "3184:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                              "typeString": "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          "id": 359,
                          "indexExpression": {
                            "id": 358,
                            "name": "voter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 291,
                            "src": "3191:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3184:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage",
                            "typeString": "struct Voting.Voter storage ref"
                          }
                        },
                        "id": 360,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "voted",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 12,
                        "src": "3184:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bool_$2_storage",
                          "typeString": "bool[2] storage ref"
                        }
                      },
                      "id": 362,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 361,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3204:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3184:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 363,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3209:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3184:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 365,
                  "nodeType": "ExpressionStatement",
                  "src": "3184:30:0"
                },
                {
                  "expression": {
                    "id": 373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "baseExpression": {
                            "id": 366,
                            "name": "voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 34,
                            "src": "3224:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                              "typeString": "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          "id": 368,
                          "indexExpression": {
                            "id": 367,
                            "name": "voter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 291,
                            "src": "3231:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3224:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage",
                            "typeString": "struct Voting.Voter storage ref"
                          }
                        },
                        "id": 369,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "voted",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 12,
                        "src": "3224:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bool_$2_storage",
                          "typeString": "bool[2] storage ref"
                        }
                      },
                      "id": 371,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 370,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3244:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3224:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 372,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3249:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3224:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 374,
                  "nodeType": "ExpressionStatement",
                  "src": "3224:30:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "3130303030303030303030303030",
                        "id": 378,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3279:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10000000000000_by_1",
                          "typeString": "int_const 10000000000000"
                        },
                        "value": "10000000000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_10000000000000_by_1",
                          "typeString": "int_const 10000000000000"
                        }
                      ],
                      "expression": {
                        "id": 375,
                        "name": "voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 291,
                        "src": "3264:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 377,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "3264:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 379,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3264:30:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 380,
                  "nodeType": "ExpressionStatement",
                  "src": "3264:30:0"
                },
                {
                  "expression": {
                    "id": 383,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 381,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "3304:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 382,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3319:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "3304:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 384,
                  "nodeType": "ExpressionStatement",
                  "src": "3304:16:0"
                }
              ]
            },
            "functionSelector": "f972c1c4",
            "id": 386,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "giveRightToVote",
            "nameLocation": "2621:15:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 291,
                  "mutability": "mutable",
                  "name": "voter",
                  "nameLocation": "2662:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 386,
                  "src": "2646:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 290,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2646:15:0",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 293,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "2691:2:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 386,
                  "src": "2677:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 292,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2677:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 295,
                  "mutability": "mutable",
                  "name": "area",
                  "nameLocation": "2717:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 386,
                  "src": "2703:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 294,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2703:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2636:91:0"
            },
            "returnParameters": {
              "id": 297,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2737:0:0"
            },
            "scope": 646,
            "src": "2612:715:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 437,
              "nodeType": "Block",
              "src": "3389:405:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 395,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 392,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3420:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 393,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "3420:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 394,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "3434:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3420:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c792063686169726d616e2063616e20676976652064656e6f756e636520726967687420746f20766f7465",
                        "id": 396,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3459:47:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_28e8435bf76fe9acc33cdb755c5bd33466a7368ff7b6abdde97cc6c89a8f8aea",
                          "typeString": "literal_string \"Only chairman can give denounce right to vote\""
                        },
                        "value": "Only chairman can give denounce right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_28e8435bf76fe9acc33cdb755c5bd33466a7368ff7b6abdde97cc6c89a8f8aea",
                          "typeString": "literal_string \"Only chairman can give denounce right to vote\""
                        }
                      ],
                      "id": 391,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3399:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3399:117:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 398,
                  "nodeType": "ExpressionStatement",
                  "src": "3399:117:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 414,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 406,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "3547:23:0",
                          "subExpression": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 400,
                                  "name": "voters",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 34,
                                  "src": "3548:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                    "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                  }
                                },
                                "id": 402,
                                "indexExpression": {
                                  "id": 401,
                                  "name": "voter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "3555:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3548:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Voter_$13_storage",
                                  "typeString": "struct Voting.Voter storage ref"
                                }
                              },
                              "id": 403,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "voted",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 12,
                              "src": "3548:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$2_storage",
                                "typeString": "bool[2] storage ref"
                              }
                            },
                            "id": 405,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 404,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3568:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3548:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "id": 413,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "3574:23:0",
                          "subExpression": {
                            "baseExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 407,
                                  "name": "voters",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 34,
                                  "src": "3575:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                    "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                  }
                                },
                                "id": 409,
                                "indexExpression": {
                                  "id": 408,
                                  "name": "voter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 388,
                                  "src": "3582:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3575:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Voter_$13_storage",
                                  "typeString": "struct Voting.Voter storage ref"
                                }
                              },
                              "id": 410,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "voted",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 12,
                              "src": "3575:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bool_$2_storage",
                                "typeString": "bool[2] storage ref"
                              }
                            },
                            "id": 412,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 411,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3595:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3575:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3547:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520766f74657220616c726561647920766f746564",
                        "id": 415,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3611:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        },
                        "value": "The voter already voted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        }
                      ],
                      "id": 399,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3526:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 416,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3526:120:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 417,
                  "nodeType": "ExpressionStatement",
                  "src": "3526:120:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 419,
                            "name": "voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 34,
                            "src": "3664:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                              "typeString": "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          "id": 421,
                          "indexExpression": {
                            "id": 420,
                            "name": "voter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 388,
                            "src": "3671:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3664:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage",
                            "typeString": "struct Voting.Voter storage ref"
                          }
                        },
                        "id": 422,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "3664:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "566f74657220646f65736e2774206861766520726967687420746f20766f7465",
                        "id": 423,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3687:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_71f8867ec7a526d1564968c50073693657ec877af00314443880e63ee9f37a01",
                          "typeString": "literal_string \"Voter doesn't have right to vote\""
                        },
                        "value": "Voter doesn't have right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_71f8867ec7a526d1564968c50073693657ec877af00314443880e63ee9f37a01",
                          "typeString": "literal_string \"Voter doesn't have right to vote\""
                        }
                      ],
                      "id": 418,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3656:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 424,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3656:66:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 425,
                  "nodeType": "ExpressionStatement",
                  "src": "3656:66:0"
                },
                {
                  "expression": {
                    "id": 431,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 426,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3732:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 428,
                        "indexExpression": {
                          "id": 427,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 388,
                          "src": "3739:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3732:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 429,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "3732:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 430,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3756:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3732:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 432,
                  "nodeType": "ExpressionStatement",
                  "src": "3732:29:0"
                },
                {
                  "expression": {
                    "id": 435,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 433,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "3771:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 434,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3786:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "3771:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 436,
                  "nodeType": "ExpressionStatement",
                  "src": "3771:16:0"
                }
              ]
            },
            "functionSelector": "685a9dd8",
            "id": 438,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "removeRightToVote",
            "nameLocation": "3347:17:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 389,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 388,
                  "mutability": "mutable",
                  "name": "voter",
                  "nameLocation": "3373:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 438,
                  "src": "3365:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 387,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3365:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3364:15:0"
            },
            "returnParameters": {
              "id": 390,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3389:0:0"
            },
            "scope": 646,
            "src": "3338:456:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 492,
              "nodeType": "Block",
              "src": "3851:357:0",
              "statements": [
                {
                  "assignments": [
                    445
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 445,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "3875:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 492,
                      "src": "3861:20:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                        "typeString": "struct Voting.Voter"
                      },
                      "typeName": {
                        "id": 444,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 443,
                          "name": "Voter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 13,
                          "src": "3861:5:0"
                        },
                        "referencedDeclaration": 13,
                        "src": "3861:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 450,
                  "initialValue": {
                    "baseExpression": {
                      "id": 446,
                      "name": "voters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34,
                      "src": "3884:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                        "typeString": "mapping(address => struct Voting.Voter storage ref)"
                      }
                    },
                    "id": 449,
                    "indexExpression": {
                      "expression": {
                        "id": 447,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "3891:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 448,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "3891:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3884:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$13_storage",
                      "typeString": "struct Voting.Voter storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3861:41:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 452,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 445,
                          "src": "3920:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                            "typeString": "struct Voting.Voter storage pointer"
                          }
                        },
                        "id": 453,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "3920:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "486173206e6f20726967687420746f20766f7465",
                        "id": 454,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3936:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        },
                        "value": "Has no right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        }
                      ],
                      "id": 451,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3912:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3912:47:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 456,
                  "nodeType": "ExpressionStatement",
                  "src": "3912:47:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 462,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "3977:16:0",
                        "subExpression": {
                          "baseExpression": {
                            "expression": {
                              "id": 458,
                              "name": "sender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 445,
                              "src": "3978:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                                "typeString": "struct Voting.Voter storage pointer"
                              }
                            },
                            "id": 459,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voted",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12,
                            "src": "3978:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bool_$2_storage",
                              "typeString": "bool[2] storage ref"
                            }
                          },
                          "id": 461,
                          "indexExpression": {
                            "hexValue": "30",
                            "id": 460,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3991:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3978:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920766f74656420666f722063616e646964617465",
                        "id": 463,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3995:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2acc0d30fb5ddb55cfba372d0e3a2c100522729d330fb7287fd1b66506e9915f",
                          "typeString": "literal_string \"already voted for candidate\""
                        },
                        "value": "already voted for candidate"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2acc0d30fb5ddb55cfba372d0e3a2c100522729d330fb7287fd1b66506e9915f",
                          "typeString": "literal_string \"already voted for candidate\""
                        }
                      ],
                      "id": 457,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3969:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 464,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3969:56:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 465,
                  "nodeType": "ExpressionStatement",
                  "src": "3969:56:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 473,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 467,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 445,
                            "src": "4043:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                              "typeString": "struct Voting.Voter storage pointer"
                            }
                          },
                          "id": 468,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "area",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 6,
                          "src": "4043:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 469,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "4058:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 471,
                            "indexExpression": {
                              "id": 470,
                              "name": "candidate",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 440,
                              "src": "4069:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4058:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Candidate_$27_storage",
                              "typeString": "struct Voting.Candidate storage ref"
                            }
                          },
                          "id": 472,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "area",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 24,
                          "src": "4058:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4043:41:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "63616e6e6f7420766f74652063616e64696461746520696e20746869732061726561",
                        "id": 474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4086:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_10b35c958a026ea23c020728842dd9fa65b199afc0f8fa68e1b7d3c691bb87ad",
                          "typeString": "literal_string \"cannot vote candidate in this area\""
                        },
                        "value": "cannot vote candidate in this area"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_10b35c958a026ea23c020728842dd9fa65b199afc0f8fa68e1b7d3c691bb87ad",
                          "typeString": "literal_string \"cannot vote candidate in this area\""
                        }
                      ],
                      "id": 466,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4035:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 475,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4035:88:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 476,
                  "nodeType": "ExpressionStatement",
                  "src": "4035:88:0"
                },
                {
                  "expression": {
                    "id": 482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 477,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41,
                          "src": "4133:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                            "typeString": "struct Voting.Candidate storage ref[] storage ref"
                          }
                        },
                        "id": 479,
                        "indexExpression": {
                          "id": 478,
                          "name": "candidate",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 440,
                          "src": "4144:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4133:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$27_storage",
                          "typeString": "struct Voting.Candidate storage ref"
                        }
                      },
                      "id": 480,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 26,
                      "src": "4133:31:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 481,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4168:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4133:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 483,
                  "nodeType": "ExpressionStatement",
                  "src": "4133:36:0"
                },
                {
                  "expression": {
                    "id": 490,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "id": 484,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 445,
                          "src": "4179:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                            "typeString": "struct Voting.Voter storage pointer"
                          }
                        },
                        "id": 487,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "voted",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 12,
                        "src": "4179:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bool_$2_storage",
                          "typeString": "bool[2] storage ref"
                        }
                      },
                      "id": 488,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 486,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4192:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4179:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 489,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4197:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4179:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 491,
                  "nodeType": "ExpressionStatement",
                  "src": "4179:22:0"
                }
              ]
            },
            "functionSelector": "8c08a4dc",
            "id": 493,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voteCandidate",
            "nameLocation": "3809:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 441,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 440,
                  "mutability": "mutable",
                  "name": "candidate",
                  "nameLocation": "3831:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 493,
                  "src": "3823:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 439,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3823:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3822:19:0"
            },
            "returnParameters": {
              "id": 442,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3851:0:0"
            },
            "scope": 646,
            "src": "3800:408:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 536,
              "nodeType": "Block",
              "src": "4257:248:0",
              "statements": [
                {
                  "assignments": [
                    500
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 500,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "4281:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 536,
                      "src": "4267:20:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                        "typeString": "struct Voting.Voter"
                      },
                      "typeName": {
                        "id": 499,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 498,
                          "name": "Voter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 13,
                          "src": "4267:5:0"
                        },
                        "referencedDeclaration": 13,
                        "src": "4267:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 505,
                  "initialValue": {
                    "baseExpression": {
                      "id": 501,
                      "name": "voters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34,
                      "src": "4290:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                        "typeString": "mapping(address => struct Voting.Voter storage ref)"
                      }
                    },
                    "id": 504,
                    "indexExpression": {
                      "expression": {
                        "id": 502,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4297:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 503,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4297:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4290:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$13_storage",
                      "typeString": "struct Voting.Voter storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4267:41:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 507,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 500,
                          "src": "4326:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                            "typeString": "struct Voting.Voter storage pointer"
                          }
                        },
                        "id": 508,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "4326:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "486173206e6f20726967687420746f20766f7465",
                        "id": 509,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4342:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        },
                        "value": "Has no right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        }
                      ],
                      "id": 506,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4318:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 510,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4318:47:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 511,
                  "nodeType": "ExpressionStatement",
                  "src": "4318:47:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "4383:16:0",
                        "subExpression": {
                          "baseExpression": {
                            "expression": {
                              "id": 513,
                              "name": "sender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 500,
                              "src": "4384:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                                "typeString": "struct Voting.Voter storage pointer"
                              }
                            },
                            "id": 514,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voted",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12,
                            "src": "4384:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bool_$2_storage",
                              "typeString": "bool[2] storage ref"
                            }
                          },
                          "id": 516,
                          "indexExpression": {
                            "hexValue": "31",
                            "id": 515,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4397:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4384:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920766f74656420666f72207061727479",
                        "id": 518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4401:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3fa65f686974a9b4178cc1bad10771e42e98ac4b1ba42a0c415211e737a438ae",
                          "typeString": "literal_string \"already voted for party\""
                        },
                        "value": "already voted for party"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3fa65f686974a9b4178cc1bad10771e42e98ac4b1ba42a0c415211e737a438ae",
                          "typeString": "literal_string \"already voted for party\""
                        }
                      ],
                      "id": 512,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4375:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 519,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4375:52:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 520,
                  "nodeType": "ExpressionStatement",
                  "src": "4375:52:0"
                },
                {
                  "expression": {
                    "id": 526,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 521,
                          "name": "parties",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 45,
                          "src": "4437:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                            "typeString": "struct Voting.Party storage ref[] storage ref"
                          }
                        },
                        "id": 523,
                        "indexExpression": {
                          "id": 522,
                          "name": "party",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 495,
                          "src": "4445:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4437:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Party_$18_storage",
                          "typeString": "struct Voting.Party storage ref"
                        }
                      },
                      "id": 524,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17,
                      "src": "4437:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 525,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4465:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4437:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 527,
                  "nodeType": "ExpressionStatement",
                  "src": "4437:29:0"
                },
                {
                  "expression": {
                    "id": 534,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "id": 528,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 500,
                          "src": "4476:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                            "typeString": "struct Voting.Voter storage pointer"
                          }
                        },
                        "id": 531,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "voted",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 12,
                        "src": "4476:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bool_$2_storage",
                          "typeString": "bool[2] storage ref"
                        }
                      },
                      "id": 532,
                      "indexExpression": {
                        "hexValue": "31",
                        "id": 530,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4489:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4476:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 533,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4494:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4476:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 535,
                  "nodeType": "ExpressionStatement",
                  "src": "4476:22:0"
                }
              ]
            },
            "functionSelector": "04cee9b3",
            "id": 537,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voteParty",
            "nameLocation": "4223:9:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 495,
                  "mutability": "mutable",
                  "name": "party",
                  "nameLocation": "4241:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 537,
                  "src": "4233:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 494,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4233:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4232:15:0"
            },
            "returnParameters": {
              "id": 497,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4257:0:0"
            },
            "scope": 646,
            "src": "4214:291:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 578,
              "nodeType": "Block",
              "src": "4615:288:0",
              "statements": [
                {
                  "assignments": [
                    543
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 543,
                      "mutability": "mutable",
                      "name": "winningVoteCount",
                      "nameLocation": "4633:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 578,
                      "src": "4625:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 542,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4625:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 545,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 544,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4652:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4625:28:0"
                },
                {
                  "body": {
                    "id": 576,
                    "nodeType": "Block",
                    "src": "4711:186:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 557,
                                "name": "candidates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 41,
                                "src": "4729:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                  "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                }
                              },
                              "id": 559,
                              "indexExpression": {
                                "id": 558,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 547,
                                "src": "4740:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4729:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$27_storage",
                                "typeString": "struct Voting.Candidate storage ref"
                              }
                            },
                            "id": 560,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voteCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26,
                            "src": "4729:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 561,
                            "name": "winningVoteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 543,
                            "src": "4755:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4729:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 575,
                        "nodeType": "IfStatement",
                        "src": "4725:162:0",
                        "trueBody": {
                          "id": 574,
                          "nodeType": "Block",
                          "src": "4773:114:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 568,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 563,
                                  "name": "winningVoteCount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 543,
                                  "src": "4791:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 564,
                                      "name": "candidates",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 41,
                                      "src": "4810:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                        "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                      }
                                    },
                                    "id": 566,
                                    "indexExpression": {
                                      "id": 565,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 547,
                                      "src": "4821:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4810:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Candidate_$27_storage",
                                      "typeString": "struct Voting.Candidate storage ref"
                                    }
                                  },
                                  "id": 567,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "voteCount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 26,
                                  "src": "4810:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4791:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 569,
                              "nodeType": "ExpressionStatement",
                              "src": "4791:42:0"
                            },
                            {
                              "expression": {
                                "id": 572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 570,
                                  "name": "winningCandidate_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 540,
                                  "src": "4851:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 571,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 547,
                                  "src": "4871:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4851:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 573,
                              "nodeType": "ExpressionStatement",
                              "src": "4851:21:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 550,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 547,
                      "src": "4683:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 551,
                        "name": "candidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "4687:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                          "typeString": "struct Voting.Candidate storage ref[] storage ref"
                        }
                      },
                      "id": 552,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "4687:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4683:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 577,
                  "initializationExpression": {
                    "assignments": [
                      547
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 547,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "4676:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 577,
                        "src": "4668:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 546,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4668:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 549,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 548,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4680:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "4668:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 555,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "4706:3:0",
                      "subExpression": {
                        "id": 554,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 547,
                        "src": "4706:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 556,
                    "nodeType": "ExpressionStatement",
                    "src": "4706:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "4663:234:0"
                }
              ]
            },
            "functionSelector": "d28178d7",
            "id": 579,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "winningCandidate",
            "nameLocation": "4520:16:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 538,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4536:2:0"
            },
            "returnParameters": {
              "id": 541,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 540,
                  "mutability": "mutable",
                  "name": "winningCandidate_",
                  "nameLocation": "4592:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 579,
                  "src": "4584:25:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 539,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4584:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4583:27:0"
            },
            "scope": 646,
            "src": "4511:392:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 620,
              "nodeType": "Block",
              "src": "4977:275:0",
              "statements": [
                {
                  "assignments": [
                    585
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 585,
                      "mutability": "mutable",
                      "name": "winningVoteCount",
                      "nameLocation": "4995:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 620,
                      "src": "4987:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 584,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4987:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 587,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 586,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5014:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4987:28:0"
                },
                {
                  "body": {
                    "id": 618,
                    "nodeType": "Block",
                    "src": "5070:176:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 604,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 599,
                                "name": "parties",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 45,
                                "src": "5088:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                  "typeString": "struct Voting.Party storage ref[] storage ref"
                                }
                              },
                              "id": 601,
                              "indexExpression": {
                                "id": 600,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 589,
                                "src": "5096:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5088:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Party_$18_storage",
                                "typeString": "struct Voting.Party storage ref"
                              }
                            },
                            "id": 602,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voteCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17,
                            "src": "5088:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 603,
                            "name": "winningVoteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 585,
                            "src": "5111:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5088:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 617,
                        "nodeType": "IfStatement",
                        "src": "5084:152:0",
                        "trueBody": {
                          "id": 616,
                          "nodeType": "Block",
                          "src": "5129:107:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 610,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 605,
                                  "name": "winningVoteCount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 585,
                                  "src": "5147:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 606,
                                      "name": "parties",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 45,
                                      "src": "5166:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                        "typeString": "struct Voting.Party storage ref[] storage ref"
                                      }
                                    },
                                    "id": 608,
                                    "indexExpression": {
                                      "id": 607,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 589,
                                      "src": "5174:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5166:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Party_$18_storage",
                                      "typeString": "struct Voting.Party storage ref"
                                    }
                                  },
                                  "id": 609,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "voteCount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 17,
                                  "src": "5166:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5147:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 611,
                              "nodeType": "ExpressionStatement",
                              "src": "5147:39:0"
                            },
                            {
                              "expression": {
                                "id": 614,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 612,
                                  "name": "winningParty_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 582,
                                  "src": "5204:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 613,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 589,
                                  "src": "5220:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5204:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 615,
                              "nodeType": "ExpressionStatement",
                              "src": "5204:17:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 595,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 592,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 589,
                      "src": "5045:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 593,
                        "name": "parties",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45,
                        "src": "5049:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                          "typeString": "struct Voting.Party storage ref[] storage ref"
                        }
                      },
                      "id": 594,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "5049:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5045:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 619,
                  "initializationExpression": {
                    "assignments": [
                      589
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 589,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "5038:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 619,
                        "src": "5030:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 588,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5030:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 591,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 590,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5042:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "5030:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 597,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "5065:3:0",
                      "subExpression": {
                        "id": 596,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 589,
                        "src": "5065:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 598,
                    "nodeType": "ExpressionStatement",
                    "src": "5065:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "5025:221:0"
                }
              ]
            },
            "functionSelector": "ae315fe4",
            "id": 621,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "winningParty",
            "nameLocation": "4918:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 580,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4930:2:0"
            },
            "returnParameters": {
              "id": 583,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 582,
                  "mutability": "mutable",
                  "name": "winningParty_",
                  "nameLocation": "4962:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 621,
                  "src": "4954:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 581,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4954:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4953:23:0"
            },
            "scope": 646,
            "src": "4909:343:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 628,
              "nodeType": "Block",
              "src": "5312:35:0",
              "statements": [
                {
                  "expression": {
                    "id": 626,
                    "name": "voter_count",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 37,
                    "src": "5329:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 625,
                  "id": 627,
                  "nodeType": "Return",
                  "src": "5322:18:0"
                }
              ]
            },
            "functionSelector": "40dec728",
            "id": 629,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voters_count",
            "nameLocation": "5267:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 622,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5279:2:0"
            },
            "returnParameters": {
              "id": 625,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 624,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 629,
                  "src": "5303:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 623,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5303:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5302:9:0"
            },
            "scope": 646,
            "src": "5258:89:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 632,
              "nodeType": "Block",
              "src": "5384:2:0",
              "statements": []
            },
            "functionSelector": "b60d4288",
            "id": 633,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fund",
            "nameLocation": "5362:4:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 630,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5366:2:0"
            },
            "returnParameters": {
              "id": 631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5384:0:0"
            },
            "scope": 646,
            "src": "5353:33:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 644,
              "nodeType": "Block",
              "src": "5443:45:0",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 640,
                          "name": "this",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -28,
                          "src": "5468:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Voting_$646",
                            "typeString": "contract Voting"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_Voting_$646",
                            "typeString": "contract Voting"
                          }
                        ],
                        "id": 639,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "5460:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 638,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5460:7:0",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 641,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5460:13:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 642,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "src": "5460:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 637,
                  "id": 643,
                  "nodeType": "Return",
                  "src": "5453:28:0"
                }
              ]
            },
            "functionSelector": "c1cfb99a",
            "id": 645,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "get_balance",
            "nameLocation": "5401:11:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5412:2:0"
            },
            "returnParameters": {
              "id": 637,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 636,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 645,
                  "src": "5435:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 635,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5435:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5434:9:0"
            },
            "scope": 646,
            "src": "5392:96:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 647,
        "src": "89:5401:0",
        "usedErrors": []
      }
    ],
    "src": "36:5455:0"
  },
  "bytecode": "",
  "bytecodeSha1": "ed69bf5f4fff9efcad2706fe68da78dfeb080731",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "Voting",
  "coverageMap": {
    "branches": {
      "0": {
        "Voting.addCandidates": {
          "49": [
            1931,
            1956,
            true
          ]
        },
        "Voting.giveRightToVote": {
          "52": [
            2768,
            2793,
            true
          ],
          "53": [
            2891,
            2913,
            true
          ],
          "54": [
            2918,
            2940,
            true
          ],
          "55": [
            3007,
            3029,
            true
          ]
        },
        "Voting.removeRightToVote": {
          "42": [
            3420,
            3445,
            true
          ],
          "43": [
            3548,
            3570,
            true
          ],
          "44": [
            3575,
            3597,
            true
          ],
          "45": [
            3664,
            3685,
            true
          ]
        },
        "Voting.voteCandidate": {
          "46": [
            3920,
            3934,
            true
          ],
          "47": [
            3977,
            3993,
            true
          ],
          "48": [
            4043,
            4084,
            true
          ]
        },
        "Voting.voteParty": {
          "40": [
            4326,
            4340,
            true
          ],
          "41": [
            4383,
            4399,
            true
          ]
        },
        "Voting.winningCandidate": {
          "51": [
            4729,
            4771,
            false
          ]
        },
        "Voting.winningParty": {
          "50": [
            5088,
            5127,
            false
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Voting.addCandidates": {
          "20": [
            1910,
            2022
          ],
          "21": [
            2103,
            2387
          ],
          "22": [
            2084,
            2087
          ]
        },
        "Voting.getCandidates": {
          "6": [
            2486,
            2503
          ]
        },
        "Voting.getParties": {
          "23": [
            2585,
            2599
          ]
        },
        "Voting.get_balance": {
          "1": [
            5453,
            5481
          ]
        },
        "Voting.giveRightToVote": {
          "30": [
            2747,
            2859
          ],
          "31": [
            2869,
            2989
          ],
          "32": [
            2999,
            3056
          ],
          "33": [
            3066,
            3094
          ],
          "34": [
            3104,
            3125
          ],
          "35": [
            3135,
            3174
          ],
          "36": [
            3184,
            3214
          ],
          "37": [
            3224,
            3254
          ],
          "38": [
            3264,
            3294
          ],
          "39": [
            3304,
            3320
          ]
        },
        "Voting.removeRightToVote": {
          "10": [
            3399,
            3516
          ],
          "11": [
            3526,
            3646
          ],
          "12": [
            3656,
            3722
          ],
          "13": [
            3732,
            3761
          ],
          "14": [
            3771,
            3787
          ]
        },
        "Voting.stringToUint": {
          "7": [
            1741,
            1777
          ],
          "8": [
            1535,
            1538
          ],
          "9": [
            1802,
            1812
          ]
        },
        "Voting.voteCandidate": {
          "15": [
            3912,
            3959
          ],
          "16": [
            3969,
            4025
          ],
          "17": [
            4035,
            4123
          ],
          "18": [
            4133,
            4169
          ],
          "19": [
            4179,
            4201
          ]
        },
        "Voting.voteParty": {
          "2": [
            4318,
            4365
          ],
          "3": [
            4375,
            4427
          ],
          "4": [
            4437,
            4466
          ],
          "5": [
            4476,
            4498
          ]
        },
        "Voting.voters_count": {
          "0": [
            5322,
            5340
          ]
        },
        "Voting.winningCandidate": {
          "27": [
            4791,
            4833
          ],
          "28": [
            4851,
            4872
          ],
          "29": [
            4706,
            4709
          ]
        },
        "Voting.winningParty": {
          "24": [
            5147,
            5186
          ],
          "25": [
            5204,
            5221
          ],
          "26": [
            5065,
            5068
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "6080604052600436106100fe5760003560e01c80638c08a4dc11610095578063ae315fe411610064578063ae315fe4146102da578063b60d428814610123578063c1cfb99a146102ef578063d28178d714610302578063f972c1c41461031757600080fd5b80638c08a4dc146102495780639f6680a814610269578063a3ec138d14610289578063a8311aa8146102b857600080fd5b80633477ee2e116100d15780633477ee2e146101b657806340dec728146101e6578063685a9dd8146101fb57806370651a181461021b57600080fd5b806304cee9b31461010357806306a49fce146101255780631bd95155146101505780632e4176cf1461017e575b600080fd5b34801561010f57600080fd5b5061012361011e36600461122e565b610337565b005b34801561013157600080fd5b5061013a610456565b6040516101479190611294565b60405180910390f35b34801561015c57600080fd5b5061017061016b36600461140f565b6105ed565b604051908152602001610147565b34801561018a57600080fd5b5060005461019e906001600160a01b031681565b6040516001600160a01b039091168152602001610147565b3480156101c257600080fd5b506101d66101d136600461122e565b610691565b604051610147949392919061144c565b3480156101f257600080fd5b50600254610170565b34801561020757600080fd5b5061012361021636600461149d565b6107e1565b34801561022757600080fd5b5061023b61023636600461122e565b61098e565b6040516101479291906114c1565b34801561025557600080fd5b5061012361026436600461122e565b610a4a565b34801561027557600080fd5b506101236102843660046114e3565b610bc3565b34801561029557600080fd5b506102a96102a436600461149d565b610d25565b604051610147939291906115fa565b3480156102c457600080fd5b506102cd610dd3565b6040516101479190611624565b3480156102e657600080fd5b50610170610ec5565b3480156102fb57600080fd5b5047610170565b34801561030e57600080fd5b50610170610f42565b34801561032357600080fd5b5061012361033236600461168c565b610fba565b336000908152600160205260409020600281015460ff166103965760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b60448201526064015b60405180910390fd5b6003810154610100900460ff16156103f05760405162461bcd60e51b815260206004820152601760248201527f616c726561647920766f74656420666f72207061727479000000000000000000604482015260640161038d565b60016004838154811061040557610405611702565b90600052602060002090600202016001016000828254610425919061172e565b909155506001905060038201815b602091828204019190066101000a81548160ff0219169083151502179055505050565b60606003805480602002602001604051908101604052809291908181526020016000905b828210156105e457838290600052602060002090600402016040518060800160405290816000820180546104ad90611746565b80601f01602080910402602001604051908101604052809291908181526020018280546104d990611746565b80156105265780601f106104fb57610100808354040283529160200191610526565b820191906000526020600020905b81548152906001019060200180831161050957829003601f168201915b5050505050815260200160018201805461053f90611746565b80601f016020809104026020016040519081016040528092919081815260200182805461056b90611746565b80156105b85780601f1061058d576101008083540402835291602001916105b8565b820191906000526020600020905b81548152906001019060200180831161059b57829003601f168201915b50505050508152602001600282015481526020016003820154815250508152602001906001019061047a565b50505050905090565b60008082815b815181101561068857600081835161060b9190611781565b9050600083838151811061062157610621611702565b01602001516001600160f81b03198116915060f81c6000610643603083611781565b9050610650600185611781565b61065b90600a61187e565b610665908261188a565b61066f908861172e565b9650505050508080610680906118a9565b9150506105f3565b50909392505050565b600381815481106106a157600080fd5b90600052602060002090600402016000915090508060000180546106c490611746565b80601f01602080910402602001604051908101604052809291908181526020018280546106f090611746565b801561073d5780601f106107125761010080835404028352916020019161073d565b820191906000526020600020905b81548152906001019060200180831161072057829003601f168201915b50505050509080600101805461075290611746565b80601f016020809104026020016040519081016040528092919081815260200182805461077e90611746565b80156107cb5780601f106107a0576101008083540402835291602001916107cb565b820191906000526020600020905b8154815290600101906020018083116107ae57829003601f168201915b5050505050908060020154908060030154905084565b6000546001600160a01b031633146108515760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c792063686169726d616e2063616e20676976652064656e6f756e63652060448201526c726967687420746f20766f746560981b606482015260840161038d565b6001600160a01b03811660009081526001602052604090206003015460ff16158061089d57506001600160a01b038116600090815260016020526040902060030154610100900460ff16155b6108e35760405162461bcd60e51b8152602060048201526017602482015276151a19481d9bdd195c88185b1c9958591e481d9bdd1959604a1b604482015260640161038d565b6001600160a01b03811660009081526001602052604090206002015460ff1661094e5760405162461bcd60e51b815260206004820181905260248201527f566f74657220646f65736e2774206861766520726967687420746f20766f7465604482015260640161038d565b6001600160a01b038116600090815260016020819052604082206002908101805460ff19169055805491929091610986908490611781565b909155505050565b6004818154811061099e57600080fd5b90600052602060002090600202016000915090508060000180546109c190611746565b80601f01602080910402602001604051908101604052809291908181526020018280546109ed90611746565b8015610a3a5780601f10610a0f57610100808354040283529160200191610a3a565b820191906000526020600020905b815481529060010190602001808311610a1d57829003601f168201915b5050505050908060010154905082565b336000908152600160205260409020600281015460ff16610aa45760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b604482015260640161038d565b600381015460ff1615610af95760405162461bcd60e51b815260206004820152601b60248201527f616c726561647920766f74656420666f722063616e6469646174650000000000604482015260640161038d565b60038281548110610b0c57610b0c611702565b906000526020600020906004020160020154816001015414610b7b5760405162461bcd60e51b815260206004820152602260248201527f63616e6e6f7420766f74652063616e64696461746520696e2074686973206172604482015261656160f01b606482015260840161038d565b600160038381548110610b9057610b90611702565b90600052602060002090600402016003016000828254610bb0919061172e565b9091555060019050600382016000610433565b6000546001600160a01b03163314610bed5760405162461bcd60e51b815260040161038d906118c4565b60005b8151811015610d215760036040518060800160405280848481518110610c1857610c18611702565b6020026020010151600060038110610c3257610c32611702565b60200201518152602001848481518110610c4e57610c4e611702565b6020026020010151600160038110610c6857610c68611702565b60200201518152602001610cab858581518110610c8757610c87611702565b6020026020010151600260038110610ca157610ca1611702565b60200201516105ed565b815260006020918201819052835460018101855593815281902082518051939460040290910192610cdf9284920190611195565b506020828101518051610cf89260018501920190611195565b506040820151600282015560609091015160039091015580610d19816118a9565b915050610bf0565b5050565b600160205260009081526040902080548190610d4090611746565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6c90611746565b8015610db95780601f10610d8e57610100808354040283529160200191610db9565b820191906000526020600020905b815481529060010190602001808311610d9c57829003601f168201915b50505050600183015460029093015491929160ff16905083565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156105e45783829060005260206000209060020201604051806040016040529081600082018054610e2a90611746565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5690611746565b8015610ea35780601f10610e7857610100808354040283529160200191610ea3565b820191906000526020600020905b815481529060010190602001808311610e8657829003601f168201915b5050505050815260200160018201548152505081526020019060010190610df7565b600080805b600454811015610f3d578160048281548110610ee857610ee8611702565b9060005260206000209060020201600101541115610f2b5760048181548110610f1357610f13611702565b90600052602060002090600202016001015491508092505b80610f35816118a9565b915050610eca565b505090565b600080805b600354811015610f3d578160038281548110610f6557610f65611702565b9060005260206000209060040201600301541115610fa85760038181548110610f9057610f90611702565b90600052602060002090600402016003015491508092505b80610fb2816118a9565b915050610f47565b6000546001600160a01b03163314610fe45760405162461bcd60e51b815260040161038d906118c4565b6001600160a01b03831660009081526001602052604090206003015460ff16158061103057506001600160a01b038316600090815260016020526040902060030154610100900460ff16155b6110765760405162461bcd60e51b8152602060048201526017602482015276151a19481d9bdd195c88185b1c9958591e481d9bdd1959604a1b604482015260640161038d565b6001600160a01b03831660009081526001602052604090206002015460ff16156110db5760405162461bcd60e51b8152602060048201526016602482015275566f7465722063616e20616c726561647920766f746560501b604482015260640161038d565b6001600160a01b038316600090815260016020818152604090922060028101805460ff1916909217909155835161111492850190611195565b5061111e816105ed565b6001600160a01b038416600081815260016020819052604080832091820194909455600301805461ffff1916905591519091906509184e72a0009082818181858883f19350505050158015611177573d6000803e3d6000fd5b5060016002600082825461118b919061172e565b9091555050505050565b8280546111a190611746565b90600052602060002090601f0160209004810192826111c35760008555611209565b82601f106111dc57805160ff1916838001178555611209565b82800160010185558215611209579182015b828111156112095782518255916020019190600101906111ee565b50611215929150611219565b5090565b5b80821115611215576000815560010161121a565b60006020828403121561124057600080fd5b5035919050565b6000815180845260005b8181101561126d57602081850181015186830182015201611251565b8181111561127f576000602083870101525b50601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561132157603f198984030185528151608081518186526112e182870182611247565b915050888201518582038a8701526112f98282611247565b838a0151878b01526060938401519390960192909252505093860193908601906001016112bb565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156113685761136861132f565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113975761139761132f565b604052919050565b600082601f8301126113b057600080fd5b813567ffffffffffffffff8111156113ca576113ca61132f565b6113dd601f8201601f191660200161136e565b8181528460208386010111156113f257600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561142157600080fd5b813567ffffffffffffffff81111561143857600080fd5b6114448482850161139f565b949350505050565b60808152600061145f6080830187611247565b82810360208401526114718187611247565b604084019590955250506060015292915050565b6001600160a01b038116811461149a57600080fd5b50565b6000602082840312156114af57600080fd5b81356114ba81611485565b9392505050565b6040815260006114d46040830185611247565b90508260208301529392505050565b600060208083850312156114f657600080fd5b67ffffffffffffffff808435111561150d57600080fd5b8335840185601f82011261152057600080fd5b8035828111156115325761153261132f565b8060051b61154185820161136e565b918252828101850191858101908984111561155b57600080fd5b86850192505b838310156115ed57858335111561157757600080fd5b823585018a603f82011261158a57600080fd5b611592611345565b80608083018d8111156115a457600080fd5b8a84015b818110156115da578a813511156115be57600080fd5b6115cd8f8d833588010161139f565b8452928b01928b016115a8565b5050845250509186019190860190611561565b9998505050505050505050565b60608152600061160d6060830186611247565b602083019490945250901515604090910152919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561132157888303603f190185528151805187855261166f88860182611247565b91890151948901949094529487019492509086019060010161164b565b6000806000606084860312156116a157600080fd5b83356116ac81611485565b9250602084013567ffffffffffffffff808211156116c957600080fd5b6116d58783880161139f565b935060408601359150808211156116eb57600080fd5b506116f88682870161139f565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561174157611741611718565b500190565b600181811c9082168061175a57607f821691505b6020821081141561177b57634e487b7160e01b600052602260045260246000fd5b50919050565b60008282101561179357611793611718565b500390565b600181815b808511156117d35781600019048211156117b9576117b9611718565b808516156117c657918102915b93841c939080029061179d565b509250929050565b6000826117ea57506001611878565b816117f757506000611878565b816001811461180d576002811461181757611833565b6001915050611878565b60ff84111561182857611828611718565b50506001821b611878565b5060208310610133831016604e8410600b8410161715611856575081810a611878565b6118608383611798565b806000190482111561187457611874611718565b0290505b92915050565b60006114ba83836117db565b60008160001904831182151516156118a4576118a4611718565b500290565b60006000198214156118bd576118bd611718565b5060010190565b60208082526028908201527f4f6e6c792063686169726d616e2063616e20676976652074686520726967687460408201526720746f20766f746560c01b60608201526080019056fea2646970667358221220067fe27abed5ae878d5a36cdfc9e7cb9c34a3e101691a140bee5b8f6da0d445164736f6c634300080c0033",
  "deployedSourceMap": "89:5401:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4214:291;;;;;;;;;;-1:-1:-1;4214:291:0;;;;;:::i;:::-;;:::i;:::-;;2410:100;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1323:500;;;;;;;;;;-1:-1:-1;1323:500:0;;;;;:::i;:::-;;:::i;:::-;;;3706:25:1;;;3694:2;3679:18;1323:500:0;3560:177:1;413:26:0;;;;;;;;;;-1:-1:-1;413:26:0;;;;-1:-1:-1;;;;;413:26:0;;;;;;-1:-1:-1;;;;;3906:32:1;;;3888:51;;3876:2;3861:18;413:26:0;3742:203:1;519:29:0;;;;;;;;;;-1:-1:-1;519:29:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;5258:89::-;;;;;;;;;;-1:-1:-1;5329:11:0;;5258:89;;3338:456;;;;;;;;;;-1:-1:-1;3338:456:0;;;;;:::i;:::-;;:::i;554:22::-;;;;;;;;;;-1:-1:-1;554:22:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;3800:408::-;;;;;;;;;;-1:-1:-1;3800:408:0;;;;;:::i;:::-;;:::i;1828:576::-;;;;;;;;;;-1:-1:-1;1828:576:0;;;;;:::i;:::-;;:::i;445:39::-;;;;;;;;;;-1:-1:-1;445:39:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2516:90::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;4909:343::-;;;;;;;;;;;;;:::i;5392:96::-;;;;;;;;;;-1:-1:-1;5460:21:0;5392:96;;4511:392;;;;;;;;;;;;;:::i;2612:715::-;;;;;;;;;;-1:-1:-1;2612:715:0;;;;;:::i;:::-;;:::i;4214:291::-;4297:10;4267:20;4290:18;;;:6;:18;;;;;4326:14;;;;;;4318:47;;;;-1:-1:-1;;;4318:47:0;;9134:2:1;4318:47:0;;;9116:21:1;9173:2;9153:18;;;9146:30;-1:-1:-1;;;9192:18:1;;;9185:50;9252:18;;4318:47:0;;;;;;;;;4384:12;;;:15;;;;;;4383:16;4375:52;;;;-1:-1:-1;;;4375:52:0;;9615:2:1;4375:52:0;;;9597:21:1;9654:2;9634:18;;;9627:30;9693:25;9673:18;;;9666:53;9736:18;;4375:52:0;9413:347:1;4375:52:0;4465:1;4437:7;4445:5;4437:14;;;;;;;;:::i;:::-;;;;;;;;;;;:24;;;:29;;;;;;;:::i;:::-;;;;-1:-1:-1;4494:4:0;;-1:-1:-1;4476:12:0;;;4494:4;4476:15;;;;;;;;;;:22;;;;;;;;;;;;;;;;;;4257:248;4214:291;:::o;2410:100::-;2456:18;2493:10;2486:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2410:100;:::o;1323:500::-;1390:4;;1470:9;1390:4;1494:299;1515:11;:18;1513:1;:20;1494:299;;;1558:8;1590:1;1569:11;:18;:22;;;;:::i;:::-;1558:33;;1609:11;1623;1635:1;1623:14;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;1623:14:0;;;-1:-1:-1;1623:14:0;;1655:10;1705:17;1717:4;1623:14;1705:17;:::i;:::-;1693:29;-1:-1:-1;1769:5:0;1773:1;1769:3;:5;:::i;:::-;1764:11;;:2;:11;:::i;:::-;1750:26;;1755:4;1750:26;:::i;:::-;1741:36;;;;:::i;:::-;;;1540:253;;;;1535:3;;;;;:::i;:::-;;;;1494:299;;;-1:-1:-1;1809:3:0;;1323:500;-1:-1:-1;;;1323:500:0:o;519:29::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3338:456::-;3434:11;;-1:-1:-1;;;;;3434:11:0;3420:10;:25;3399:117;;;;-1:-1:-1;;;3399:117:0;;12434:2:1;3399:117:0;;;12416:21:1;12473:2;12453:18;;;12446:30;12512:34;12492:18;;;12485:62;-1:-1:-1;;;12563:18:1;;;12556:43;12616:19;;3399:117:0;12232:409:1;3399:117:0;-1:-1:-1;;;;;3548:13:0;;;;;;:6;:13;;;;;:19;;:22;;;3547:23;;:50;;-1:-1:-1;;;;;;3575:13:0;;;;;;:6;:13;;;;;:19;;:22;;;;;;3574:23;3547:50;3526:120;;;;-1:-1:-1;;;3526:120:0;;12848:2:1;3526:120:0;;;12830:21:1;12887:2;12867:18;;;12860:30;-1:-1:-1;;;12906:18:1;;;12899:53;12969:18;;3526:120:0;12646:347:1;3526:120:0;-1:-1:-1;;;;;3664:13:0;;;;;;:6;:13;;;;;:21;;;;;3656:66;;;;-1:-1:-1;;;3656:66:0;;13200:2:1;3656:66:0;;;13182:21:1;;;13219:18;;;13212:30;13278:34;13258:18;;;13251:62;13330:18;;3656:66:0;12998:356:1;3656:66:0;-1:-1:-1;;;;;3732:13:0;;3756:5;3732:13;;;:6;:13;;;;;;;:21;;;;:29;;-1:-1:-1;;3732:29:0;;;3771:16;;3732:6;;:21;;3771:16;;3732:6;;3771:16;:::i;:::-;;;;-1:-1:-1;;;3338:456:0:o;554:22::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3800:408::-;3891:10;3861:20;3884:18;;;:6;:18;;;;;3920:14;;;;;;3912:47;;;;-1:-1:-1;;;3912:47:0;;9134:2:1;3912:47:0;;;9116:21:1;9173:2;9153:18;;;9146:30;-1:-1:-1;;;9192:18:1;;;9185:50;9252:18;;3912:47:0;8932:344:1;3912:47:0;3978:12;;;:15;;;3977:16;3969:56;;;;-1:-1:-1;;;3969:56:0;;13561:2:1;3969:56:0;;;13543:21:1;13600:2;13580:18;;;13573:30;13639:29;13619:18;;;13612:57;13686:18;;3969:56:0;13359:351:1;3969:56:0;4058:10;4069:9;4058:21;;;;;;;;:::i;:::-;;;;;;;;;;;:26;;;4043:6;:11;;;:41;4035:88;;;;-1:-1:-1;;;4035:88:0;;13917:2:1;4035:88:0;;;13899:21:1;13956:2;13936:18;;;13929:30;13995:34;13975:18;;;13968:62;-1:-1:-1;;;14046:18:1;;;14039:32;14088:19;;4035:88:0;13715:398:1;4035:88:0;4168:1;4133:10;4144:9;4133:21;;;;;;;;:::i;:::-;;;;;;;;;;;:31;;;:36;;;;;;;:::i;:::-;;;;-1:-1:-1;4197:4:0;;-1:-1:-1;4179:12:0;;;4192:1;4179:15;;1828:576;1945:11;;-1:-1:-1;;;;;1945:11:0;1931:10;:25;1910:112;;;;-1:-1:-1;;;1910:112:0;;;;;;;:::i;:::-;2037:9;2032:366;2056:19;:26;2052:1;:30;2032:366;;;2103:10;2136:237;;;;;;;;2174:19;2194:1;2174:22;;;;;;;;:::i;:::-;;;;;;;2197:1;2174:25;;;;;;;:::i;:::-;;;;;2136:237;;;;2228:19;2248:1;2228:22;;;;;;;;:::i;:::-;;;;;;;2251:1;2228:25;;;;;;;:::i;:::-;;;;;2136:237;;;;2281:39;2294:19;2314:1;2294:22;;;;;;;;:::i;:::-;;;;;;;2317:1;2294:25;;;;;;;:::i;:::-;;;;;2281:12;:39::i;:::-;2136:237;;2353:1;2136:237;;;;;;;2103:284;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2103:284:0;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2103:284:0;;;;;;;;;;;;;;;;;;2084:3;;;;:::i;:::-;;;;2032:366;;;;1828:576;:::o;445:39::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;445:39:0;;;;;;;;;;;;;;;-1:-1:-1;445:39:0;:::o;2516:90::-;2559:14;2592:7;2585:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4909:343;4954:21;;;5025:221;5049:7;:14;5045:18;;5025:221;;;5111:16;5088:7;5096:1;5088:10;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;:39;5084:152;;;5166:7;5174:1;5166:10;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;5147:39;;5220:1;5204:17;;5084:152;5065:3;;;;:::i;:::-;;;;5025:221;;;;4977:275;4909:343;:::o;4511:392::-;4584:25;;;4663:234;4687:10;:17;4683:21;;4663:234;;;4755:16;4729:10;4740:1;4729:13;;;;;;;;:::i;:::-;;;;;;;;;;;:23;;;:42;4725:162;;;4810:10;4821:1;4810:13;;;;;;;;:::i;:::-;;;;;;;;;;;:23;;;4791:42;;4871:1;4851:21;;4725:162;4706:3;;;;:::i;:::-;;;;4663:234;;2612:715;2782:11;;-1:-1:-1;;;;;2782:11:0;2768:10;:25;2747:112;;;;-1:-1:-1;;;2747:112:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2891:13:0;;;;;;:6;:13;;;;;:19;;:22;;;2890:23;;:50;;-1:-1:-1;;;;;;2918:13:0;;;;;;:6;:13;;;;;:19;;:22;;;;;;2917:23;2890:50;2869:120;;;;-1:-1:-1;;;2869:120:0;;12848:2:1;2869:120:0;;;12830:21:1;12887:2;12867:18;;;12860:30;-1:-1:-1;;;12906:18:1;;;12899:53;12969:18;;2869:120:0;12646:347:1;2869:120:0;-1:-1:-1;;;;;3008:13:0;;;;;;:6;:13;;;;;:21;;;;;3007:22;2999:57;;;;-1:-1:-1;;;2999:57:0;;14729:2:1;2999:57:0;;;14711:21:1;14768:2;14748:18;;;14741:30;-1:-1:-1;;;14787:18:1;;;14780:52;14849:18;;2999:57:0;14527:346:1;2999:57:0;-1:-1:-1;;;;;3066:13:0;;;;;;3090:4;3066:13;;;;;;;;:21;;;:28;;-1:-1:-1;;3066:28:0;;;;;;;3104:21;;;;;;;;:::i;:::-;;3156:18;3169:4;3156:12;:18::i;:::-;-1:-1:-1;;;;;3135:13:0;;;;;;:6;:13;;;;;;;;:18;;;:39;;;;3184:19;;:30;;-1:-1:-1;;3224:30:0;;;3264;;3135:13;;;3279:14;;3135:13;3264:30;3135:13;3264:30;3279:14;3135:13;;3264:30;;;;;;;;;;;;;;;;;;;;3319:1;3304:11;;:16;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;2612:715:0:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:180:1;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;199:472::-;241:3;279:5;273:12;306:6;301:3;294:19;331:1;341:162;355:6;352:1;349:13;341:162;;;417:4;473:13;;;469:22;;463:29;445:11;;;441:20;;434:59;370:12;341:162;;;521:6;518:1;515:13;512:87;;;587:1;580:4;571:6;566:3;562:16;558:27;551:38;512:87;-1:-1:-1;653:2:1;632:15;-1:-1:-1;;628:29:1;619:39;;;;660:4;615:50;;199:472;-1:-1:-1;;199:472:1:o;676:1348::-;868:4;897:2;937;926:9;922:18;967:2;956:9;949:21;990:6;1025;1019:13;1056:6;1048;1041:22;1082:2;1072:12;;1115:2;1104:9;1100:18;1093:25;;1177:2;1167:6;1164:1;1160:14;1149:9;1145:30;1141:39;1215:2;1207:6;1203:15;1236:1;1246:749;1260:6;1257:1;1254:13;1246:749;;;1353:2;1349:7;1337:9;1329:6;1325:22;1321:36;1316:3;1309:49;1387:6;1381:13;1417:4;1460:2;1454:9;1491:2;1483:6;1476:18;1521:48;1565:2;1557:6;1553:15;1539:12;1521:48;:::i;:::-;1507:62;;;1618:2;1614;1610:11;1604:18;1671:6;1663;1659:19;1654:2;1646:6;1642:15;1635:44;1706:41;1740:6;1724:14;1706:41;:::i;:::-;1790:11;;;1784:18;1767:15;;;1760:43;1826:4;1873:11;;;1867:18;1850:15;;;;1843:43;;;;-1:-1:-1;;1973:12:1;;;;1938:15;;;;1282:1;1275:9;1246:749;;;-1:-1:-1;2012:6:1;;676:1348;-1:-1:-1;;;;;;;;676:1348:1:o;2029:127::-;2090:10;2085:3;2081:20;2078:1;2071:31;2121:4;2118:1;2111:15;2145:4;2142:1;2135:15;2161:251;2233:2;2227:9;2275:2;2263:15;;2308:18;2293:34;;2329:22;;;2290:62;2287:88;;;2355:18;;:::i;:::-;2391:2;2384:22;2161:251;:::o;2417:275::-;2488:2;2482:9;2553:2;2534:13;;-1:-1:-1;;2530:27:1;2518:40;;2588:18;2573:34;;2609:22;;;2570:62;2567:88;;;2635:18;;:::i;:::-;2671:2;2664:22;2417:275;;-1:-1:-1;2417:275:1:o;2697:531::-;2740:5;2793:3;2786:4;2778:6;2774:17;2770:27;2760:55;;2811:1;2808;2801:12;2760:55;2847:6;2834:20;2873:18;2869:2;2866:26;2863:52;;;2895:18;;:::i;:::-;2939:55;2982:2;2963:13;;-1:-1:-1;;2959:27:1;2988:4;2955:38;2939:55;:::i;:::-;3019:2;3010:7;3003:19;3065:3;3058:4;3053:2;3045:6;3041:15;3037:26;3034:35;3031:55;;;3082:1;3079;3072:12;3031:55;3147:2;3140:4;3132:6;3128:17;3121:4;3112:7;3108:18;3095:55;3195:1;3170:16;;;3188:4;3166:27;3159:38;;;;3174:7;2697:531;-1:-1:-1;;;2697:531:1:o;3233:322::-;3302:6;3355:2;3343:9;3334:7;3330:23;3326:32;3323:52;;;3371:1;3368;3361:12;3323:52;3411:9;3398:23;3444:18;3436:6;3433:30;3430:50;;;3476:1;3473;3466:12;3430:50;3499;3541:7;3532:6;3521:9;3517:22;3499:50;:::i;:::-;3489:60;3233:322;-1:-1:-1;;;;3233:322:1:o;3950:527::-;4203:3;4192:9;4185:22;4166:4;4230:46;4271:3;4260:9;4256:19;4248:6;4230:46;:::i;:::-;4324:9;4316:6;4312:22;4307:2;4296:9;4292:18;4285:50;4352:33;4378:6;4370;4352:33;:::i;:::-;4416:2;4401:18;;4394:34;;;;-1:-1:-1;;4459:2:1;4444:18;4437:34;4344:41;3950:527;-1:-1:-1;;3950:527:1:o;4482:131::-;-1:-1:-1;;;;;4557:31:1;;4547:42;;4537:70;;4603:1;4600;4593:12;4537:70;4482:131;:::o;4618:247::-;4677:6;4730:2;4718:9;4709:7;4705:23;4701:32;4698:52;;;4746:1;4743;4736:12;4698:52;4785:9;4772:23;4804:31;4829:5;4804:31;:::i;:::-;4854:5;4618:247;-1:-1:-1;;;4618:247:1:o;4870:291::-;5047:2;5036:9;5029:21;5010:4;5067:45;5108:2;5097:9;5093:18;5085:6;5067:45;:::i;:::-;5059:53;;5148:6;5143:2;5132:9;5128:18;5121:34;4870:291;;;;;:::o;5166:1636::-;5283:6;5314:2;5357;5345:9;5336:7;5332:23;5328:32;5325:52;;;5373:1;5370;5363:12;5325:52;5396:18;5454:2;5442:9;5429:23;5426:31;5423:51;;;5470:1;5467;5460:12;5423:51;5521:9;5508:23;5497:9;5493:39;5570:7;5563:4;5559:2;5555:13;5551:27;5541:55;;5592:1;5589;5582:12;5541:55;5628:2;5615:16;5650:2;5646;5643:10;5640:36;;;5656:18;;:::i;:::-;5702:2;5699:1;5695:10;5725:28;5749:2;5745;5741:11;5725:28;:::i;:::-;5787:15;;;5857:11;;;5853:20;;;5818:12;;;;5885:19;;;5882:39;;;5917:1;5914;5907:12;5882:39;5949:2;5945;5941:11;5930:22;;5961:811;5977:6;5972:3;5969:15;5961:811;;;6056:2;6050:3;6037:17;6034:25;6031:45;;;6072:1;6069;6062:12;6031:45;6120:3;6107:17;6103:2;6099:26;6165:7;6160:2;6156;6152:11;6148:25;6138:53;;6187:1;6184;6177:12;6138:53;6217:22;;:::i;:::-;6265:5;6307:3;6303:2;6299:12;6340:7;6330:8;6327:21;6324:41;;;6361:1;6358;6351:12;6324:41;6399:2;6395;6391:11;6415:284;6433:8;6426:5;6423:19;6415:284;;;6528:2;6520:5;6507:19;6504:27;6501:47;;;6544:1;6541;6534:12;6501:47;6579:65;6636:7;6631:2;6622:5;6609:19;6605:2;6601:28;6597:37;6579:65;:::i;:::-;6565:80;;6671:14;;;;6454;;6415:284;;;-1:-1:-1;;6712:18:1;;-1:-1:-1;;5994:12:1;;;;6750;;;;5961:811;;;6791:5;5166:1636;-1:-1:-1;;;;;;;;;5166:1636:1:o;6807:372::-;7006:2;6995:9;6988:21;6969:4;7026:45;7067:2;7056:9;7052:18;7044:6;7026:45;:::i;:::-;7102:2;7087:18;;7080:34;;;;-1:-1:-1;7157:14:1;;7150:22;7145:2;7130:18;;;7123:50;7018:53;6807:372;-1:-1:-1;6807:372:1:o;7184:1052::-;7368:4;7397:2;7437;7426:9;7422:18;7467:2;7456:9;7449:21;7490:6;7525;7519:13;7556:6;7548;7541:22;7582:2;7572:12;;7615:2;7604:9;7600:18;7593:25;;7677:2;7667:6;7664:1;7660:14;7649:9;7645:30;7641:39;7715:2;7707:6;7703:15;7736:1;7746:461;7760:6;7757:1;7754:13;7746:461;;;7825:22;;;-1:-1:-1;;7821:36:1;7809:49;;7881:13;;7927:9;;7949:18;;;7994:48;8026:15;;;7927:9;7994:48;:::i;:::-;8085:11;;;8079:18;8062:15;;;8055:43;;;;8185:12;;;;7980:62;-1:-1:-1;8150:15:1;;;;7782:1;7775:9;7746:461;;8241:686;8346:6;8354;8362;8415:2;8403:9;8394:7;8390:23;8386:32;8383:52;;;8431:1;8428;8421:12;8383:52;8470:9;8457:23;8489:31;8514:5;8489:31;:::i;:::-;8539:5;-1:-1:-1;8595:2:1;8580:18;;8567:32;8618:18;8648:14;;;8645:34;;;8675:1;8672;8665:12;8645:34;8698:50;8740:7;8731:6;8720:9;8716:22;8698:50;:::i;:::-;8688:60;;8801:2;8790:9;8786:18;8773:32;8757:48;;8830:2;8820:8;8817:16;8814:36;;;8846:1;8843;8836:12;8814:36;;8869:52;8913:7;8902:8;8891:9;8887:24;8869:52;:::i;:::-;8859:62;;;8241:686;;;;;:::o;9281:127::-;9342:10;9337:3;9333:20;9330:1;9323:31;9373:4;9370:1;9363:15;9397:4;9394:1;9387:15;9765:127;9826:10;9821:3;9817:20;9814:1;9807:31;9857:4;9854:1;9847:15;9881:4;9878:1;9871:15;9897:128;9937:3;9968:1;9964:6;9961:1;9958:13;9955:39;;;9974:18;;:::i;:::-;-1:-1:-1;10010:9:1;;9897:128::o;10030:380::-;10109:1;10105:12;;;;10152;;;10173:61;;10227:4;10219:6;10215:17;10205:27;;10173:61;10280:2;10272:6;10269:14;10249:18;10246:38;10243:161;;;10326:10;10321:3;10317:20;10314:1;10307:31;10361:4;10358:1;10351:15;10389:4;10386:1;10379:15;10243:161;;10030:380;;;:::o;10415:125::-;10455:4;10483:1;10480;10477:8;10474:34;;;10488:18;;:::i;:::-;-1:-1:-1;10525:9:1;;10415:125::o;10545:422::-;10634:1;10677:5;10634:1;10691:270;10712:7;10702:8;10699:21;10691:270;;;10771:4;10767:1;10763:6;10759:17;10753:4;10750:27;10747:53;;;10780:18;;:::i;:::-;10830:7;10820:8;10816:22;10813:55;;;10850:16;;;;10813:55;10929:22;;;;10889:15;;;;10691:270;;;10695:3;10545:422;;;;;:::o;10972:806::-;11021:5;11051:8;11041:80;;-1:-1:-1;11092:1:1;11106:5;;11041:80;11140:4;11130:76;;-1:-1:-1;11177:1:1;11191:5;;11130:76;11222:4;11240:1;11235:59;;;;11308:1;11303:130;;;;11215:218;;11235:59;11265:1;11256:10;;11279:5;;;11303:130;11340:3;11330:8;11327:17;11324:43;;;11347:18;;:::i;:::-;-1:-1:-1;;11403:1:1;11389:16;;11418:5;;11215:218;;11517:2;11507:8;11504:16;11498:3;11492:4;11489:13;11485:36;11479:2;11469:8;11466:16;11461:2;11455:4;11452:12;11448:35;11445:77;11442:159;;;-1:-1:-1;11554:19:1;;;11586:5;;11442:159;11633:34;11658:8;11652:4;11633:34;:::i;:::-;11703:6;11699:1;11695:6;11691:19;11682:7;11679:32;11676:58;;;11714:18;;:::i;:::-;11752:20;;-1:-1:-1;10972:806:1;;;;;:::o;11783:131::-;11843:5;11872:36;11899:8;11893:4;11872:36;:::i;11919:168::-;11959:7;12025:1;12021;12017:6;12013:14;12010:1;12007:21;12002:1;11995:9;11988:17;11984:45;11981:71;;;12032:18;;:::i;:::-;-1:-1:-1;12072:9:1;;11919:168::o;12092:135::-;12131:3;-1:-1:-1;;12152:17:1;;12149:43;;;12172:18;;:::i;:::-;-1:-1:-1;12219:1:1;12208:13;;12092:135::o;14118:404::-;14320:2;14302:21;;;14359:2;14339:18;;;14332:30;14398:34;14393:2;14378:18;;14371:62;-1:-1:-1;;;14464:2:1;14449:18;;14442:38;14512:3;14497:19;;14118:404::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    89,
    5490
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xFE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C08A4DC GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xAE315FE4 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xAE315FE4 EQ PUSH2 0x2DA JUMPI DUP1 PUSH4 0xB60D4288 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xC1CFB99A EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0xD28178D7 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0xF972C1C4 EQ PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C08A4DC EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x9F6680A8 EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xA8311AA8 EQ PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3477EE2E GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x3477EE2E EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x40DEC728 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0x685A9DD8 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x70651A18 EQ PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CEE9B3 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x6A49FCE EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x1BD95155 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x2E4176CF EQ PUSH2 0x17E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x337 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13A PUSH2 0x456 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP2 SWAP1 PUSH2 0x1294 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x170 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0x140F JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x147 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x19E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x147 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D6 PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x691 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x144C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x170 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x149D JUMP JUMPDEST PUSH2 0x7E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23B PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0x98E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP3 SWAP2 SWAP1 PUSH2 0x14C1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x264 CALLDATASIZE PUSH1 0x4 PUSH2 0x122E JUMP JUMPDEST PUSH2 0xA4A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x284 CALLDATASIZE PUSH1 0x4 PUSH2 0x14E3 JUMP JUMPDEST PUSH2 0xBC3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A9 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x149D JUMP JUMPDEST PUSH2 0xD25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CD PUSH2 0xDD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP2 SWAP1 PUSH2 0x1624 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x170 PUSH2 0xEC5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE PUSH2 0x170 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x170 PUSH2 0xF42 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x332 CALLDATASIZE PUSH1 0x4 PUSH2 0x168C JUMP JUMPDEST PUSH2 0xFBA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x396 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x486173206E6F20726967687420746F20766F7465 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616C726561647920766F74656420666F72207061727479000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x405 JUMPI PUSH2 0x405 PUSH2 0x1702 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x1 SWAP1 POP PUSH1 0x3 DUP3 ADD DUP2 JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x5E4 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x4AD SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4D9 SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x526 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x526 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x509 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x53F SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x56B SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5B8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x58D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5B8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x59B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x47A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x688 JUMPI PUSH1 0x0 DUP2 DUP4 MLOAD PUSH2 0x60B SWAP2 SWAP1 PUSH2 0x1781 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x621 JUMPI PUSH2 0x621 PUSH2 0x1702 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 AND SWAP2 POP PUSH1 0xF8 SHR PUSH1 0x0 PUSH2 0x643 PUSH1 0x30 DUP4 PUSH2 0x1781 JUMP JUMPDEST SWAP1 POP PUSH2 0x650 PUSH1 0x1 DUP6 PUSH2 0x1781 JUMP JUMPDEST PUSH2 0x65B SWAP1 PUSH1 0xA PUSH2 0x187E JUMP JUMPDEST PUSH2 0x665 SWAP1 DUP3 PUSH2 0x188A JUMP JUMPDEST PUSH2 0x66F SWAP1 DUP9 PUSH2 0x172E JUMP JUMPDEST SWAP7 POP POP POP POP POP DUP1 DUP1 PUSH2 0x680 SWAP1 PUSH2 0x18A9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5F3 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x6A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x6C4 SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6F0 SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x73D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x712 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x73D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x720 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x752 SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77E SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7CB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7CB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063686169726D616E2063616E20676976652064656E6F756E636520 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x726967687420746F20766F7465 PUSH1 0x98 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x89D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x8E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959 PUSH1 0x4A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x94E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F74657220646F65736E2774206861766520726967687420746F20766F7465 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x2 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x986 SWAP1 DUP5 SWAP1 PUSH2 0x1781 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x99E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x9C1 SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9ED SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA3A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA0F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA3A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA1D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xAA4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x486173206E6F20726967687420746F20766F7465 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xAF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616C726561647920766F74656420666F722063616E6469646174650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xB0C JUMPI PUSH2 0xB0C PUSH2 0x1702 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x2 ADD SLOAD DUP2 PUSH1 0x1 ADD SLOAD EQ PUSH2 0xB7B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F7420766F74652063616E64696461746520696E2074686973206172 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6561 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xB90 JUMPI PUSH2 0xB90 PUSH2 0x1702 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xBB0 SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x1 SWAP1 POP PUSH1 0x3 DUP3 ADD PUSH1 0x0 PUSH2 0x433 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38D SWAP1 PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xD21 JUMPI PUSH1 0x3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC18 JUMPI PUSH2 0xC18 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x3 DUP2 LT PUSH2 0xC32 JUMPI PUSH2 0xC32 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC4E JUMPI PUSH2 0xC4E PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x3 DUP2 LT PUSH2 0xC68 JUMPI PUSH2 0xC68 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCAB DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC87 JUMPI PUSH2 0xC87 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x2 PUSH1 0x3 DUP2 LT PUSH2 0xCA1 JUMPI PUSH2 0xCA1 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x5ED JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP4 SLOAD PUSH1 0x1 DUP2 ADD DUP6 SSTORE SWAP4 DUP2 MSTORE DUP2 SWAP1 KECCAK256 DUP3 MLOAD DUP1 MLOAD SWAP4 SWAP5 PUSH1 0x4 MUL SWAP1 SWAP2 ADD SWAP3 PUSH2 0xCDF SWAP3 DUP5 SWAP3 ADD SWAP1 PUSH2 0x1195 JUMP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD MLOAD DUP1 MLOAD PUSH2 0xCF8 SWAP3 PUSH1 0x1 DUP6 ADD SWAP3 ADD SWAP1 PUSH2 0x1195 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE DUP1 PUSH2 0xD19 DUP2 PUSH2 0x18A9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBF0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0xD40 SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD6C SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xDB9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD8E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDB9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD9C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x2 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xFF AND SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x5E4 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0xE2A SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE56 SWAP1 PUSH2 0x1746 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEA3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE78 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEA3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE86 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xDF7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x4 SLOAD DUP2 LT ISZERO PUSH2 0xF3D JUMPI DUP2 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xEE8 JUMPI PUSH2 0xEE8 PUSH2 0x1702 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0xF2B JUMPI PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xF13 JUMPI PUSH2 0xF13 PUSH2 0x1702 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP DUP1 SWAP3 POP JUMPDEST DUP1 PUSH2 0xF35 DUP2 PUSH2 0x18A9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xECA JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0xF3D JUMPI DUP2 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xF65 JUMPI PUSH2 0xF65 PUSH2 0x1702 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0xFA8 JUMPI PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xF90 JUMPI PUSH2 0xF90 PUSH2 0x1702 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD SWAP2 POP DUP1 SWAP3 POP JUMPDEST DUP1 PUSH2 0xFB2 DUP2 PUSH2 0x18A9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF47 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38D SWAP1 PUSH2 0x18C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x1030 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x1076 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959 PUSH1 0x4A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x10DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x566F7465722063616E20616C726561647920766F7465 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE DUP4 MLOAD PUSH2 0x1114 SWAP3 DUP6 ADD SWAP1 PUSH2 0x1195 JUMP JUMPDEST POP PUSH2 0x111E DUP2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP2 DUP3 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0xFFFF NOT AND SWAP1 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH6 0x9184E72A000 SWAP1 DUP3 DUP2 DUP2 DUP2 DUP6 DUP9 DUP4 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1177 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x118B SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x11A1 SWAP1 PUSH2 0x1746 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x11C3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1209 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x11DC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1209 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1209 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1209 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x11EE JUMP JUMPDEST POP PUSH2 0x1215 SWAP3 SWAP2 POP PUSH2 0x1219 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1215 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x121A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x126D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1251 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x127F JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1321 JUMPI PUSH1 0x3F NOT DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 MLOAD DUP2 DUP7 MSTORE PUSH2 0x12E1 DUP3 DUP8 ADD DUP3 PUSH2 0x1247 JUMP JUMPDEST SWAP2 POP POP DUP9 DUP3 ADD MLOAD DUP6 DUP3 SUB DUP11 DUP8 ADD MSTORE PUSH2 0x12F9 DUP3 DUP3 PUSH2 0x1247 JUMP JUMPDEST DUP4 DUP11 ADD MLOAD DUP8 DUP12 ADD MSTORE PUSH1 0x60 SWAP4 DUP5 ADD MLOAD SWAP4 SWAP1 SWAP7 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP SWAP4 DUP7 ADD SWAP4 SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12BB JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1368 JUMPI PUSH2 0x1368 PUSH2 0x132F JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1397 JUMPI PUSH2 0x1397 PUSH2 0x132F JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13CA JUMPI PUSH2 0x13CA PUSH2 0x132F JUMP JUMPDEST PUSH2 0x13DD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x136E JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x13F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1421 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1444 DUP5 DUP3 DUP6 ADD PUSH2 0x139F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x145F PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x1247 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1471 DUP2 DUP8 PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x149A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x14BA DUP2 PUSH2 0x1485 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x14D4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1247 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 CALLDATALOAD GT ISZERO PUSH2 0x150D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1532 JUMPI PUSH2 0x1532 PUSH2 0x132F JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x1541 DUP6 DUP3 ADD PUSH2 0x136E JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP3 DUP2 ADD DUP6 ADD SWAP2 DUP6 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 0x155B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 DUP6 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x15ED JUMPI DUP6 DUP4 CALLDATALOAD GT ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD DUP6 ADD DUP11 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x158A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1592 PUSH2 0x1345 JUMP JUMPDEST DUP1 PUSH1 0x80 DUP4 ADD DUP14 DUP2 GT ISZERO PUSH2 0x15A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 DUP5 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x15DA JUMPI DUP11 DUP2 CALLDATALOAD GT ISZERO PUSH2 0x15BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15CD DUP16 DUP14 DUP4 CALLDATALOAD DUP9 ADD ADD PUSH2 0x139F JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP12 ADD SWAP3 DUP12 ADD PUSH2 0x15A8 JUMP JUMPDEST POP POP DUP5 MSTORE POP POP SWAP2 DUP7 ADD SWAP2 SWAP1 DUP7 ADD SWAP1 PUSH2 0x1561 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x160D PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1247 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP SWAP1 ISZERO ISZERO PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1321 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x166F DUP9 DUP7 ADD DUP3 PUSH2 0x1247 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x164B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x16AC DUP2 PUSH2 0x1485 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D5 DUP8 DUP4 DUP9 ADD PUSH2 0x139F JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x16EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16F8 DUP7 DUP3 DUP8 ADD PUSH2 0x139F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1741 JUMPI PUSH2 0x1741 PUSH2 0x1718 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x175A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x177B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1793 JUMPI PUSH2 0x1793 PUSH2 0x1718 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x17D3 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x17B9 JUMPI PUSH2 0x17B9 PUSH2 0x1718 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x17C6 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x179D JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x17EA JUMPI POP PUSH1 0x1 PUSH2 0x1878 JUMP JUMPDEST DUP2 PUSH2 0x17F7 JUMPI POP PUSH1 0x0 PUSH2 0x1878 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x180D JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1817 JUMPI PUSH2 0x1833 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1878 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1828 JUMPI PUSH2 0x1828 PUSH2 0x1718 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x1878 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1856 JUMPI POP DUP2 DUP2 EXP PUSH2 0x1878 JUMP JUMPDEST PUSH2 0x1860 DUP4 DUP4 PUSH2 0x1798 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1874 JUMPI PUSH2 0x1874 PUSH2 0x1718 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14BA DUP4 DUP4 PUSH2 0x17DB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x18A4 JUMPI PUSH2 0x18A4 PUSH2 0x1718 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x18BD JUMPI PUSH2 0x18BD PUSH2 0x1718 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063686169726D616E2063616E206769766520746865207269676874 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x20746F20766F7465 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD PUSH32 0xE27ABED5AE878D5A36CDFC9E7CB9C34A3E101691A140BEE5B8F6DA0D44516473 PUSH16 0x6C634300080C00330000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFE"
    },
    "12": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8C08A4DC"
    },
    "25": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "GT",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x95"
    },
    "29": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xAE315FE4"
    },
    "36": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "GT",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x64"
    },
    "40": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xAE315FE4"
    },
    "47": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2DA"
    },
    "51": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xB60D4288"
    },
    "58": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "59": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "62": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "63": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "64": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xC1CFB99A"
    },
    "69": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "70": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2EF"
    },
    "73": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "74": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "75": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD28178D7"
    },
    "80": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "81": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x302"
    },
    "84": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "85": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "86": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xF972C1C4"
    },
    "91": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "92": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x317"
    },
    "95": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "96": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "98": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "REVERT",
      "path": "0"
    },
    "100": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "101": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "102": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8C08A4DC"
    },
    "107": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "108": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x249"
    },
    "111": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "112": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "113": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x9F6680A8"
    },
    "118": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "119": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x269"
    },
    "122": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "123": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "124": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA3EC138D"
    },
    "129": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "130": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x289"
    },
    "133": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "134": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "135": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA8311AA8"
    },
    "140": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "141": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B8"
    },
    "144": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "145": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "147": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "148": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "REVERT",
      "path": "0"
    },
    "149": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "150": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "151": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3477EE2E"
    },
    "156": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "GT",
      "path": "0"
    },
    "157": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD1"
    },
    "160": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "161": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "162": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3477EE2E"
    },
    "167": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "168": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B6"
    },
    "171": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "172": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "173": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x40DEC728"
    },
    "178": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "179": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E6"
    },
    "182": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "183": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "184": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x685A9DD8"
    },
    "189": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "190": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1FB"
    },
    "193": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "194": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "195": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70651A18"
    },
    "200": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "201": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x21B"
    },
    "204": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "205": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "207": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "208": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "REVERT",
      "path": "0"
    },
    "209": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "210": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "211": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x4CEE9B3"
    },
    "216": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "217": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x103"
    },
    "220": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "221": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "222": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6A49FCE"
    },
    "227": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "228": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x125"
    },
    "231": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "232": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "233": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x1BD95155"
    },
    "238": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "239": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x150"
    },
    "242": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "243": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "244": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2E4176CF"
    },
    "249": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "EQ",
      "path": "0"
    },
    "250": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17E"
    },
    "253": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "254": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "255": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "257": {
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "258": {
      "first_revert": true,
      "fn": null,
      "offset": [
        89,
        5490
      ],
      "op": "REVERT",
      "path": "0"
    },
    "259": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "260": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "261": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "DUP1",
      "path": "0"
    },
    "262": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "263": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10F"
    },
    "266": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "267": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "269": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "DUP1",
      "path": "0"
    },
    "270": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "REVERT",
      "path": "0"
    },
    "271": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "272": {
      "op": "POP"
    },
    "273": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "276": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11E"
    },
    "279": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "280": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "282": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x122E"
    },
    "285": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMP",
      "path": "0"
    },
    "286": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "287": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x337"
    },
    "290": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMP",
      "path": "0"
    },
    "291": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "292": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "STOP",
      "path": "0"
    },
    "293": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "294": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "295": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "DUP1",
      "path": "0"
    },
    "296": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "297": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x131"
    },
    "300": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "301": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "303": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "DUP1",
      "path": "0"
    },
    "304": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "REVERT",
      "path": "0"
    },
    "305": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "306": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "POP",
      "path": "0"
    },
    "307": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13A"
    },
    "310": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x456"
    },
    "313": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMP",
      "path": "0"
    },
    "314": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "315": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "317": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "318": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "321": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "322": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "323": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1294"
    },
    "326": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMP",
      "path": "0"
    },
    "327": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "328": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "330": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "331": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "DUP1",
      "path": "0"
    },
    "332": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "333": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "SUB",
      "path": "0"
    },
    "334": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "335": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "RETURN",
      "path": "0"
    },
    "336": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "337": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "338": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "DUP1",
      "path": "0"
    },
    "339": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "340": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15C"
    },
    "343": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "344": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "346": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "DUP1",
      "path": "0"
    },
    "347": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "REVERT",
      "path": "0"
    },
    "348": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "349": {
      "op": "POP"
    },
    "350": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "353": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B"
    },
    "356": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "357": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "359": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x140F"
    },
    "362": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMP",
      "path": "0"
    },
    "363": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "364": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5ED"
    },
    "367": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMP",
      "path": "0"
    },
    "368": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "369": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "371": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "372": {
      "op": "SWAP1"
    },
    "373": {
      "op": "DUP2"
    },
    "374": {
      "op": "MSTORE"
    },
    "375": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "377": {
      "op": "ADD"
    },
    "378": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "381": {
      "op": "JUMP"
    },
    "382": {
      "offset": [
        413,
        439
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "383": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "384": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "DUP1",
      "path": "0"
    },
    "385": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "386": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18A"
    },
    "389": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "390": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "392": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "DUP1",
      "path": "0"
    },
    "393": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "REVERT",
      "path": "0"
    },
    "394": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "395": {
      "op": "POP"
    },
    "396": {
      "offset": [
        413,
        439
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "398": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "399": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19E"
    },
    "402": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "407": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "409": {
      "op": "SHL"
    },
    "410": {
      "op": "SUB"
    },
    "411": {
      "offset": [
        413,
        439
      ],
      "op": "AND",
      "path": "0"
    },
    "412": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "DUP2",
      "path": "0"
    },
    "413": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "JUMP",
      "path": "0"
    },
    "414": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "415": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "417": {
      "fn": "Voting.stringToUint",
      "offset": [
        413,
        439
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "422": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "424": {
      "op": "SHL"
    },
    "425": {
      "op": "SUB"
    },
    "426": {
      "op": "SWAP1"
    },
    "427": {
      "op": "SWAP2"
    },
    "428": {
      "op": "AND"
    },
    "429": {
      "op": "DUP2"
    },
    "430": {
      "op": "MSTORE"
    },
    "431": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "433": {
      "op": "ADD"
    },
    "434": {
      "offset": [
        413,
        439
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "437": {
      "op": "JUMP"
    },
    "438": {
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "439": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "440": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "441": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "442": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C2"
    },
    "445": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "446": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "448": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "449": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "REVERT",
      "path": "0"
    },
    "450": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "451": {
      "op": "POP"
    },
    "452": {
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D6"
    },
    "455": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D1"
    },
    "458": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "459": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "461": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x122E"
    },
    "464": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "465": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "466": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x691"
    },
    "469": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "470": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "471": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "473": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "474": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "477": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "478": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "479": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "480": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "481": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "482": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x144C"
    },
    "485": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "486": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "487": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "488": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "DUP1",
      "path": "0"
    },
    "489": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "490": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F2"
    },
    "493": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "494": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "496": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "DUP1",
      "path": "0"
    },
    "497": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "REVERT",
      "path": "0"
    },
    "498": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "499": {
      "op": "POP"
    },
    "500": {
      "fn": "Voting.voters_count",
      "offset": [
        5329,
        5340
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x2"
    },
    "502": {
      "fn": "Voting.voters_count",
      "offset": [
        5329,
        5340
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "503": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "506": {
      "fn": "Voting.voters_count",
      "offset": [
        5258,
        5347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "507": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "508": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "509": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "DUP1",
      "path": "0"
    },
    "510": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "511": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x207"
    },
    "514": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "515": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "517": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "DUP1",
      "path": "0"
    },
    "518": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "REVERT",
      "path": "0"
    },
    "519": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "520": {
      "op": "POP"
    },
    "521": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "524": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x216"
    },
    "527": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "528": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "530": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x149D"
    },
    "533": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        3338,
        3794
      ],
      "op": "JUMP",
      "path": "0"
    },
    "534": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "535": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7E1"
    },
    "538": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        3338,
        3794
      ],
      "op": "JUMP",
      "path": "0"
    },
    "539": {
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "540": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "541": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "542": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "543": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x227"
    },
    "546": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "547": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "549": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "550": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "REVERT",
      "path": "0"
    },
    "551": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "552": {
      "op": "POP"
    },
    "553": {
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x23B"
    },
    "556": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x236"
    },
    "559": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "560": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "562": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x122E"
    },
    "565": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        554,
        576
      ],
      "op": "JUMP",
      "path": "0"
    },
    "566": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "567": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x98E"
    },
    "570": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        554,
        576
      ],
      "op": "JUMP",
      "path": "0"
    },
    "571": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "572": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "574": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "575": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "578": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "579": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "580": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "581": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14C1"
    },
    "584": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        554,
        576
      ],
      "op": "JUMP",
      "path": "0"
    },
    "585": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "586": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "587": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "DUP1",
      "path": "0"
    },
    "588": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "589": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x255"
    },
    "592": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "593": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "595": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "DUP1",
      "path": "0"
    },
    "596": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "REVERT",
      "path": "0"
    },
    "597": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "598": {
      "op": "POP"
    },
    "599": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "602": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x264"
    },
    "605": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "606": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "608": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x122E"
    },
    "611": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        3800,
        4208
      ],
      "op": "JUMP",
      "path": "0"
    },
    "612": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "613": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA4A"
    },
    "616": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        3800,
        4208
      ],
      "op": "JUMP",
      "path": "0"
    },
    "617": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "618": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "619": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "DUP1",
      "path": "0"
    },
    "620": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "621": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x275"
    },
    "624": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "625": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "627": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "DUP1",
      "path": "0"
    },
    "628": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "REVERT",
      "path": "0"
    },
    "629": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "630": {
      "op": "POP"
    },
    "631": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "634": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x284"
    },
    "637": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "638": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "640": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14E3"
    },
    "643": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1828,
        2404
      ],
      "op": "JUMP",
      "path": "0"
    },
    "644": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "645": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBC3"
    },
    "648": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1828,
        2404
      ],
      "op": "JUMP",
      "path": "0"
    },
    "649": {
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "650": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "651": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "652": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "653": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x295"
    },
    "656": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "657": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "659": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "660": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "REVERT",
      "path": "0"
    },
    "661": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "662": {
      "op": "POP"
    },
    "663": {
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A9"
    },
    "666": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A4"
    },
    "669": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "670": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "672": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x149D"
    },
    "675": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        445,
        484
      ],
      "op": "JUMP",
      "path": "0"
    },
    "676": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "677": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD25"
    },
    "680": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        445,
        484
      ],
      "op": "JUMP",
      "path": "0"
    },
    "681": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "682": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "684": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "685": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "688": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "689": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "690": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "691": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "692": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15FA"
    },
    "695": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        445,
        484
      ],
      "op": "JUMP",
      "path": "0"
    },
    "696": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "697": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "698": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "DUP1",
      "path": "0"
    },
    "699": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "700": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2C4"
    },
    "703": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "704": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "706": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "DUP1",
      "path": "0"
    },
    "707": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "REVERT",
      "path": "0"
    },
    "708": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "709": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "POP",
      "path": "0"
    },
    "710": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2CD"
    },
    "713": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDD3"
    },
    "716": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        2516,
        2606
      ],
      "op": "JUMP",
      "path": "0"
    },
    "717": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "718": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "720": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "721": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "724": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "725": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "726": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1624"
    },
    "729": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        2516,
        2606
      ],
      "op": "JUMP",
      "path": "0"
    },
    "730": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "731": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "732": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "DUP1",
      "path": "0"
    },
    "733": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "734": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E6"
    },
    "737": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "738": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "740": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "DUP1",
      "path": "0"
    },
    "741": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "REVERT",
      "path": "0"
    },
    "742": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "743": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "POP",
      "path": "0"
    },
    "744": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "747": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEC5"
    },
    "750": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        4909,
        5252
      ],
      "op": "JUMP",
      "path": "0"
    },
    "751": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "752": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "753": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "DUP1",
      "path": "0"
    },
    "754": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "755": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FB"
    },
    "758": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "759": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "761": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "DUP1",
      "path": "0"
    },
    "762": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "REVERT",
      "path": "0"
    },
    "763": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "764": {
      "op": "POP"
    },
    "765": {
      "fn": "Voting.get_balance",
      "offset": [
        5460,
        5481
      ],
      "op": "SELFBALANCE",
      "path": "0",
      "statement": 1
    },
    "766": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "769": {
      "fn": "Voting.get_balance",
      "offset": [
        5392,
        5488
      ],
      "op": "JUMP",
      "path": "0"
    },
    "770": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "771": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "772": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "DUP1",
      "path": "0"
    },
    "773": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "774": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x30E"
    },
    "777": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "778": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "780": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "DUP1",
      "path": "0"
    },
    "781": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "REVERT",
      "path": "0"
    },
    "782": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "783": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "POP",
      "path": "0"
    },
    "784": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "787": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF42"
    },
    "790": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        4511,
        4903
      ],
      "op": "JUMP",
      "path": "0"
    },
    "791": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "792": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "793": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "DUP1",
      "path": "0"
    },
    "794": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "795": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x323"
    },
    "798": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "799": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "801": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "DUP1",
      "path": "0"
    },
    "802": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "REVERT",
      "path": "0"
    },
    "803": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "804": {
      "op": "POP"
    },
    "805": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "808": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x332"
    },
    "811": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "812": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "814": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x168C"
    },
    "817": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        2612,
        3327
      ],
      "op": "JUMP",
      "path": "0"
    },
    "818": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "819": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFBA"
    },
    "822": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        2612,
        3327
      ],
      "op": "JUMP",
      "path": "0"
    },
    "823": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "824": {
      "fn": "Voting.voteParty",
      "offset": [
        4297,
        4307
      ],
      "op": "CALLER",
      "path": "0"
    },
    "825": {
      "fn": "Voting.voteParty",
      "offset": [
        4267,
        4287
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "827": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "828": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "829": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "830": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4296
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "832": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "834": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "835": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "837": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "838": {
      "fn": "Voting.voteParty",
      "offset": [
        4290,
        4308
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "839": {
      "fn": "Voting.voteParty",
      "offset": [
        4326,
        4340
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x2"
    },
    "841": {
      "fn": "Voting.voteParty",
      "offset": [
        4326,
        4340
      ],
      "op": "DUP2",
      "path": "0"
    },
    "842": {
      "fn": "Voting.voteParty",
      "offset": [
        4326,
        4340
      ],
      "op": "ADD",
      "path": "0"
    },
    "843": {
      "fn": "Voting.voteParty",
      "offset": [
        4326,
        4340
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "844": {
      "fn": "Voting.voteParty",
      "offset": [
        4326,
        4340
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "846": {
      "branch": 40,
      "fn": "Voting.voteParty",
      "offset": [
        4326,
        4340
      ],
      "op": "AND",
      "path": "0"
    },
    "847": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x396"
    },
    "850": {
      "branch": 40,
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "851": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "853": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "854": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "858": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "860": {
      "op": "SHL"
    },
    "861": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "DUP2",
      "path": "0"
    },
    "862": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "863": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "865": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "867": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "DUP3",
      "path": "0"
    },
    "868": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "ADD",
      "path": "0"
    },
    "869": {
      "op": "MSTORE"
    },
    "870": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "872": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "874": {
      "op": "DUP3"
    },
    "875": {
      "op": "ADD"
    },
    "876": {
      "op": "MSTORE"
    },
    "877": {
      "op": "PUSH20",
      "value": "0x486173206E6F20726967687420746F20766F7465"
    },
    "898": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "900": {
      "op": "SHL"
    },
    "901": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "903": {
      "op": "DUP3"
    },
    "904": {
      "op": "ADD"
    },
    "905": {
      "op": "MSTORE"
    },
    "906": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "908": {
      "op": "ADD"
    },
    "909": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "910": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "912": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "913": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "DUP1",
      "path": "0"
    },
    "914": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "915": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "SUB",
      "path": "0"
    },
    "916": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "917": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "918": {
      "fn": "Voting.voteParty",
      "offset": [
        4318,
        4365
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "919": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4396
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x3"
    },
    "921": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4396
      ],
      "op": "DUP2",
      "path": "0"
    },
    "922": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4396
      ],
      "op": "ADD",
      "path": "0"
    },
    "923": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4399
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "924": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4399
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "927": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4399
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "928": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4399
      ],
      "op": "DIV",
      "path": "0"
    },
    "929": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4399
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "931": {
      "fn": "Voting.voteParty",
      "offset": [
        4384,
        4399
      ],
      "op": "AND",
      "path": "0"
    },
    "932": {
      "branch": 41,
      "fn": "Voting.voteParty",
      "offset": [
        4383,
        4399
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "933": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3F0"
    },
    "936": {
      "branch": 41,
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "937": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "939": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "940": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "944": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "946": {
      "op": "SHL"
    },
    "947": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "DUP2",
      "path": "0"
    },
    "948": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "949": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "951": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "953": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "DUP3",
      "path": "0"
    },
    "954": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "ADD",
      "path": "0"
    },
    "955": {
      "op": "MSTORE"
    },
    "956": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "958": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "960": {
      "op": "DUP3"
    },
    "961": {
      "op": "ADD"
    },
    "962": {
      "op": "MSTORE"
    },
    "963": {
      "op": "PUSH32",
      "value": "0x616C726561647920766F74656420666F72207061727479000000000000000000"
    },
    "996": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "998": {
      "op": "DUP3"
    },
    "999": {
      "op": "ADD"
    },
    "1000": {
      "op": "MSTORE"
    },
    "1001": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1003": {
      "op": "ADD"
    },
    "1004": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "1007": {
      "op": "JUMP"
    },
    "1008": {
      "fn": "Voting.voteParty",
      "offset": [
        4375,
        4427
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1009": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4466
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x1"
    },
    "1011": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1013": {
      "fn": "Voting.voteParty",
      "offset": [
        4445,
        4450
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1014": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1015": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1016": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1017": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "LT",
      "path": "0"
    },
    "1018": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x405"
    },
    "1021": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1022": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x405"
    },
    "1025": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "1028": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        4437,
        4451
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1029": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1030": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1031": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1033": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1034": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1036": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1038": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1039": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1040": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1042": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "MUL",
      "path": "0"
    },
    "1043": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4451
      ],
      "op": "ADD",
      "path": "0"
    },
    "1044": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1046": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4461
      ],
      "op": "ADD",
      "path": "0"
    },
    "1047": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1049": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1050": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1051": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1052": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x425"
    },
    "1055": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1056": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1057": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x172E"
    },
    "1060": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        4437,
        4466
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1061": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1062": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1063": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1064": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4466
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1065": {
      "op": "POP"
    },
    "1066": {
      "fn": "Voting.voteParty",
      "offset": [
        4494,
        4498
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0x1"
    },
    "1068": {
      "fn": "Voting.voteParty",
      "offset": [
        4494,
        4498
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1069": {
      "op": "POP"
    },
    "1070": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4488
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1072": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4488
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1073": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4488
      ],
      "op": "ADD",
      "path": "0"
    },
    "1074": {
      "fn": "Voting.voteParty",
      "offset": [
        4494,
        4498
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1075": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1076": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1078": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1079": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1080": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1081": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "DIV",
      "path": "0"
    },
    "1082": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "ADD",
      "path": "0"
    },
    "1083": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1084": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1085": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4491
      ],
      "op": "MOD",
      "path": "0"
    },
    "1086": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1089": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "EXP",
      "path": "0"
    },
    "1090": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1091": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1092": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1093": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "1095": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "MUL",
      "path": "0"
    },
    "1096": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "NOT",
      "path": "0"
    },
    "1097": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "AND",
      "path": "0"
    },
    "1098": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1099": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1100": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1101": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1102": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "MUL",
      "path": "0"
    },
    "1103": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "OR",
      "path": "0"
    },
    "1104": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1105": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1106": {
      "fn": "Voting.voteParty",
      "offset": [
        4476,
        4498
      ],
      "op": "POP",
      "path": "0"
    },
    "1107": {
      "fn": "Voting.voteParty",
      "offset": [
        4257,
        4505
      ],
      "op": "POP",
      "path": "0"
    },
    "1108": {
      "fn": "Voting.voteParty",
      "offset": [
        4214,
        4505
      ],
      "op": "POP",
      "path": "0"
    },
    "1109": {
      "fn": "Voting.voteParty",
      "jump": "o",
      "offset": [
        4214,
        4505
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1110": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1111": {
      "fn": "Voting.getCandidates",
      "offset": [
        2456,
        2474
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "1113": {
      "fn": "Voting.getCandidates",
      "offset": [
        2493,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 6,
      "value": "0x3"
    },
    "1115": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1116": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1117": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1118": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1120": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MUL",
      "path": "0"
    },
    "1121": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1123": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1124": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1126": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1127": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1128": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1129": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1130": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1132": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1133": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1134": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1135": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1136": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1137": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1138": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1139": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1140": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1142": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1143": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1145": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1146": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1147": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1148": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1149": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "LT",
      "path": "0"
    },
    "1150": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1151": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5E4"
    },
    "1154": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1155": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1156": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1157": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1158": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1160": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1161": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1163": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1165": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1166": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1167": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1169": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MUL",
      "path": "0"
    },
    "1170": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1171": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1173": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1174": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1175": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "1177": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1178": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1180": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1181": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1182": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1183": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1185": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1186": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1187": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1188": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1189": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4AD"
    },
    "1192": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1193": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "1196": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1197": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1198": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1199": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1201": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1202": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1204": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1205": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1206": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DIV",
      "path": "0"
    },
    "1207": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MUL",
      "path": "0"
    },
    "1208": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1210": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1211": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1213": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1214": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1215": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1216": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1217": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1219": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1220": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1221": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1222": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1223": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1224": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1225": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1226": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1227": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1229": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1230": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1231": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1232": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1233": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D9"
    },
    "1236": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1237": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "1240": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1241": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1242": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1243": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1244": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x526"
    },
    "1247": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1248": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1249": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1251": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "LT",
      "path": "0"
    },
    "1252": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4FB"
    },
    "1255": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1256": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1259": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1260": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1261": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1262": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DIV",
      "path": "0"
    },
    "1263": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MUL",
      "path": "0"
    },
    "1264": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1265": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1266": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1267": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1269": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1270": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1271": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x526"
    },
    "1274": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1275": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1276": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1277": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1278": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1279": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1280": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1282": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1283": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1285": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1287": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1288": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1289": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1290": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1291": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1292": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1293": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1294": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1295": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1297": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1298": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1299": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1301": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1302": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1303": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1304": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "GT",
      "path": "0"
    },
    "1305": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x509"
    },
    "1308": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1309": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1310": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1311": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SUB",
      "path": "0"
    },
    "1312": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1314": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "AND",
      "path": "0"
    },
    "1315": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1316": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1317": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1318": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1319": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1320": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1321": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1322": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1323": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1324": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1325": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1326": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1328": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1329": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1331": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1332": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1333": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1334": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1335": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x53F"
    },
    "1338": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1339": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "1342": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1343": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1344": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1345": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1347": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1348": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1350": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1351": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1352": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DIV",
      "path": "0"
    },
    "1353": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MUL",
      "path": "0"
    },
    "1354": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1356": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1357": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1359": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1360": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1361": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1362": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1363": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1365": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1366": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1367": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1368": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1369": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1370": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1371": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1372": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1373": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1375": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1376": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1377": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1378": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1379": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x56B"
    },
    "1382": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1383": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "1386": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1387": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1388": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1389": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1390": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5B8"
    },
    "1393": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1394": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1395": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1397": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "LT",
      "path": "0"
    },
    "1398": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x58D"
    },
    "1401": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1402": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1405": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1406": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1407": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1408": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DIV",
      "path": "0"
    },
    "1409": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MUL",
      "path": "0"
    },
    "1410": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1411": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1412": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1413": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1415": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1416": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1417": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5B8"
    },
    "1420": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1421": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1422": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1423": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1424": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1425": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1426": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1428": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1429": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1431": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1433": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1434": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1435": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1436": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1437": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1438": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1439": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1440": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1441": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1443": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1444": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1445": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1447": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1448": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1449": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1450": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "GT",
      "path": "0"
    },
    "1451": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x59B"
    },
    "1454": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1455": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1456": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1457": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SUB",
      "path": "0"
    },
    "1458": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1460": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "AND",
      "path": "0"
    },
    "1461": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1462": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1463": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1464": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1465": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1466": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1467": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1468": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1469": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1470": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1471": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1472": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1474": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1475": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1477": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1478": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1479": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1480": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1481": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1482": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1484": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1485": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1487": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1488": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1489": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1490": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1491": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1492": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1493": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1494": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1495": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1496": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1498": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1499": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1500": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1502": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "ADD",
      "path": "0"
    },
    "1503": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1504": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x47A"
    },
    "1507": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1508": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1509": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1510": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1511": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1512": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1513": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1514": {
      "fn": "Voting.getCandidates",
      "offset": [
        2486,
        2503
      ],
      "op": "POP",
      "path": "0"
    },
    "1515": {
      "fn": "Voting.getCandidates",
      "offset": [
        2410,
        2510
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1516": {
      "fn": "Voting.getCandidates",
      "jump": "o",
      "offset": [
        2410,
        2510
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1517": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1518": {
      "fn": "Voting.stringToUint",
      "offset": [
        1390,
        1394
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1520": {
      "fn": "Voting.stringToUint",
      "offset": [
        1390,
        1394
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1521": {
      "fn": "Voting.stringToUint",
      "offset": [
        1470,
        1479
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1522": {
      "fn": "Voting.stringToUint",
      "offset": [
        1390,
        1394
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1523": {
      "fn": "Voting.stringToUint",
      "offset": [
        1494,
        1793
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1524": {
      "fn": "Voting.stringToUint",
      "offset": [
        1515,
        1526
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1525": {
      "fn": "Voting.stringToUint",
      "offset": [
        1515,
        1533
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1526": {
      "fn": "Voting.stringToUint",
      "offset": [
        1513,
        1514
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1527": {
      "fn": "Voting.stringToUint",
      "offset": [
        1513,
        1533
      ],
      "op": "LT",
      "path": "0"
    },
    "1528": {
      "fn": "Voting.stringToUint",
      "offset": [
        1494,
        1793
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1529": {
      "fn": "Voting.stringToUint",
      "offset": [
        1494,
        1793
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x688"
    },
    "1532": {
      "fn": "Voting.stringToUint",
      "offset": [
        1494,
        1793
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1533": {
      "fn": "Voting.stringToUint",
      "offset": [
        1558,
        1566
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1535": {
      "fn": "Voting.stringToUint",
      "offset": [
        1590,
        1591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1536": {
      "fn": "Voting.stringToUint",
      "offset": [
        1569,
        1580
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1537": {
      "fn": "Voting.stringToUint",
      "offset": [
        1569,
        1587
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1538": {
      "fn": "Voting.stringToUint",
      "offset": [
        1569,
        1591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x60B"
    },
    "1541": {
      "fn": "Voting.stringToUint",
      "offset": [
        1569,
        1591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1542": {
      "fn": "Voting.stringToUint",
      "offset": [
        1569,
        1591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1543": {
      "fn": "Voting.stringToUint",
      "offset": [
        1569,
        1591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1781"
    },
    "1546": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1569,
        1591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1547": {
      "fn": "Voting.stringToUint",
      "offset": [
        1569,
        1591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1548": {
      "fn": "Voting.stringToUint",
      "offset": [
        1558,
        1591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1549": {
      "fn": "Voting.stringToUint",
      "offset": [
        1558,
        1591
      ],
      "op": "POP",
      "path": "0"
    },
    "1550": {
      "fn": "Voting.stringToUint",
      "offset": [
        1609,
        1620
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1552": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1634
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1553": {
      "fn": "Voting.stringToUint",
      "offset": [
        1635,
        1636
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1554": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1555": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1556": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1557": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "LT",
      "path": "0"
    },
    "1558": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x621"
    },
    "1561": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1562": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x621"
    },
    "1565": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "1568": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1623,
        1637
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1569": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1570": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "ADD",
      "path": "0"
    },
    "1571": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1573": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "ADD",
      "path": "0"
    },
    "1574": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1577": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1579": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "1581": {
      "op": "SHL"
    },
    "1582": {
      "op": "SUB"
    },
    "1583": {
      "op": "NOT"
    },
    "1584": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1585": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "AND",
      "path": "0"
    },
    "1586": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1587": {
      "op": "POP"
    },
    "1588": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "1590": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "SHR",
      "path": "0"
    },
    "1591": {
      "fn": "Voting.stringToUint",
      "offset": [
        1655,
        1665
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1593": {
      "fn": "Voting.stringToUint",
      "offset": [
        1705,
        1722
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x643"
    },
    "1596": {
      "fn": "Voting.stringToUint",
      "offset": [
        1717,
        1721
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x30"
    },
    "1598": {
      "fn": "Voting.stringToUint",
      "offset": [
        1623,
        1637
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1599": {
      "fn": "Voting.stringToUint",
      "offset": [
        1705,
        1722
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1781"
    },
    "1602": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1705,
        1722
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1603": {
      "fn": "Voting.stringToUint",
      "offset": [
        1705,
        1722
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1604": {
      "fn": "Voting.stringToUint",
      "offset": [
        1693,
        1722
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1605": {
      "op": "POP"
    },
    "1606": {
      "fn": "Voting.stringToUint",
      "offset": [
        1769,
        1774
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 7,
      "value": "0x650"
    },
    "1609": {
      "fn": "Voting.stringToUint",
      "offset": [
        1773,
        1774
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1611": {
      "fn": "Voting.stringToUint",
      "offset": [
        1769,
        1772
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1612": {
      "fn": "Voting.stringToUint",
      "offset": [
        1769,
        1774
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1781"
    },
    "1615": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1769,
        1774
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1616": {
      "fn": "Voting.stringToUint",
      "offset": [
        1769,
        1774
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1617": {
      "fn": "Voting.stringToUint",
      "offset": [
        1764,
        1775
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x65B"
    },
    "1620": {
      "fn": "Voting.stringToUint",
      "offset": [
        1764,
        1775
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1621": {
      "fn": "Voting.stringToUint",
      "offset": [
        1764,
        1766
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "1623": {
      "fn": "Voting.stringToUint",
      "offset": [
        1764,
        1775
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x187E"
    },
    "1626": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1764,
        1775
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1627": {
      "fn": "Voting.stringToUint",
      "offset": [
        1764,
        1775
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1628": {
      "fn": "Voting.stringToUint",
      "offset": [
        1750,
        1776
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x665"
    },
    "1631": {
      "fn": "Voting.stringToUint",
      "offset": [
        1750,
        1776
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1632": {
      "fn": "Voting.stringToUint",
      "offset": [
        1755,
        1759
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1633": {
      "fn": "Voting.stringToUint",
      "offset": [
        1750,
        1776
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x188A"
    },
    "1636": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1750,
        1776
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1637": {
      "fn": "Voting.stringToUint",
      "offset": [
        1750,
        1776
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1638": {
      "fn": "Voting.stringToUint",
      "offset": [
        1741,
        1777
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x66F"
    },
    "1641": {
      "fn": "Voting.stringToUint",
      "offset": [
        1741,
        1777
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1642": {
      "fn": "Voting.stringToUint",
      "offset": [
        1741,
        1777
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1643": {
      "fn": "Voting.stringToUint",
      "offset": [
        1741,
        1777
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x172E"
    },
    "1646": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1741,
        1777
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1647": {
      "fn": "Voting.stringToUint",
      "offset": [
        1741,
        1777
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1648": {
      "fn": "Voting.stringToUint",
      "offset": [
        1741,
        1777
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "1649": {
      "fn": "Voting.stringToUint",
      "offset": [
        1741,
        1777
      ],
      "op": "POP",
      "path": "0"
    },
    "1650": {
      "fn": "Voting.stringToUint",
      "offset": [
        1540,
        1793
      ],
      "op": "POP",
      "path": "0"
    },
    "1651": {
      "fn": "Voting.stringToUint",
      "offset": [
        1540,
        1793
      ],
      "op": "POP",
      "path": "0"
    },
    "1652": {
      "fn": "Voting.stringToUint",
      "offset": [
        1540,
        1793
      ],
      "op": "POP",
      "path": "0"
    },
    "1653": {
      "fn": "Voting.stringToUint",
      "offset": [
        1540,
        1793
      ],
      "op": "POP",
      "path": "0"
    },
    "1654": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 8
    },
    "1655": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1656": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x680"
    },
    "1659": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1660": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18A9"
    },
    "1663": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1535,
        1538
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1664": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1665": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1666": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "POP",
      "path": "0"
    },
    "1667": {
      "fn": "Voting.stringToUint",
      "offset": [
        1535,
        1538
      ],
      "op": "POP",
      "path": "0"
    },
    "1668": {
      "fn": "Voting.stringToUint",
      "offset": [
        1494,
        1793
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5F3"
    },
    "1671": {
      "fn": "Voting.stringToUint",
      "offset": [
        1494,
        1793
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1672": {
      "fn": "Voting.stringToUint",
      "offset": [
        1494,
        1793
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1673": {
      "op": "POP"
    },
    "1674": {
      "fn": "Voting.stringToUint",
      "offset": [
        1809,
        1812
      ],
      "op": "SWAP1",
      "path": "0",
      "statement": 9
    },
    "1675": {
      "fn": "Voting.stringToUint",
      "offset": [
        1809,
        1812
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1676": {
      "fn": "Voting.stringToUint",
      "offset": [
        1323,
        1823
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1677": {
      "op": "POP"
    },
    "1678": {
      "op": "POP"
    },
    "1679": {
      "op": "POP"
    },
    "1680": {
      "fn": "Voting.stringToUint",
      "jump": "o",
      "offset": [
        1323,
        1823
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1681": {
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1682": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1684": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1685": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1686": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1687": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1688": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "LT",
      "path": "0"
    },
    "1689": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6A1"
    },
    "1692": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1693": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1695": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1696": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1697": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1698": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1699": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1701": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1702": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1704": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1706": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1707": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1708": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1710": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MUL",
      "path": "0"
    },
    "1711": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1712": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1714": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1715": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1716": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1717": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1718": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1719": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1721": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1722": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1723": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1724": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6C4"
    },
    "1727": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1728": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "1731": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1732": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1733": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1734": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1736": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1737": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1739": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1740": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1741": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DIV",
      "path": "0"
    },
    "1742": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MUL",
      "path": "0"
    },
    "1743": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1745": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1746": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1748": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1749": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1750": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1751": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1752": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1754": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1755": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1756": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1757": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1758": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1759": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1760": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1761": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1762": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1764": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1765": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1766": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1767": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1768": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6F0"
    },
    "1771": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1772": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "1775": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1776": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1777": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1778": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1779": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x73D"
    },
    "1782": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1783": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1784": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1786": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "LT",
      "path": "0"
    },
    "1787": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x712"
    },
    "1790": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1791": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1794": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1795": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1796": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1797": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DIV",
      "path": "0"
    },
    "1798": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MUL",
      "path": "0"
    },
    "1799": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1800": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1801": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1802": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1804": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1805": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1806": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x73D"
    },
    "1809": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1810": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1811": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1812": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1813": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1814": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1815": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1817": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1818": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1820": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1822": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1823": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1824": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1825": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1826": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1827": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1828": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1829": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1830": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1832": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1833": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1834": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1836": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1837": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1838": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1839": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "GT",
      "path": "0"
    },
    "1840": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x720"
    },
    "1843": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1844": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1845": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1846": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SUB",
      "path": "0"
    },
    "1847": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1849": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "AND",
      "path": "0"
    },
    "1850": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1851": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1852": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1853": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1854": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1855": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1856": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1857": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1858": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1859": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1860": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1861": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1863": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1864": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1865": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1866": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x752"
    },
    "1869": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1870": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "1873": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1874": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1875": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1876": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1878": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1879": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1881": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1882": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1883": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DIV",
      "path": "0"
    },
    "1884": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MUL",
      "path": "0"
    },
    "1885": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1887": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1888": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1890": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1891": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1892": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1893": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1894": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1896": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1897": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1898": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1899": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1900": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1901": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1902": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1903": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1904": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1906": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1907": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1908": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1909": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1910": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77E"
    },
    "1913": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1914": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "1917": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1918": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1919": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1920": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1921": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7CB"
    },
    "1924": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1925": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1926": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1928": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "LT",
      "path": "0"
    },
    "1929": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A0"
    },
    "1932": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1933": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1936": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1937": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1938": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1939": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DIV",
      "path": "0"
    },
    "1940": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MUL",
      "path": "0"
    },
    "1941": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1942": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1943": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1944": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1946": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1947": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1948": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7CB"
    },
    "1951": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1952": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1953": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1954": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1955": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1956": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1957": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1959": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1960": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1962": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1964": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1965": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1966": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1967": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1968": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1969": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1970": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1971": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1972": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1974": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1975": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1976": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1978": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1979": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1980": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1981": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "GT",
      "path": "0"
    },
    "1982": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7AE"
    },
    "1985": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1986": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1987": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1988": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SUB",
      "path": "0"
    },
    "1989": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1991": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "AND",
      "path": "0"
    },
    "1992": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1993": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "1994": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1995": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1996": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1997": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1998": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "1999": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "2000": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "2001": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2002": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2003": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2005": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "2006": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2007": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2008": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2009": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2011": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "ADD",
      "path": "0"
    },
    "2012": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2013": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2014": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "POP",
      "path": "0"
    },
    "2015": {
      "fn": "Voting.stringToUint",
      "offset": [
        519,
        548
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2016": {
      "fn": "Voting.stringToUint",
      "jump": "o",
      "offset": [
        519,
        548
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2017": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3338,
        3794
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2018": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3434,
        3445
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 10,
      "value": "0x0"
    },
    "2020": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3434,
        3445
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2021": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2023": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2025": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2027": {
      "op": "SHL"
    },
    "2028": {
      "op": "SUB"
    },
    "2029": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3434,
        3445
      ],
      "op": "AND",
      "path": "0"
    },
    "2030": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3420,
        3430
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2031": {
      "branch": 42,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3420,
        3445
      ],
      "op": "EQ",
      "path": "0"
    },
    "2032": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x851"
    },
    "2035": {
      "branch": 42,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2036": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2038": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2039": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2043": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2045": {
      "op": "SHL"
    },
    "2046": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2047": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2048": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2050": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2052": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2053": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "ADD",
      "path": "0"
    },
    "2054": {
      "op": "MSTORE"
    },
    "2055": {
      "op": "PUSH1",
      "value": "0x2D"
    },
    "2057": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2059": {
      "op": "DUP3"
    },
    "2060": {
      "op": "ADD"
    },
    "2061": {
      "op": "MSTORE"
    },
    "2062": {
      "op": "PUSH32",
      "value": "0x4F6E6C792063686169726D616E2063616E20676976652064656E6F756E636520"
    },
    "2095": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2097": {
      "op": "DUP3"
    },
    "2098": {
      "op": "ADD"
    },
    "2099": {
      "op": "MSTORE"
    },
    "2100": {
      "op": "PUSH13",
      "value": "0x726967687420746F20766F7465"
    },
    "2114": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "2116": {
      "op": "SHL"
    },
    "2117": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2119": {
      "op": "DUP3"
    },
    "2120": {
      "op": "ADD"
    },
    "2121": {
      "op": "MSTORE"
    },
    "2122": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2124": {
      "op": "ADD"
    },
    "2125": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "2128": {
      "op": "JUMP"
    },
    "2129": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3399,
        3516
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2130": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2132": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2134": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2136": {
      "op": "SHL"
    },
    "2137": {
      "op": "SUB"
    },
    "2138": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 11
    },
    "2139": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "AND",
      "path": "0"
    },
    "2140": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2142": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2143": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2144": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2145": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3554
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2147": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2149": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2150": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2152": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2153": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3561
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2154": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3567
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2156": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3567
      ],
      "op": "ADD",
      "path": "0"
    },
    "2157": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3570
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2158": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3570
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2160": {
      "branch": 43,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3548,
        3570
      ],
      "op": "AND",
      "path": "0"
    },
    "2161": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3547,
        3570
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2162": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3547,
        3570
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2163": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3547,
        3597
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x89D"
    },
    "2166": {
      "branch": 43,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3547,
        3597
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2167": {
      "op": "POP"
    },
    "2168": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2170": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2172": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2174": {
      "op": "SHL"
    },
    "2175": {
      "op": "SUB"
    },
    "2176": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2177": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "AND",
      "path": "0"
    },
    "2178": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2180": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2181": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2182": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2183": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3581
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2185": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2187": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2188": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2190": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2191": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3588
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2192": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3594
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2194": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3594
      ],
      "op": "ADD",
      "path": "0"
    },
    "2195": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3597
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2196": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3597
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2199": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3597
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2200": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3597
      ],
      "op": "DIV",
      "path": "0"
    },
    "2201": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3597
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2203": {
      "branch": 44,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3575,
        3597
      ],
      "op": "AND",
      "path": "0"
    },
    "2204": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3574,
        3597
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2205": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3547,
        3597
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2206": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8E3"
    },
    "2209": {
      "branch": 44,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2210": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2212": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2213": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2217": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2219": {
      "op": "SHL"
    },
    "2220": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2221": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2222": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2224": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2226": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2227": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "ADD",
      "path": "0"
    },
    "2228": {
      "op": "MSTORE"
    },
    "2229": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "2231": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2233": {
      "op": "DUP3"
    },
    "2234": {
      "op": "ADD"
    },
    "2235": {
      "op": "MSTORE"
    },
    "2236": {
      "op": "PUSH23",
      "value": "0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959"
    },
    "2260": {
      "op": "PUSH1",
      "value": "0x4A"
    },
    "2262": {
      "op": "SHL"
    },
    "2263": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2265": {
      "op": "DUP3"
    },
    "2266": {
      "op": "ADD"
    },
    "2267": {
      "op": "MSTORE"
    },
    "2268": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2270": {
      "op": "ADD"
    },
    "2271": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "2274": {
      "op": "JUMP"
    },
    "2275": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3526,
        3646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2276": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2278": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2280": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2282": {
      "op": "SHL"
    },
    "2283": {
      "op": "SUB"
    },
    "2284": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 12
    },
    "2285": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "AND",
      "path": "0"
    },
    "2286": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2288": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2289": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2290": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2291": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3670
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2293": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2295": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2296": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2298": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2299": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3677
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2300": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3685
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2302": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3685
      ],
      "op": "ADD",
      "path": "0"
    },
    "2303": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3685
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2304": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3685
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2306": {
      "branch": 45,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3685
      ],
      "op": "AND",
      "path": "0"
    },
    "2307": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x94E"
    },
    "2310": {
      "branch": 45,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2311": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2313": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2314": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2318": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2320": {
      "op": "SHL"
    },
    "2321": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2322": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2323": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2325": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2327": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2328": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "ADD",
      "path": "0"
    },
    "2329": {
      "op": "DUP2"
    },
    "2330": {
      "op": "SWAP1"
    },
    "2331": {
      "op": "MSTORE"
    },
    "2332": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2334": {
      "op": "DUP3"
    },
    "2335": {
      "op": "ADD"
    },
    "2336": {
      "op": "MSTORE"
    },
    "2337": {
      "op": "PUSH32",
      "value": "0x566F74657220646F65736E2774206861766520726967687420746F20766F7465"
    },
    "2370": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2372": {
      "op": "DUP3"
    },
    "2373": {
      "op": "ADD"
    },
    "2374": {
      "op": "MSTORE"
    },
    "2375": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2377": {
      "op": "ADD"
    },
    "2378": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "2381": {
      "op": "JUMP"
    },
    "2382": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3656,
        3722
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2383": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2385": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2387": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2389": {
      "op": "SHL"
    },
    "2390": {
      "op": "SUB"
    },
    "2391": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 13
    },
    "2392": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "AND",
      "path": "0"
    },
    "2393": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3756,
        3761
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2395": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2396": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2397": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2398": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3738
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2400": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2402": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2403": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2404": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2405": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2407": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2408": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3745
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2409": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3753
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2411": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3753
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2412": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3753
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2413": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3753
      ],
      "op": "ADD",
      "path": "0"
    },
    "2414": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3761
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2415": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3761
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2416": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2418": {
      "op": "NOT"
    },
    "2419": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3761
      ],
      "op": "AND",
      "path": "0"
    },
    "2420": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3761
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2421": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3761
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2422": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 14
    },
    "2423": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2424": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3738
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2425": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3738
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2426": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3753
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2427": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3753
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2428": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x986"
    },
    "2431": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2432": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3738
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2433": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3732,
        3738
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2434": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1781"
    },
    "2437": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        3771,
        3787
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2438": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2439": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2440": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2441": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3771,
        3787
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2442": {
      "op": "POP"
    },
    "2443": {
      "op": "POP"
    },
    "2444": {
      "op": "POP"
    },
    "2445": {
      "fn": "Voting.removeRightToVote",
      "jump": "o",
      "offset": [
        3338,
        3794
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2446": {
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2447": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2449": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2450": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2451": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2452": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2453": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "LT",
      "path": "0"
    },
    "2454": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x99E"
    },
    "2457": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2458": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2460": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2461": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2462": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2463": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2464": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2466": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2467": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2469": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2471": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2472": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2473": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2475": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MUL",
      "path": "0"
    },
    "2476": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2477": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2479": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2480": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "POP",
      "path": "0"
    },
    "2481": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2482": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "POP",
      "path": "0"
    },
    "2483": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2484": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2486": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2487": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2488": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2489": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9C1"
    },
    "2492": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2493": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "2496": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        554,
        576
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2497": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2498": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2499": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2501": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2502": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2504": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2505": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2506": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DIV",
      "path": "0"
    },
    "2507": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MUL",
      "path": "0"
    },
    "2508": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2510": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2511": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2513": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2514": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2515": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2516": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2517": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2519": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2520": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2521": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2522": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2523": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2524": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2525": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2526": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2527": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2529": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2530": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2531": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2532": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2533": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9ED"
    },
    "2536": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2537": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "2540": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        554,
        576
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2541": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2542": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2543": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2544": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3A"
    },
    "2547": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2548": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2549": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2551": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "LT",
      "path": "0"
    },
    "2552": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA0F"
    },
    "2555": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2556": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2559": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2560": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2561": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2562": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DIV",
      "path": "0"
    },
    "2563": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MUL",
      "path": "0"
    },
    "2564": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2565": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2566": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2567": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2569": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2570": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2571": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3A"
    },
    "2574": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2575": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2576": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2577": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2578": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2579": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2580": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2582": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2583": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2585": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2587": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2588": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2589": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2590": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2591": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2592": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2593": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2594": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2595": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2597": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2598": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2599": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2601": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2602": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2603": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2604": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "GT",
      "path": "0"
    },
    "2605": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA1D"
    },
    "2608": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2609": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2610": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2611": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SUB",
      "path": "0"
    },
    "2612": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2614": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "AND",
      "path": "0"
    },
    "2615": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2616": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2617": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2618": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2619": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "POP",
      "path": "0"
    },
    "2620": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "POP",
      "path": "0"
    },
    "2621": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "POP",
      "path": "0"
    },
    "2622": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "POP",
      "path": "0"
    },
    "2623": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "POP",
      "path": "0"
    },
    "2624": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2625": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2626": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2628": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "ADD",
      "path": "0"
    },
    "2629": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2630": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2631": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "POP",
      "path": "0"
    },
    "2632": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        554,
        576
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2633": {
      "fn": "Voting.removeRightToVote",
      "jump": "o",
      "offset": [
        554,
        576
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2634": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3800,
        4208
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2635": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3891,
        3901
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2636": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3861,
        3881
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2638": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3902
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2639": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3902
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2640": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3902
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2641": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3890
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2643": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2645": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3902
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2646": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3902
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2648": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3902
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2649": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3884,
        3902
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2650": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3920,
        3934
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 15,
      "value": "0x2"
    },
    "2652": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3920,
        3934
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2653": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3920,
        3934
      ],
      "op": "ADD",
      "path": "0"
    },
    "2654": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3920,
        3934
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2655": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3920,
        3934
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2657": {
      "branch": 46,
      "fn": "Voting.voteCandidate",
      "offset": [
        3920,
        3934
      ],
      "op": "AND",
      "path": "0"
    },
    "2658": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAA4"
    },
    "2661": {
      "branch": 46,
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2662": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2664": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2665": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2669": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2671": {
      "op": "SHL"
    },
    "2672": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2673": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2674": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2676": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2678": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2679": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "ADD",
      "path": "0"
    },
    "2680": {
      "op": "MSTORE"
    },
    "2681": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "2683": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2685": {
      "op": "DUP3"
    },
    "2686": {
      "op": "ADD"
    },
    "2687": {
      "op": "MSTORE"
    },
    "2688": {
      "op": "PUSH20",
      "value": "0x486173206E6F20726967687420746F20766F7465"
    },
    "2709": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2711": {
      "op": "SHL"
    },
    "2712": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2714": {
      "op": "DUP3"
    },
    "2715": {
      "op": "ADD"
    },
    "2716": {
      "op": "MSTORE"
    },
    "2717": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2719": {
      "op": "ADD"
    },
    "2720": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "2723": {
      "op": "JUMP"
    },
    "2724": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3912,
        3959
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2725": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3978,
        3990
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 16,
      "value": "0x3"
    },
    "2727": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3978,
        3990
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2728": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3978,
        3990
      ],
      "op": "ADD",
      "path": "0"
    },
    "2729": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3978,
        3993
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2730": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3978,
        3993
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2732": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3978,
        3993
      ],
      "op": "AND",
      "path": "0"
    },
    "2733": {
      "branch": 47,
      "fn": "Voting.voteCandidate",
      "offset": [
        3977,
        3993
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2734": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAF9"
    },
    "2737": {
      "branch": 47,
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2738": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2740": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2741": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2745": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2747": {
      "op": "SHL"
    },
    "2748": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2749": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2750": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2752": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2754": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2755": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "ADD",
      "path": "0"
    },
    "2756": {
      "op": "MSTORE"
    },
    "2757": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "2759": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2761": {
      "op": "DUP3"
    },
    "2762": {
      "op": "ADD"
    },
    "2763": {
      "op": "MSTORE"
    },
    "2764": {
      "op": "PUSH32",
      "value": "0x616C726561647920766F74656420666F722063616E6469646174650000000000"
    },
    "2797": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2799": {
      "op": "DUP3"
    },
    "2800": {
      "op": "ADD"
    },
    "2801": {
      "op": "MSTORE"
    },
    "2802": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2804": {
      "op": "ADD"
    },
    "2805": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "2808": {
      "op": "JUMP"
    },
    "2809": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3969,
        4025
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2810": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4068
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 17,
      "value": "0x3"
    },
    "2812": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4069,
        4078
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2813": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2814": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2815": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2816": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "LT",
      "path": "0"
    },
    "2817": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB0C"
    },
    "2820": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2821": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB0C"
    },
    "2824": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "2827": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        4058,
        4079
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2828": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2829": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2830": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2832": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2833": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2835": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2837": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2838": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2839": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2841": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "MUL",
      "path": "0"
    },
    "2842": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4079
      ],
      "op": "ADD",
      "path": "0"
    },
    "2843": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4084
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2845": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4084
      ],
      "op": "ADD",
      "path": "0"
    },
    "2846": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4058,
        4084
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2847": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4043,
        4049
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2848": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4043,
        4054
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2850": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4043,
        4054
      ],
      "op": "ADD",
      "path": "0"
    },
    "2851": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4043,
        4054
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2852": {
      "branch": 48,
      "fn": "Voting.voteCandidate",
      "offset": [
        4043,
        4084
      ],
      "op": "EQ",
      "path": "0"
    },
    "2853": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB7B"
    },
    "2856": {
      "branch": 48,
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2857": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2859": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2860": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2864": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2866": {
      "op": "SHL"
    },
    "2867": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2868": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2869": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2871": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2873": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2874": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "ADD",
      "path": "0"
    },
    "2875": {
      "op": "MSTORE"
    },
    "2876": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2878": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2880": {
      "op": "DUP3"
    },
    "2881": {
      "op": "ADD"
    },
    "2882": {
      "op": "MSTORE"
    },
    "2883": {
      "op": "PUSH32",
      "value": "0x63616E6E6F7420766F74652063616E64696461746520696E2074686973206172"
    },
    "2916": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2918": {
      "op": "DUP3"
    },
    "2919": {
      "op": "ADD"
    },
    "2920": {
      "op": "MSTORE"
    },
    "2921": {
      "op": "PUSH2",
      "value": "0x6561"
    },
    "2924": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "2926": {
      "op": "SHL"
    },
    "2927": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2929": {
      "op": "DUP3"
    },
    "2930": {
      "op": "ADD"
    },
    "2931": {
      "op": "MSTORE"
    },
    "2932": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2934": {
      "op": "ADD"
    },
    "2935": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "2938": {
      "op": "JUMP"
    },
    "2939": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4035,
        4123
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2940": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4168,
        4169
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 18,
      "value": "0x1"
    },
    "2942": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4143
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2944": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4144,
        4153
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2945": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2946": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2947": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2948": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "LT",
      "path": "0"
    },
    "2949": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB90"
    },
    "2952": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2953": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB90"
    },
    "2956": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "2959": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        4133,
        4154
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2960": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2961": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2962": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2964": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2965": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2967": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2969": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2970": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2971": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2973": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "MUL",
      "path": "0"
    },
    "2974": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4154
      ],
      "op": "ADD",
      "path": "0"
    },
    "2975": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2977": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2978": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2980": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2981": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2982": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2983": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBB0"
    },
    "2986": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2987": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2988": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x172E"
    },
    "2991": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        4133,
        4169
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2992": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2993": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2994": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2995": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4133,
        4169
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2996": {
      "op": "POP"
    },
    "2997": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4197,
        4201
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 19,
      "value": "0x1"
    },
    "2999": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4197,
        4201
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3000": {
      "op": "POP"
    },
    "3001": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4179,
        4191
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3003": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4179,
        4191
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3004": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4179,
        4191
      ],
      "op": "ADD",
      "path": "0"
    },
    "3005": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4192,
        4193
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3007": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4179,
        4194
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x433"
    },
    "3010": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4179,
        4194
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3011": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3012": {
      "fn": "Voting.addCandidates",
      "offset": [
        1945,
        1956
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 20,
      "value": "0x0"
    },
    "3014": {
      "fn": "Voting.addCandidates",
      "offset": [
        1945,
        1956
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3015": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3017": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3019": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3021": {
      "op": "SHL"
    },
    "3022": {
      "op": "SUB"
    },
    "3023": {
      "fn": "Voting.addCandidates",
      "offset": [
        1945,
        1956
      ],
      "op": "AND",
      "path": "0"
    },
    "3024": {
      "fn": "Voting.addCandidates",
      "offset": [
        1931,
        1941
      ],
      "op": "CALLER",
      "path": "0"
    },
    "3025": {
      "branch": 49,
      "fn": "Voting.addCandidates",
      "offset": [
        1931,
        1956
      ],
      "op": "EQ",
      "path": "0"
    },
    "3026": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBED"
    },
    "3029": {
      "branch": 49,
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3030": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3032": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3033": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3037": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3039": {
      "op": "SHL"
    },
    "3040": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3041": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3042": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3044": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "ADD",
      "path": "0"
    },
    "3045": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "3048": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3049": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18C4"
    },
    "3052": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1910,
        2022
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3053": {
      "fn": "Voting.addCandidates",
      "offset": [
        1910,
        2022
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3054": {
      "fn": "Voting.addCandidates",
      "offset": [
        2037,
        2046
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3056": {
      "fn": "Voting.addCandidates",
      "offset": [
        2032,
        2398
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3057": {
      "fn": "Voting.addCandidates",
      "offset": [
        2056,
        2075
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3058": {
      "fn": "Voting.addCandidates",
      "offset": [
        2056,
        2082
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3059": {
      "fn": "Voting.addCandidates",
      "offset": [
        2052,
        2053
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3060": {
      "fn": "Voting.addCandidates",
      "offset": [
        2052,
        2082
      ],
      "op": "LT",
      "path": "0"
    },
    "3061": {
      "fn": "Voting.addCandidates",
      "offset": [
        2032,
        2398
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3062": {
      "fn": "Voting.addCandidates",
      "offset": [
        2032,
        2398
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD21"
    },
    "3065": {
      "fn": "Voting.addCandidates",
      "offset": [
        2032,
        2398
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3066": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2113
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 21,
      "value": "0x3"
    },
    "3068": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3070": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3071": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3072": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "3074": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "ADD",
      "path": "0"
    },
    "3075": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3077": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3078": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3079": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2193
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3080": {
      "fn": "Voting.addCandidates",
      "offset": [
        2194,
        2195
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3081": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3082": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3083": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3084": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "LT",
      "path": "0"
    },
    "3085": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC18"
    },
    "3088": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3089": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC18"
    },
    "3092": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3095": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2174,
        2196
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3096": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3097": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3099": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "MUL",
      "path": "0"
    },
    "3100": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3102": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "ADD",
      "path": "0"
    },
    "3103": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "ADD",
      "path": "0"
    },
    "3104": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2196
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3105": {
      "fn": "Voting.addCandidates",
      "offset": [
        2197,
        2198
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3107": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3109": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3110": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "LT",
      "path": "0"
    },
    "3111": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC32"
    },
    "3114": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3115": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC32"
    },
    "3118": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3121": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2174,
        2199
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3122": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3123": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3125": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "MUL",
      "path": "0"
    },
    "3126": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "ADD",
      "path": "0"
    },
    "3127": {
      "fn": "Voting.addCandidates",
      "offset": [
        2174,
        2199
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3128": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3129": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3130": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3132": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "ADD",
      "path": "0"
    },
    "3133": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2247
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3134": {
      "fn": "Voting.addCandidates",
      "offset": [
        2248,
        2249
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3135": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3136": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3137": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3138": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "LT",
      "path": "0"
    },
    "3139": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC4E"
    },
    "3142": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3143": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC4E"
    },
    "3146": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3149": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2228,
        2250
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3150": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3151": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3153": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "MUL",
      "path": "0"
    },
    "3154": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3156": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "ADD",
      "path": "0"
    },
    "3157": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "ADD",
      "path": "0"
    },
    "3158": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2250
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3159": {
      "fn": "Voting.addCandidates",
      "offset": [
        2251,
        2252
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3161": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3163": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3164": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "LT",
      "path": "0"
    },
    "3165": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC68"
    },
    "3168": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3169": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC68"
    },
    "3172": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3175": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2228,
        2253
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3176": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3177": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3179": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "MUL",
      "path": "0"
    },
    "3180": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "ADD",
      "path": "0"
    },
    "3181": {
      "fn": "Voting.addCandidates",
      "offset": [
        2228,
        2253
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3182": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3183": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3184": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3186": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "ADD",
      "path": "0"
    },
    "3187": {
      "fn": "Voting.addCandidates",
      "offset": [
        2281,
        2320
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCAB"
    },
    "3190": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2313
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3191": {
      "fn": "Voting.addCandidates",
      "offset": [
        2314,
        2315
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3192": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3193": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3194": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3195": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "LT",
      "path": "0"
    },
    "3196": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC87"
    },
    "3199": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3200": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC87"
    },
    "3203": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3206": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2294,
        2316
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3207": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3208": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3210": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "MUL",
      "path": "0"
    },
    "3211": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3213": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "ADD",
      "path": "0"
    },
    "3214": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "ADD",
      "path": "0"
    },
    "3215": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2316
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3216": {
      "fn": "Voting.addCandidates",
      "offset": [
        2317,
        2318
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3218": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3220": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3221": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "LT",
      "path": "0"
    },
    "3222": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCA1"
    },
    "3225": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3226": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCA1"
    },
    "3229": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3232": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2294,
        2319
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3233": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3234": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3236": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "MUL",
      "path": "0"
    },
    "3237": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "ADD",
      "path": "0"
    },
    "3238": {
      "fn": "Voting.addCandidates",
      "offset": [
        2294,
        2319
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3239": {
      "fn": "Voting.addCandidates",
      "offset": [
        2281,
        2293
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5ED"
    },
    "3242": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2281,
        2320
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3243": {
      "fn": "Voting.addCandidates",
      "offset": [
        2281,
        2320
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3244": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3245": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3246": {
      "fn": "Voting.addCandidates",
      "offset": [
        2353,
        2354
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3248": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3250": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3251": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3252": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "ADD",
      "path": "0"
    },
    "3253": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3254": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3255": {
      "fn": "Voting.addCandidates",
      "offset": [
        2136,
        2373
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3256": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3257": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3258": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3260": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3261": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3262": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3263": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3264": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3265": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3266": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3267": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3268": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3269": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3270": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3271": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3272": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3273": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3274": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3275": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3276": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3278": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "MUL",
      "path": "0"
    },
    "3279": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3280": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3281": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3282": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3283": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCDF"
    },
    "3286": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3287": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3288": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3289": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3290": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3291": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1195"
    },
    "3294": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2103,
        2387
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3295": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3296": {
      "op": "POP"
    },
    "3297": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3299": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3300": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3301": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3302": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3303": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3304": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3305": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCF8"
    },
    "3308": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3309": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3311": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3312": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3313": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3314": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3315": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3316": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1195"
    },
    "3319": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2103,
        2387
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3320": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3321": {
      "op": "POP"
    },
    "3322": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3324": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3325": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3326": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3327": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3329": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3330": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3331": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3332": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "3334": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3335": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3336": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3337": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3338": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3340": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3341": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3342": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "ADD",
      "path": "0"
    },
    "3343": {
      "fn": "Voting.addCandidates",
      "offset": [
        2103,
        2387
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3344": {
      "fn": "Voting.addCandidates",
      "offset": [
        2084,
        2087
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 22
    },
    "3345": {
      "fn": "Voting.addCandidates",
      "offset": [
        2084,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD19"
    },
    "3348": {
      "fn": "Voting.addCandidates",
      "offset": [
        2084,
        2087
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3349": {
      "fn": "Voting.addCandidates",
      "offset": [
        2084,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18A9"
    },
    "3352": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2084,
        2087
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3353": {
      "fn": "Voting.addCandidates",
      "offset": [
        2084,
        2087
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3354": {
      "fn": "Voting.addCandidates",
      "offset": [
        2084,
        2087
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3355": {
      "fn": "Voting.addCandidates",
      "offset": [
        2084,
        2087
      ],
      "op": "POP",
      "path": "0"
    },
    "3356": {
      "fn": "Voting.addCandidates",
      "offset": [
        2084,
        2087
      ],
      "op": "POP",
      "path": "0"
    },
    "3357": {
      "fn": "Voting.addCandidates",
      "offset": [
        2032,
        2398
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBF0"
    },
    "3360": {
      "fn": "Voting.addCandidates",
      "offset": [
        2032,
        2398
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3361": {
      "fn": "Voting.addCandidates",
      "offset": [
        2032,
        2398
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3362": {
      "fn": "Voting.addCandidates",
      "offset": [
        2032,
        2398
      ],
      "op": "POP",
      "path": "0"
    },
    "3363": {
      "fn": "Voting.addCandidates",
      "offset": [
        1828,
        2404
      ],
      "op": "POP",
      "path": "0"
    },
    "3364": {
      "fn": "Voting.addCandidates",
      "jump": "o",
      "offset": [
        1828,
        2404
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3365": {
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3366": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3368": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3370": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3371": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3373": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3374": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3375": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3376": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3378": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3379": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3380": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3381": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3382": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3383": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3384": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD40"
    },
    "3387": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3388": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "3391": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        445,
        484
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3392": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3393": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3394": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3396": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3397": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3399": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3400": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3401": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DIV",
      "path": "0"
    },
    "3402": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MUL",
      "path": "0"
    },
    "3403": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3405": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3406": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3408": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3409": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3410": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3411": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3412": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3414": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3415": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3416": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3417": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3418": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3419": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3420": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3421": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3422": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3424": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3425": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3426": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3427": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3428": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD6C"
    },
    "3431": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3432": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "3435": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        445,
        484
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3436": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3437": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3438": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3439": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDB9"
    },
    "3442": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3443": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3444": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3446": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "LT",
      "path": "0"
    },
    "3447": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD8E"
    },
    "3450": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3451": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3454": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3455": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3456": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3457": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DIV",
      "path": "0"
    },
    "3458": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MUL",
      "path": "0"
    },
    "3459": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3460": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3461": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3462": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3464": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3465": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3466": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDB9"
    },
    "3469": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3470": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3471": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3472": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3473": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3474": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3475": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3477": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3478": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3480": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3482": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3483": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3484": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3485": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3486": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3487": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3488": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3489": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3490": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3492": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3493": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3494": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3496": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3497": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3498": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3499": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "GT",
      "path": "0"
    },
    "3500": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD9C"
    },
    "3503": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3504": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3505": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3506": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SUB",
      "path": "0"
    },
    "3507": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3509": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "AND",
      "path": "0"
    },
    "3510": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3511": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3512": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3513": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3514": {
      "op": "POP"
    },
    "3515": {
      "op": "POP"
    },
    "3516": {
      "op": "POP"
    },
    "3517": {
      "op": "POP"
    },
    "3518": {
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3520": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3521": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3522": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3523": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3525": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3526": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3527": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "ADD",
      "path": "0"
    },
    "3528": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3529": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3530": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3531": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3532": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "3534": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "AND",
      "path": "0"
    },
    "3535": {
      "fn": "Voting.addCandidates",
      "offset": [
        445,
        484
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3536": {
      "op": "POP"
    },
    "3537": {
      "offset": [
        445,
        484
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3538": {
      "fn": "Voting.addCandidates",
      "jump": "o",
      "offset": [
        445,
        484
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3539": {
      "fn": "Voting.getParties",
      "offset": [
        2516,
        2606
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3540": {
      "fn": "Voting.getParties",
      "offset": [
        2559,
        2573
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "3542": {
      "fn": "Voting.getParties",
      "offset": [
        2592,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 23,
      "value": "0x4"
    },
    "3544": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3545": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3546": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3547": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3549": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MUL",
      "path": "0"
    },
    "3550": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3552": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3553": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3555": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3556": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3557": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3558": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3559": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3561": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3562": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3563": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3564": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3565": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3566": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3567": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3568": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3569": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3571": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3572": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3574": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3575": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3576": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3577": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3578": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "LT",
      "path": "0"
    },
    "3579": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3580": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5E4"
    },
    "3583": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3584": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3585": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3586": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3587": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3589": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3590": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3592": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3594": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3595": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3596": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3598": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MUL",
      "path": "0"
    },
    "3599": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3600": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3602": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3603": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3604": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3606": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3607": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3609": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3610": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3611": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3612": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3614": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3615": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3616": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3617": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3618": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE2A"
    },
    "3621": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3622": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "3625": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3626": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3627": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3628": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3630": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3631": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3633": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3634": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3635": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DIV",
      "path": "0"
    },
    "3636": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MUL",
      "path": "0"
    },
    "3637": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3639": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3640": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3642": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3643": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3644": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3645": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3646": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3648": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3649": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3650": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3651": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3652": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3653": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3654": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3655": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3656": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3658": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3659": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3660": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3661": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3662": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE56"
    },
    "3665": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3666": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1746"
    },
    "3669": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3670": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3671": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3672": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3673": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEA3"
    },
    "3676": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3677": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3678": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3680": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "LT",
      "path": "0"
    },
    "3681": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE78"
    },
    "3684": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3685": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3688": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3689": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3690": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3691": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DIV",
      "path": "0"
    },
    "3692": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MUL",
      "path": "0"
    },
    "3693": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3694": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3695": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3696": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3698": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3699": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3700": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEA3"
    },
    "3703": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3704": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3705": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3706": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3707": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3708": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3709": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3711": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3712": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3714": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3716": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3717": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3718": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3719": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3720": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3721": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3722": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3723": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3724": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3726": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3727": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3728": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3730": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3731": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3732": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3733": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "GT",
      "path": "0"
    },
    "3734": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE86"
    },
    "3737": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3738": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3739": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3740": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SUB",
      "path": "0"
    },
    "3741": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3743": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "AND",
      "path": "0"
    },
    "3744": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3745": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3746": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3747": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3748": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "POP",
      "path": "0"
    },
    "3749": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "POP",
      "path": "0"
    },
    "3750": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "POP",
      "path": "0"
    },
    "3751": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "POP",
      "path": "0"
    },
    "3752": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "POP",
      "path": "0"
    },
    "3753": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3754": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3755": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3757": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3758": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3760": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3761": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3762": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3763": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3764": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3765": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "POP",
      "path": "0"
    },
    "3766": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "POP",
      "path": "0"
    },
    "3767": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3768": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3769": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3771": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3772": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3773": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3775": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "ADD",
      "path": "0"
    },
    "3776": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3777": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF7"
    },
    "3780": {
      "fn": "Voting.getParties",
      "offset": [
        2585,
        2599
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3781": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3782": {
      "fn": "Voting.winningParty",
      "offset": [
        4954,
        4975
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3784": {
      "fn": "Voting.winningParty",
      "offset": [
        4954,
        4975
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3785": {
      "fn": "Voting.winningParty",
      "offset": [
        4954,
        4975
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3786": {
      "fn": "Voting.winningParty",
      "offset": [
        5025,
        5246
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3787": {
      "fn": "Voting.winningParty",
      "offset": [
        5049,
        5056
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3789": {
      "fn": "Voting.winningParty",
      "offset": [
        5049,
        5063
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3790": {
      "fn": "Voting.winningParty",
      "offset": [
        5045,
        5063
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3791": {
      "fn": "Voting.winningParty",
      "offset": [
        5045,
        5063
      ],
      "op": "LT",
      "path": "0"
    },
    "3792": {
      "fn": "Voting.winningParty",
      "offset": [
        5025,
        5246
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3793": {
      "fn": "Voting.winningParty",
      "offset": [
        5025,
        5246
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF3D"
    },
    "3796": {
      "fn": "Voting.winningParty",
      "offset": [
        5025,
        5246
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3797": {
      "fn": "Voting.winningParty",
      "offset": [
        5111,
        5127
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3798": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5095
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3800": {
      "fn": "Voting.winningParty",
      "offset": [
        5096,
        5097
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3801": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3802": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3803": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3804": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "LT",
      "path": "0"
    },
    "3805": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEE8"
    },
    "3808": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3809": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEE8"
    },
    "3812": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3815": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        5088,
        5098
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3816": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3817": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3818": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3820": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3821": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3823": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3825": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3826": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3827": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3829": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "MUL",
      "path": "0"
    },
    "3830": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5098
      ],
      "op": "ADD",
      "path": "0"
    },
    "3831": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5108
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3833": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5108
      ],
      "op": "ADD",
      "path": "0"
    },
    "3834": {
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5108
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3835": {
      "branch": 50,
      "fn": "Voting.winningParty",
      "offset": [
        5088,
        5127
      ],
      "op": "GT",
      "path": "0"
    },
    "3836": {
      "fn": "Voting.winningParty",
      "offset": [
        5084,
        5236
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3837": {
      "fn": "Voting.winningParty",
      "offset": [
        5084,
        5236
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF2B"
    },
    "3840": {
      "branch": 50,
      "fn": "Voting.winningParty",
      "offset": [
        5084,
        5236
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3841": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5173
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 24,
      "value": "0x4"
    },
    "3843": {
      "fn": "Voting.winningParty",
      "offset": [
        5174,
        5175
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3844": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3845": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3846": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3847": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "LT",
      "path": "0"
    },
    "3848": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF13"
    },
    "3851": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3852": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF13"
    },
    "3855": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3858": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        5166,
        5176
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3859": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3860": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3861": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3863": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3864": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3866": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3868": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3869": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3870": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3872": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "MUL",
      "path": "0"
    },
    "3873": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5176
      ],
      "op": "ADD",
      "path": "0"
    },
    "3874": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5186
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3876": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5186
      ],
      "op": "ADD",
      "path": "0"
    },
    "3877": {
      "fn": "Voting.winningParty",
      "offset": [
        5166,
        5186
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3878": {
      "fn": "Voting.winningParty",
      "offset": [
        5147,
        5186
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3879": {
      "fn": "Voting.winningParty",
      "offset": [
        5147,
        5186
      ],
      "op": "POP",
      "path": "0"
    },
    "3880": {
      "fn": "Voting.winningParty",
      "offset": [
        5220,
        5221
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 25
    },
    "3881": {
      "fn": "Voting.winningParty",
      "offset": [
        5204,
        5221
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3882": {
      "fn": "Voting.winningParty",
      "offset": [
        5204,
        5221
      ],
      "op": "POP",
      "path": "0"
    },
    "3883": {
      "fn": "Voting.winningParty",
      "offset": [
        5084,
        5236
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3884": {
      "fn": "Voting.winningParty",
      "offset": [
        5065,
        5068
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 26
    },
    "3885": {
      "fn": "Voting.winningParty",
      "offset": [
        5065,
        5068
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF35"
    },
    "3888": {
      "fn": "Voting.winningParty",
      "offset": [
        5065,
        5068
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3889": {
      "fn": "Voting.winningParty",
      "offset": [
        5065,
        5068
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18A9"
    },
    "3892": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        5065,
        5068
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3893": {
      "fn": "Voting.winningParty",
      "offset": [
        5065,
        5068
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3894": {
      "fn": "Voting.winningParty",
      "offset": [
        5065,
        5068
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3895": {
      "fn": "Voting.winningParty",
      "offset": [
        5065,
        5068
      ],
      "op": "POP",
      "path": "0"
    },
    "3896": {
      "fn": "Voting.winningParty",
      "offset": [
        5065,
        5068
      ],
      "op": "POP",
      "path": "0"
    },
    "3897": {
      "fn": "Voting.winningParty",
      "offset": [
        5025,
        5246
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xECA"
    },
    "3900": {
      "fn": "Voting.winningParty",
      "offset": [
        5025,
        5246
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3901": {
      "fn": "Voting.winningParty",
      "offset": [
        5025,
        5246
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3902": {
      "fn": "Voting.winningParty",
      "offset": [
        5025,
        5246
      ],
      "op": "POP",
      "path": "0"
    },
    "3903": {
      "fn": "Voting.winningParty",
      "offset": [
        4977,
        5252
      ],
      "op": "POP",
      "path": "0"
    },
    "3904": {
      "fn": "Voting.winningParty",
      "offset": [
        4909,
        5252
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3905": {
      "fn": "Voting.winningParty",
      "jump": "o",
      "offset": [
        4909,
        5252
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3906": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4511,
        4903
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3907": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4584,
        4609
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3909": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4584,
        4609
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3910": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4584,
        4609
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3911": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4663,
        4897
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3912": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4687,
        4697
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3914": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4687,
        4704
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3915": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4683,
        4704
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3916": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4683,
        4704
      ],
      "op": "LT",
      "path": "0"
    },
    "3917": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4663,
        4897
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3918": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4663,
        4897
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF3D"
    },
    "3921": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4663,
        4897
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3922": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4755,
        4771
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3923": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4739
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3925": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4740,
        4741
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3926": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3927": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3928": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3929": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "LT",
      "path": "0"
    },
    "3930": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF65"
    },
    "3933": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3934": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF65"
    },
    "3937": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3940": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        4729,
        4742
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3941": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3942": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3943": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3945": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3946": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3948": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3950": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3951": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3952": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3954": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "MUL",
      "path": "0"
    },
    "3955": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4742
      ],
      "op": "ADD",
      "path": "0"
    },
    "3956": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4752
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3958": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4752
      ],
      "op": "ADD",
      "path": "0"
    },
    "3959": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4752
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3960": {
      "branch": 51,
      "fn": "Voting.winningCandidate",
      "offset": [
        4729,
        4771
      ],
      "op": "GT",
      "path": "0"
    },
    "3961": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4725,
        4887
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3962": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4725,
        4887
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA8"
    },
    "3965": {
      "branch": 51,
      "fn": "Voting.winningCandidate",
      "offset": [
        4725,
        4887
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3966": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4820
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 27,
      "value": "0x3"
    },
    "3968": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4821,
        4822
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3969": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3970": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3971": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3972": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "LT",
      "path": "0"
    },
    "3973": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF90"
    },
    "3976": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3977": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF90"
    },
    "3980": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1702"
    },
    "3983": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        4810,
        4823
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3984": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3985": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3986": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3988": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3989": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3991": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3993": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3994": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3995": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3997": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "MUL",
      "path": "0"
    },
    "3998": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4823
      ],
      "op": "ADD",
      "path": "0"
    },
    "3999": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4833
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "4001": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4833
      ],
      "op": "ADD",
      "path": "0"
    },
    "4002": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4810,
        4833
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4003": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4791,
        4833
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4004": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4791,
        4833
      ],
      "op": "POP",
      "path": "0"
    },
    "4005": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4871,
        4872
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 28
    },
    "4006": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4851,
        4872
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4007": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4851,
        4872
      ],
      "op": "POP",
      "path": "0"
    },
    "4008": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4725,
        4887
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4009": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4706,
        4709
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 29
    },
    "4010": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4706,
        4709
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFB2"
    },
    "4013": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4706,
        4709
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4014": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4706,
        4709
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18A9"
    },
    "4017": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        4706,
        4709
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4018": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4706,
        4709
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4019": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4706,
        4709
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4020": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4706,
        4709
      ],
      "op": "POP",
      "path": "0"
    },
    "4021": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4706,
        4709
      ],
      "op": "POP",
      "path": "0"
    },
    "4022": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4663,
        4897
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF47"
    },
    "4025": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4663,
        4897
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4026": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2612,
        3327
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4027": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2782,
        2793
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 30,
      "value": "0x0"
    },
    "4029": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2782,
        2793
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4030": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4032": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4034": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4036": {
      "op": "SHL"
    },
    "4037": {
      "op": "SUB"
    },
    "4038": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2782,
        2793
      ],
      "op": "AND",
      "path": "0"
    },
    "4039": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2768,
        2778
      ],
      "op": "CALLER",
      "path": "0"
    },
    "4040": {
      "branch": 52,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2768,
        2793
      ],
      "op": "EQ",
      "path": "0"
    },
    "4041": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFE4"
    },
    "4044": {
      "branch": 52,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4045": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4047": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4048": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4052": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4054": {
      "op": "SHL"
    },
    "4055": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4056": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4057": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4059": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "ADD",
      "path": "0"
    },
    "4060": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "4063": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4064": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18C4"
    },
    "4067": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        2747,
        2859
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4068": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2747,
        2859
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4069": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4071": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4073": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4075": {
      "op": "SHL"
    },
    "4076": {
      "op": "SUB"
    },
    "4077": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 31
    },
    "4078": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "AND",
      "path": "0"
    },
    "4079": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4081": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4082": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4083": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4084": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2897
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4086": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4088": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4089": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4091": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4092": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2904
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4093": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2910
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "4095": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2910
      ],
      "op": "ADD",
      "path": "0"
    },
    "4096": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2913
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4097": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4099": {
      "branch": 53,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2891,
        2913
      ],
      "op": "AND",
      "path": "0"
    },
    "4100": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2890,
        2913
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4101": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2890,
        2913
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4102": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2890,
        2940
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1030"
    },
    "4105": {
      "branch": 53,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2890,
        2940
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4106": {
      "op": "POP"
    },
    "4107": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4109": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4111": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4113": {
      "op": "SHL"
    },
    "4114": {
      "op": "SUB"
    },
    "4115": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4116": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "AND",
      "path": "0"
    },
    "4117": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4119": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4120": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4121": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4122": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2924
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4124": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4126": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4127": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4129": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4130": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2931
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4131": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2937
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "4133": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2937
      ],
      "op": "ADD",
      "path": "0"
    },
    "4134": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2940
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4135": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2940
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "4138": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2940
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4139": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2940
      ],
      "op": "DIV",
      "path": "0"
    },
    "4140": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2940
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4142": {
      "branch": 54,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2918,
        2940
      ],
      "op": "AND",
      "path": "0"
    },
    "4143": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2917,
        2940
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4144": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2890,
        2940
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4145": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1076"
    },
    "4148": {
      "branch": 54,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4149": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4151": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4152": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4156": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4158": {
      "op": "SHL"
    },
    "4159": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4160": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4161": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4163": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4165": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4166": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "ADD",
      "path": "0"
    },
    "4167": {
      "op": "MSTORE"
    },
    "4168": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "4170": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4172": {
      "op": "DUP3"
    },
    "4173": {
      "op": "ADD"
    },
    "4174": {
      "op": "MSTORE"
    },
    "4175": {
      "op": "PUSH23",
      "value": "0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959"
    },
    "4199": {
      "op": "PUSH1",
      "value": "0x4A"
    },
    "4201": {
      "op": "SHL"
    },
    "4202": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4204": {
      "op": "DUP3"
    },
    "4205": {
      "op": "ADD"
    },
    "4206": {
      "op": "MSTORE"
    },
    "4207": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4209": {
      "op": "ADD"
    },
    "4210": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "4213": {
      "op": "JUMP"
    },
    "4214": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2869,
        2989
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4215": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4217": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4219": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4221": {
      "op": "SHL"
    },
    "4222": {
      "op": "SUB"
    },
    "4223": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 32
    },
    "4224": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "AND",
      "path": "0"
    },
    "4225": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4227": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4228": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4229": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4230": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3014
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4232": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4234": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4235": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4237": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4238": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3021
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4239": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3029
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4241": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3029
      ],
      "op": "ADD",
      "path": "0"
    },
    "4242": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3029
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4243": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3029
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4245": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3008,
        3029
      ],
      "op": "AND",
      "path": "0"
    },
    "4246": {
      "branch": 55,
      "fn": "Voting.giveRightToVote",
      "offset": [
        3007,
        3029
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4247": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10DB"
    },
    "4250": {
      "branch": 55,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4251": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4253": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4254": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4258": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4260": {
      "op": "SHL"
    },
    "4261": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4262": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4263": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4265": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4267": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4268": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "ADD",
      "path": "0"
    },
    "4269": {
      "op": "MSTORE"
    },
    "4270": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "4272": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4274": {
      "op": "DUP3"
    },
    "4275": {
      "op": "ADD"
    },
    "4276": {
      "op": "MSTORE"
    },
    "4277": {
      "op": "PUSH22",
      "value": "0x566F7465722063616E20616C726561647920766F7465"
    },
    "4300": {
      "op": "PUSH1",
      "value": "0x50"
    },
    "4302": {
      "op": "SHL"
    },
    "4303": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4305": {
      "op": "DUP3"
    },
    "4306": {
      "op": "ADD"
    },
    "4307": {
      "op": "MSTORE"
    },
    "4308": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4310": {
      "op": "ADD"
    },
    "4311": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38D"
    },
    "4314": {
      "op": "JUMP"
    },
    "4315": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2999,
        3056
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4316": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4318": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4320": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4322": {
      "op": "SHL"
    },
    "4323": {
      "op": "SUB"
    },
    "4324": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 33
    },
    "4325": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "AND",
      "path": "0"
    },
    "4326": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4328": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4329": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4330": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4331": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3090,
        3094
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4333": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4335": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4336": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4337": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4338": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4340": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4341": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4342": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3079
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4343": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4345": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3087
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4346": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3087
      ],
      "op": "ADD",
      "path": "0"
    },
    "4347": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4348": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4349": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4351": {
      "op": "NOT"
    },
    "4352": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "AND",
      "path": "0"
    },
    "4353": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4354": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4355": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "OR",
      "path": "0"
    },
    "4356": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4357": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4358": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3066,
        3094
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4359": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 34
    },
    "4360": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4361": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1114"
    },
    "4364": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4365": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4366": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "ADD",
      "path": "0"
    },
    "4367": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4368": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1195"
    },
    "4371": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        3104,
        3125
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4372": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4373": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3104,
        3125
      ],
      "op": "POP",
      "path": "0"
    },
    "4374": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3156,
        3174
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 35,
      "value": "0x111E"
    },
    "4377": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3169,
        3173
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4378": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3156,
        3168
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5ED"
    },
    "4381": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        3156,
        3174
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4382": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3156,
        3174
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4383": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4385": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4387": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4389": {
      "op": "SHL"
    },
    "4390": {
      "op": "SUB"
    },
    "4391": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4392": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "AND",
      "path": "0"
    },
    "4393": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4395": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4396": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4397": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4398": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3141
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4400": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4402": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4403": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4404": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4405": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4407": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4408": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4409": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4410": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3153
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4411": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3153
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4412": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3153
      ],
      "op": "ADD",
      "path": "0"
    },
    "4413": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3174
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4414": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3174
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4415": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3174
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4416": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3174
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4417": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3184,
        3203
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 36,
      "value": "0x3"
    },
    "4419": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3184,
        3203
      ],
      "op": "ADD",
      "path": "0"
    },
    "4420": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3184,
        3214
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4421": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3184,
        3214
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4422": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "4425": {
      "op": "NOT"
    },
    "4426": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3224,
        3254
      ],
      "op": "AND",
      "path": "0",
      "statement": 37
    },
    "4427": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3224,
        3254
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4428": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3224,
        3254
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4429": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 38
    },
    "4430": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4431": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4432": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4433": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4434": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3279,
        3293
      ],
      "op": "PUSH6",
      "path": "0",
      "value": "0x9184E72A000"
    },
    "4441": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3279,
        3293
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4442": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4443": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4444": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4445": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4446": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3279,
        3293
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4447": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4448": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3135,
        3148
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4449": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "CALL",
      "path": "0"
    },
    "4450": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "4451": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "POP",
      "path": "0"
    },
    "4452": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "POP",
      "path": "0"
    },
    "4453": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "POP",
      "path": "0"
    },
    "4454": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "POP",
      "path": "0"
    },
    "4455": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4456": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4457": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4458": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1177"
    },
    "4461": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4462": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4463": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4465": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4466": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "4467": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4468": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4470": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "REVERT",
      "path": "0"
    },
    "4471": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4472": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3264,
        3294
      ],
      "op": "POP",
      "path": "0"
    },
    "4473": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3319,
        3320
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 39,
      "value": "0x1"
    },
    "4475": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3315
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4477": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3315
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4479": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4480": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4481": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4482": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x118B"
    },
    "4485": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4486": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4487": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x172E"
    },
    "4490": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        3304,
        3320
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4491": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4492": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4493": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4494": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3320
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4495": {
      "op": "POP"
    },
    "4496": {
      "op": "POP"
    },
    "4497": {
      "op": "POP"
    },
    "4498": {
      "op": "POP"
    },
    "4499": {
      "op": "POP"
    },
    "4500": {
      "fn": "Voting.giveRightToVote",
      "jump": "o",
      "offset": [
        2612,
        3327
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4501": {
      "op": "JUMPDEST"
    },
    "4502": {
      "op": "DUP3"
    },
    "4503": {
      "op": "DUP1"
    },
    "4504": {
      "op": "SLOAD"
    },
    "4505": {
      "op": "PUSH2",
      "value": "0x11A1"
    },
    "4508": {
      "op": "SWAP1"
    },
    "4509": {
      "op": "PUSH2",
      "value": "0x1746"
    },
    "4512": {
      "jump": "i",
      "op": "JUMP"
    },
    "4513": {
      "op": "JUMPDEST"
    },
    "4514": {
      "op": "SWAP1"
    },
    "4515": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4517": {
      "op": "MSTORE"
    },
    "4518": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4520": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4522": {
      "op": "KECCAK256"
    },
    "4523": {
      "op": "SWAP1"
    },
    "4524": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4526": {
      "op": "ADD"
    },
    "4527": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4529": {
      "op": "SWAP1"
    },
    "4530": {
      "op": "DIV"
    },
    "4531": {
      "op": "DUP2"
    },
    "4532": {
      "op": "ADD"
    },
    "4533": {
      "op": "SWAP3"
    },
    "4534": {
      "op": "DUP3"
    },
    "4535": {
      "op": "PUSH2",
      "value": "0x11C3"
    },
    "4538": {
      "op": "JUMPI"
    },
    "4539": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4541": {
      "op": "DUP6"
    },
    "4542": {
      "op": "SSTORE"
    },
    "4543": {
      "op": "PUSH2",
      "value": "0x1209"
    },
    "4546": {
      "op": "JUMP"
    },
    "4547": {
      "op": "JUMPDEST"
    },
    "4548": {
      "op": "DUP3"
    },
    "4549": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4551": {
      "op": "LT"
    },
    "4552": {
      "op": "PUSH2",
      "value": "0x11DC"
    },
    "4555": {
      "op": "JUMPI"
    },
    "4556": {
      "op": "DUP1"
    },
    "4557": {
      "op": "MLOAD"
    },
    "4558": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4560": {
      "op": "NOT"
    },
    "4561": {
      "op": "AND"
    },
    "4562": {
      "op": "DUP4"
    },
    "4563": {
      "op": "DUP1"
    },
    "4564": {
      "op": "ADD"
    },
    "4565": {
      "op": "OR"
    },
    "4566": {
      "op": "DUP6"
    },
    "4567": {
      "op": "SSTORE"
    },
    "4568": {
      "op": "PUSH2",
      "value": "0x1209"
    },
    "4571": {
      "op": "JUMP"
    },
    "4572": {
      "op": "JUMPDEST"
    },
    "4573": {
      "op": "DUP3"
    },
    "4574": {
      "op": "DUP1"
    },
    "4575": {
      "op": "ADD"
    },
    "4576": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4578": {
      "op": "ADD"
    },
    "4579": {
      "op": "DUP6"
    },
    "4580": {
      "op": "SSTORE"
    },
    "4581": {
      "op": "DUP3"
    },
    "4582": {
      "op": "ISZERO"
    },
    "4583": {
      "op": "PUSH2",
      "value": "0x1209"
    },
    "4586": {
      "op": "JUMPI"
    },
    "4587": {
      "op": "SWAP2"
    },
    "4588": {
      "op": "DUP3"
    },
    "4589": {
      "op": "ADD"
    },
    "4590": {
      "op": "JUMPDEST"
    },
    "4591": {
      "op": "DUP3"
    },
    "4592": {
      "op": "DUP2"
    },
    "4593": {
      "op": "GT"
    },
    "4594": {
      "op": "ISZERO"
    },
    "4595": {
      "op": "PUSH2",
      "value": "0x1209"
    },
    "4598": {
      "op": "JUMPI"
    },
    "4599": {
      "op": "DUP3"
    },
    "4600": {
      "op": "MLOAD"
    },
    "4601": {
      "op": "DUP3"
    },
    "4602": {
      "op": "SSTORE"
    },
    "4603": {
      "op": "SWAP2"
    },
    "4604": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4606": {
      "op": "ADD"
    },
    "4607": {
      "op": "SWAP2"
    },
    "4608": {
      "op": "SWAP1"
    },
    "4609": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4611": {
      "op": "ADD"
    },
    "4612": {
      "op": "SWAP1"
    },
    "4613": {
      "op": "PUSH2",
      "value": "0x11EE"
    },
    "4616": {
      "op": "JUMP"
    },
    "4617": {
      "op": "JUMPDEST"
    },
    "4618": {
      "op": "POP"
    },
    "4619": {
      "op": "PUSH2",
      "value": "0x1215"
    },
    "4622": {
      "op": "SWAP3"
    },
    "4623": {
      "op": "SWAP2"
    },
    "4624": {
      "op": "POP"
    },
    "4625": {
      "op": "PUSH2",
      "value": "0x1219"
    },
    "4628": {
      "jump": "i",
      "op": "JUMP"
    },
    "4629": {
      "op": "JUMPDEST"
    },
    "4630": {
      "op": "POP"
    },
    "4631": {
      "op": "SWAP1"
    },
    "4632": {
      "jump": "o",
      "op": "JUMP"
    },
    "4633": {
      "op": "JUMPDEST"
    },
    "4634": {
      "op": "JUMPDEST"
    },
    "4635": {
      "op": "DUP1"
    },
    "4636": {
      "op": "DUP3"
    },
    "4637": {
      "op": "GT"
    },
    "4638": {
      "op": "ISZERO"
    },
    "4639": {
      "op": "PUSH2",
      "value": "0x1215"
    },
    "4642": {
      "op": "JUMPI"
    },
    "4643": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4645": {
      "op": "DUP2"
    },
    "4646": {
      "op": "SSTORE"
    },
    "4647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4649": {
      "op": "ADD"
    },
    "4650": {
      "op": "PUSH2",
      "value": "0x121A"
    },
    "4653": {
      "op": "JUMP"
    },
    "4654": {
      "op": "JUMPDEST"
    },
    "4655": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4657": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4659": {
      "op": "DUP3"
    },
    "4660": {
      "op": "DUP5"
    },
    "4661": {
      "op": "SUB"
    },
    "4662": {
      "op": "SLT"
    },
    "4663": {
      "op": "ISZERO"
    },
    "4664": {
      "op": "PUSH2",
      "value": "0x1240"
    },
    "4667": {
      "op": "JUMPI"
    },
    "4668": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4670": {
      "op": "DUP1"
    },
    "4671": {
      "op": "REVERT"
    },
    "4672": {
      "op": "JUMPDEST"
    },
    "4673": {
      "op": "POP"
    },
    "4674": {
      "op": "CALLDATALOAD"
    },
    "4675": {
      "op": "SWAP2"
    },
    "4676": {
      "op": "SWAP1"
    },
    "4677": {
      "op": "POP"
    },
    "4678": {
      "jump": "o",
      "op": "JUMP"
    },
    "4679": {
      "op": "JUMPDEST"
    },
    "4680": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4682": {
      "op": "DUP2"
    },
    "4683": {
      "op": "MLOAD"
    },
    "4684": {
      "op": "DUP1"
    },
    "4685": {
      "op": "DUP5"
    },
    "4686": {
      "op": "MSTORE"
    },
    "4687": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4689": {
      "op": "JUMPDEST"
    },
    "4690": {
      "op": "DUP2"
    },
    "4691": {
      "op": "DUP2"
    },
    "4692": {
      "op": "LT"
    },
    "4693": {
      "op": "ISZERO"
    },
    "4694": {
      "op": "PUSH2",
      "value": "0x126D"
    },
    "4697": {
      "op": "JUMPI"
    },
    "4698": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4700": {
      "op": "DUP2"
    },
    "4701": {
      "op": "DUP6"
    },
    "4702": {
      "op": "ADD"
    },
    "4703": {
      "op": "DUP2"
    },
    "4704": {
      "op": "ADD"
    },
    "4705": {
      "op": "MLOAD"
    },
    "4706": {
      "op": "DUP7"
    },
    "4707": {
      "op": "DUP4"
    },
    "4708": {
      "op": "ADD"
    },
    "4709": {
      "op": "DUP3"
    },
    "4710": {
      "op": "ADD"
    },
    "4711": {
      "op": "MSTORE"
    },
    "4712": {
      "op": "ADD"
    },
    "4713": {
      "op": "PUSH2",
      "value": "0x1251"
    },
    "4716": {
      "op": "JUMP"
    },
    "4717": {
      "op": "JUMPDEST"
    },
    "4718": {
      "op": "DUP2"
    },
    "4719": {
      "op": "DUP2"
    },
    "4720": {
      "op": "GT"
    },
    "4721": {
      "op": "ISZERO"
    },
    "4722": {
      "op": "PUSH2",
      "value": "0x127F"
    },
    "4725": {
      "op": "JUMPI"
    },
    "4726": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4728": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4730": {
      "op": "DUP4"
    },
    "4731": {
      "op": "DUP8"
    },
    "4732": {
      "op": "ADD"
    },
    "4733": {
      "op": "ADD"
    },
    "4734": {
      "op": "MSTORE"
    },
    "4735": {
      "op": "JUMPDEST"
    },
    "4736": {
      "op": "POP"
    },
    "4737": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4739": {
      "op": "ADD"
    },
    "4740": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4742": {
      "op": "NOT"
    },
    "4743": {
      "op": "AND"
    },
    "4744": {
      "op": "SWAP3"
    },
    "4745": {
      "op": "SWAP1"
    },
    "4746": {
      "op": "SWAP3"
    },
    "4747": {
      "op": "ADD"
    },
    "4748": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4750": {
      "op": "ADD"
    },
    "4751": {
      "op": "SWAP3"
    },
    "4752": {
      "op": "SWAP2"
    },
    "4753": {
      "op": "POP"
    },
    "4754": {
      "op": "POP"
    },
    "4755": {
      "jump": "o",
      "op": "JUMP"
    },
    "4756": {
      "op": "JUMPDEST"
    },
    "4757": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4759": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4761": {
      "op": "DUP1"
    },
    "4762": {
      "op": "DUP4"
    },
    "4763": {
      "op": "ADD"
    },
    "4764": {
      "op": "DUP2"
    },
    "4765": {
      "op": "DUP5"
    },
    "4766": {
      "op": "MSTORE"
    },
    "4767": {
      "op": "DUP1"
    },
    "4768": {
      "op": "DUP6"
    },
    "4769": {
      "op": "MLOAD"
    },
    "4770": {
      "op": "DUP1"
    },
    "4771": {
      "op": "DUP4"
    },
    "4772": {
      "op": "MSTORE"
    },
    "4773": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4775": {
      "op": "SWAP3"
    },
    "4776": {
      "op": "POP"
    },
    "4777": {
      "op": "DUP3"
    },
    "4778": {
      "op": "DUP7"
    },
    "4779": {
      "op": "ADD"
    },
    "4780": {
      "op": "SWAP2"
    },
    "4781": {
      "op": "POP"
    },
    "4782": {
      "op": "DUP3"
    },
    "4783": {
      "op": "DUP2"
    },
    "4784": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "4786": {
      "op": "SHL"
    },
    "4787": {
      "op": "DUP8"
    },
    "4788": {
      "op": "ADD"
    },
    "4789": {
      "op": "ADD"
    },
    "4790": {
      "op": "DUP5"
    },
    "4791": {
      "op": "DUP9"
    },
    "4792": {
      "op": "ADD"
    },
    "4793": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4795": {
      "op": "JUMPDEST"
    },
    "4796": {
      "op": "DUP4"
    },
    "4797": {
      "op": "DUP2"
    },
    "4798": {
      "op": "LT"
    },
    "4799": {
      "op": "ISZERO"
    },
    "4800": {
      "op": "PUSH2",
      "value": "0x1321"
    },
    "4803": {
      "op": "JUMPI"
    },
    "4804": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "4806": {
      "op": "NOT"
    },
    "4807": {
      "op": "DUP10"
    },
    "4808": {
      "op": "DUP5"
    },
    "4809": {
      "op": "SUB"
    },
    "4810": {
      "op": "ADD"
    },
    "4811": {
      "op": "DUP6"
    },
    "4812": {
      "op": "MSTORE"
    },
    "4813": {
      "op": "DUP2"
    },
    "4814": {
      "op": "MLOAD"
    },
    "4815": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4817": {
      "op": "DUP2"
    },
    "4818": {
      "op": "MLOAD"
    },
    "4819": {
      "op": "DUP2"
    },
    "4820": {
      "op": "DUP7"
    },
    "4821": {
      "op": "MSTORE"
    },
    "4822": {
      "op": "PUSH2",
      "value": "0x12E1"
    },
    "4825": {
      "op": "DUP3"
    },
    "4826": {
      "op": "DUP8"
    },
    "4827": {
      "op": "ADD"
    },
    "4828": {
      "op": "DUP3"
    },
    "4829": {
      "op": "PUSH2",
      "value": "0x1247"
    },
    "4832": {
      "jump": "i",
      "op": "JUMP"
    },
    "4833": {
      "op": "JUMPDEST"
    },
    "4834": {
      "op": "SWAP2"
    },
    "4835": {
      "op": "POP"
    },
    "4836": {
      "op": "POP"
    },
    "4837": {
      "op": "DUP9"
    },
    "4838": {
      "op": "DUP3"
    },
    "4839": {
      "op": "ADD"
    },
    "4840": {
      "op": "MLOAD"
    },
    "4841": {
      "op": "DUP6"
    },
    "4842": {
      "op": "DUP3"
    },
    "4843": {
      "op": "SUB"
    },
    "4844": {
      "op": "DUP11"
    },
    "4845": {
      "op": "DUP8"
    },
    "4846": {
      "op": "ADD"
    },
    "4847": {
      "op": "MSTORE"
    },
    "4848": {
      "op": "PUSH2",
      "value": "0x12F9"
    },
    "4851": {
      "op": "DUP3"
    },
    "4852": {
      "op": "DUP3"
    },
    "4853": {
      "op": "PUSH2",
      "value": "0x1247"
    },
    "4856": {
      "jump": "i",
      "op": "JUMP"
    },
    "4857": {
      "op": "JUMPDEST"
    },
    "4858": {
      "op": "DUP4"
    },
    "4859": {
      "op": "DUP11"
    },
    "4860": {
      "op": "ADD"
    },
    "4861": {
      "op": "MLOAD"
    },
    "4862": {
      "op": "DUP8"
    },
    "4863": {
      "op": "DUP12"
    },
    "4864": {
      "op": "ADD"
    },
    "4865": {
      "op": "MSTORE"
    },
    "4866": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4868": {
      "op": "SWAP4"
    },
    "4869": {
      "op": "DUP5"
    },
    "4870": {
      "op": "ADD"
    },
    "4871": {
      "op": "MLOAD"
    },
    "4872": {
      "op": "SWAP4"
    },
    "4873": {
      "op": "SWAP1"
    },
    "4874": {
      "op": "SWAP7"
    },
    "4875": {
      "op": "ADD"
    },
    "4876": {
      "op": "SWAP3"
    },
    "4877": {
      "op": "SWAP1"
    },
    "4878": {
      "op": "SWAP3"
    },
    "4879": {
      "op": "MSTORE"
    },
    "4880": {
      "op": "POP"
    },
    "4881": {
      "op": "POP"
    },
    "4882": {
      "op": "SWAP4"
    },
    "4883": {
      "op": "DUP7"
    },
    "4884": {
      "op": "ADD"
    },
    "4885": {
      "op": "SWAP4"
    },
    "4886": {
      "op": "SWAP1"
    },
    "4887": {
      "op": "DUP7"
    },
    "4888": {
      "op": "ADD"
    },
    "4889": {
      "op": "SWAP1"
    },
    "4890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4892": {
      "op": "ADD"
    },
    "4893": {
      "op": "PUSH2",
      "value": "0x12BB"
    },
    "4896": {
      "op": "JUMP"
    },
    "4897": {
      "op": "JUMPDEST"
    },
    "4898": {
      "op": "POP"
    },
    "4899": {
      "op": "SWAP1"
    },
    "4900": {
      "op": "SWAP9"
    },
    "4901": {
      "op": "SWAP8"
    },
    "4902": {
      "op": "POP"
    },
    "4903": {
      "op": "POP"
    },
    "4904": {
      "op": "POP"
    },
    "4905": {
      "op": "POP"
    },
    "4906": {
      "op": "POP"
    },
    "4907": {
      "op": "POP"
    },
    "4908": {
      "op": "POP"
    },
    "4909": {
      "op": "POP"
    },
    "4910": {
      "jump": "o",
      "op": "JUMP"
    },
    "4911": {
      "op": "JUMPDEST"
    },
    "4912": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4917": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4919": {
      "op": "SHL"
    },
    "4920": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4922": {
      "op": "MSTORE"
    },
    "4923": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "4925": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4927": {
      "op": "MSTORE"
    },
    "4928": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4930": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4932": {
      "op": "REVERT"
    },
    "4933": {
      "op": "JUMPDEST"
    },
    "4934": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4936": {
      "op": "MLOAD"
    },
    "4937": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4939": {
      "op": "DUP2"
    },
    "4940": {
      "op": "ADD"
    },
    "4941": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4950": {
      "op": "DUP2"
    },
    "4951": {
      "op": "GT"
    },
    "4952": {
      "op": "DUP3"
    },
    "4953": {
      "op": "DUP3"
    },
    "4954": {
      "op": "LT"
    },
    "4955": {
      "op": "OR"
    },
    "4956": {
      "op": "ISZERO"
    },
    "4957": {
      "op": "PUSH2",
      "value": "0x1368"
    },
    "4960": {
      "op": "JUMPI"
    },
    "4961": {
      "op": "PUSH2",
      "value": "0x1368"
    },
    "4964": {
      "op": "PUSH2",
      "value": "0x132F"
    },
    "4967": {
      "jump": "i",
      "op": "JUMP"
    },
    "4968": {
      "op": "JUMPDEST"
    },
    "4969": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4971": {
      "op": "MSTORE"
    },
    "4972": {
      "op": "SWAP1"
    },
    "4973": {
      "jump": "o",
      "op": "JUMP"
    },
    "4974": {
      "op": "JUMPDEST"
    },
    "4975": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4977": {
      "op": "MLOAD"
    },
    "4978": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4980": {
      "op": "DUP3"
    },
    "4981": {
      "op": "ADD"
    },
    "4982": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4984": {
      "op": "NOT"
    },
    "4985": {
      "op": "AND"
    },
    "4986": {
      "op": "DUP2"
    },
    "4987": {
      "op": "ADD"
    },
    "4988": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4997": {
      "op": "DUP2"
    },
    "4998": {
      "op": "GT"
    },
    "4999": {
      "op": "DUP3"
    },
    "5000": {
      "op": "DUP3"
    },
    "5001": {
      "op": "LT"
    },
    "5002": {
      "op": "OR"
    },
    "5003": {
      "op": "ISZERO"
    },
    "5004": {
      "op": "PUSH2",
      "value": "0x1397"
    },
    "5007": {
      "op": "JUMPI"
    },
    "5008": {
      "op": "PUSH2",
      "value": "0x1397"
    },
    "5011": {
      "op": "PUSH2",
      "value": "0x132F"
    },
    "5014": {
      "jump": "i",
      "op": "JUMP"
    },
    "5015": {
      "op": "JUMPDEST"
    },
    "5016": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5018": {
      "op": "MSTORE"
    },
    "5019": {
      "op": "SWAP2"
    },
    "5020": {
      "op": "SWAP1"
    },
    "5021": {
      "op": "POP"
    },
    "5022": {
      "jump": "o",
      "op": "JUMP"
    },
    "5023": {
      "op": "JUMPDEST"
    },
    "5024": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5026": {
      "op": "DUP3"
    },
    "5027": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5029": {
      "op": "DUP4"
    },
    "5030": {
      "op": "ADD"
    },
    "5031": {
      "op": "SLT"
    },
    "5032": {
      "op": "PUSH2",
      "value": "0x13B0"
    },
    "5035": {
      "op": "JUMPI"
    },
    "5036": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5038": {
      "op": "DUP1"
    },
    "5039": {
      "op": "REVERT"
    },
    "5040": {
      "op": "JUMPDEST"
    },
    "5041": {
      "op": "DUP2"
    },
    "5042": {
      "op": "CALLDATALOAD"
    },
    "5043": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5052": {
      "op": "DUP2"
    },
    "5053": {
      "op": "GT"
    },
    "5054": {
      "op": "ISZERO"
    },
    "5055": {
      "op": "PUSH2",
      "value": "0x13CA"
    },
    "5058": {
      "op": "JUMPI"
    },
    "5059": {
      "op": "PUSH2",
      "value": "0x13CA"
    },
    "5062": {
      "op": "PUSH2",
      "value": "0x132F"
    },
    "5065": {
      "jump": "i",
      "op": "JUMP"
    },
    "5066": {
      "op": "JUMPDEST"
    },
    "5067": {
      "op": "PUSH2",
      "value": "0x13DD"
    },
    "5070": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5072": {
      "op": "DUP3"
    },
    "5073": {
      "op": "ADD"
    },
    "5074": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5076": {
      "op": "NOT"
    },
    "5077": {
      "op": "AND"
    },
    "5078": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5080": {
      "op": "ADD"
    },
    "5081": {
      "op": "PUSH2",
      "value": "0x136E"
    },
    "5084": {
      "jump": "i",
      "op": "JUMP"
    },
    "5085": {
      "op": "JUMPDEST"
    },
    "5086": {
      "op": "DUP2"
    },
    "5087": {
      "op": "DUP2"
    },
    "5088": {
      "op": "MSTORE"
    },
    "5089": {
      "op": "DUP5"
    },
    "5090": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5092": {
      "op": "DUP4"
    },
    "5093": {
      "op": "DUP7"
    },
    "5094": {
      "op": "ADD"
    },
    "5095": {
      "op": "ADD"
    },
    "5096": {
      "op": "GT"
    },
    "5097": {
      "op": "ISZERO"
    },
    "5098": {
      "op": "PUSH2",
      "value": "0x13F2"
    },
    "5101": {
      "op": "JUMPI"
    },
    "5102": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5104": {
      "op": "DUP1"
    },
    "5105": {
      "op": "REVERT"
    },
    "5106": {
      "op": "JUMPDEST"
    },
    "5107": {
      "op": "DUP2"
    },
    "5108": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5110": {
      "op": "DUP6"
    },
    "5111": {
      "op": "ADD"
    },
    "5112": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5114": {
      "op": "DUP4"
    },
    "5115": {
      "op": "ADD"
    },
    "5116": {
      "op": "CALLDATACOPY"
    },
    "5117": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5119": {
      "op": "SWAP2"
    },
    "5120": {
      "op": "DUP2"
    },
    "5121": {
      "op": "ADD"
    },
    "5122": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5124": {
      "op": "ADD"
    },
    "5125": {
      "op": "SWAP2"
    },
    "5126": {
      "op": "SWAP1"
    },
    "5127": {
      "op": "SWAP2"
    },
    "5128": {
      "op": "MSTORE"
    },
    "5129": {
      "op": "SWAP4"
    },
    "5130": {
      "op": "SWAP3"
    },
    "5131": {
      "op": "POP"
    },
    "5132": {
      "op": "POP"
    },
    "5133": {
      "op": "POP"
    },
    "5134": {
      "jump": "o",
      "op": "JUMP"
    },
    "5135": {
      "op": "JUMPDEST"
    },
    "5136": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5138": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5140": {
      "op": "DUP3"
    },
    "5141": {
      "op": "DUP5"
    },
    "5142": {
      "op": "SUB"
    },
    "5143": {
      "op": "SLT"
    },
    "5144": {
      "op": "ISZERO"
    },
    "5145": {
      "op": "PUSH2",
      "value": "0x1421"
    },
    "5148": {
      "op": "JUMPI"
    },
    "5149": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5151": {
      "op": "DUP1"
    },
    "5152": {
      "op": "REVERT"
    },
    "5153": {
      "op": "JUMPDEST"
    },
    "5154": {
      "op": "DUP2"
    },
    "5155": {
      "op": "CALLDATALOAD"
    },
    "5156": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5165": {
      "op": "DUP2"
    },
    "5166": {
      "op": "GT"
    },
    "5167": {
      "op": "ISZERO"
    },
    "5168": {
      "op": "PUSH2",
      "value": "0x1438"
    },
    "5171": {
      "op": "JUMPI"
    },
    "5172": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5174": {
      "op": "DUP1"
    },
    "5175": {
      "op": "REVERT"
    },
    "5176": {
      "op": "JUMPDEST"
    },
    "5177": {
      "op": "PUSH2",
      "value": "0x1444"
    },
    "5180": {
      "op": "DUP5"
    },
    "5181": {
      "op": "DUP3"
    },
    "5182": {
      "op": "DUP6"
    },
    "5183": {
      "op": "ADD"
    },
    "5184": {
      "op": "PUSH2",
      "value": "0x139F"
    },
    "5187": {
      "jump": "i",
      "op": "JUMP"
    },
    "5188": {
      "op": "JUMPDEST"
    },
    "5189": {
      "op": "SWAP5"
    },
    "5190": {
      "op": "SWAP4"
    },
    "5191": {
      "op": "POP"
    },
    "5192": {
      "op": "POP"
    },
    "5193": {
      "op": "POP"
    },
    "5194": {
      "op": "POP"
    },
    "5195": {
      "jump": "o",
      "op": "JUMP"
    },
    "5196": {
      "op": "JUMPDEST"
    },
    "5197": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5199": {
      "op": "DUP2"
    },
    "5200": {
      "op": "MSTORE"
    },
    "5201": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5203": {
      "op": "PUSH2",
      "value": "0x145F"
    },
    "5206": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5208": {
      "op": "DUP4"
    },
    "5209": {
      "op": "ADD"
    },
    "5210": {
      "op": "DUP8"
    },
    "5211": {
      "op": "PUSH2",
      "value": "0x1247"
    },
    "5214": {
      "jump": "i",
      "op": "JUMP"
    },
    "5215": {
      "op": "JUMPDEST"
    },
    "5216": {
      "op": "DUP3"
    },
    "5217": {
      "op": "DUP2"
    },
    "5218": {
      "op": "SUB"
    },
    "5219": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5221": {
      "op": "DUP5"
    },
    "5222": {
      "op": "ADD"
    },
    "5223": {
      "op": "MSTORE"
    },
    "5224": {
      "op": "PUSH2",
      "value": "0x1471"
    },
    "5227": {
      "op": "DUP2"
    },
    "5228": {
      "op": "DUP8"
    },
    "5229": {
      "op": "PUSH2",
      "value": "0x1247"
    },
    "5232": {
      "jump": "i",
      "op": "JUMP"
    },
    "5233": {
      "op": "JUMPDEST"
    },
    "5234": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5236": {
      "op": "DUP5"
    },
    "5237": {
      "op": "ADD"
    },
    "5238": {
      "op": "SWAP6"
    },
    "5239": {
      "op": "SWAP1"
    },
    "5240": {
      "op": "SWAP6"
    },
    "5241": {
      "op": "MSTORE"
    },
    "5242": {
      "op": "POP"
    },
    "5243": {
      "op": "POP"
    },
    "5244": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5246": {
      "op": "ADD"
    },
    "5247": {
      "op": "MSTORE"
    },
    "5248": {
      "op": "SWAP3"
    },
    "5249": {
      "op": "SWAP2"
    },
    "5250": {
      "op": "POP"
    },
    "5251": {
      "op": "POP"
    },
    "5252": {
      "jump": "o",
      "op": "JUMP"
    },
    "5253": {
      "op": "JUMPDEST"
    },
    "5254": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5256": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5258": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5260": {
      "op": "SHL"
    },
    "5261": {
      "op": "SUB"
    },
    "5262": {
      "op": "DUP2"
    },
    "5263": {
      "op": "AND"
    },
    "5264": {
      "op": "DUP2"
    },
    "5265": {
      "op": "EQ"
    },
    "5266": {
      "op": "PUSH2",
      "value": "0x149A"
    },
    "5269": {
      "op": "JUMPI"
    },
    "5270": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5272": {
      "op": "DUP1"
    },
    "5273": {
      "op": "REVERT"
    },
    "5274": {
      "op": "JUMPDEST"
    },
    "5275": {
      "op": "POP"
    },
    "5276": {
      "jump": "o",
      "op": "JUMP"
    },
    "5277": {
      "op": "JUMPDEST"
    },
    "5278": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5280": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5282": {
      "op": "DUP3"
    },
    "5283": {
      "op": "DUP5"
    },
    "5284": {
      "op": "SUB"
    },
    "5285": {
      "op": "SLT"
    },
    "5286": {
      "op": "ISZERO"
    },
    "5287": {
      "op": "PUSH2",
      "value": "0x14AF"
    },
    "5290": {
      "op": "JUMPI"
    },
    "5291": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5293": {
      "op": "DUP1"
    },
    "5294": {
      "op": "REVERT"
    },
    "5295": {
      "op": "JUMPDEST"
    },
    "5296": {
      "op": "DUP2"
    },
    "5297": {
      "op": "CALLDATALOAD"
    },
    "5298": {
      "op": "PUSH2",
      "value": "0x14BA"
    },
    "5301": {
      "op": "DUP2"
    },
    "5302": {
      "op": "PUSH2",
      "value": "0x1485"
    },
    "5305": {
      "jump": "i",
      "op": "JUMP"
    },
    "5306": {
      "op": "JUMPDEST"
    },
    "5307": {
      "op": "SWAP4"
    },
    "5308": {
      "op": "SWAP3"
    },
    "5309": {
      "op": "POP"
    },
    "5310": {
      "op": "POP"
    },
    "5311": {
      "op": "POP"
    },
    "5312": {
      "jump": "o",
      "op": "JUMP"
    },
    "5313": {
      "op": "JUMPDEST"
    },
    "5314": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5316": {
      "op": "DUP2"
    },
    "5317": {
      "op": "MSTORE"
    },
    "5318": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5320": {
      "op": "PUSH2",
      "value": "0x14D4"
    },
    "5323": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5325": {
      "op": "DUP4"
    },
    "5326": {
      "op": "ADD"
    },
    "5327": {
      "op": "DUP6"
    },
    "5328": {
      "op": "PUSH2",
      "value": "0x1247"
    },
    "5331": {
      "jump": "i",
      "op": "JUMP"
    },
    "5332": {
      "op": "JUMPDEST"
    },
    "5333": {
      "op": "SWAP1"
    },
    "5334": {
      "op": "POP"
    },
    "5335": {
      "op": "DUP3"
    },
    "5336": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5338": {
      "op": "DUP4"
    },
    "5339": {
      "op": "ADD"
    },
    "5340": {
      "op": "MSTORE"
    },
    "5341": {
      "op": "SWAP4"
    },
    "5342": {
      "op": "SWAP3"
    },
    "5343": {
      "op": "POP"
    },
    "5344": {
      "op": "POP"
    },
    "5345": {
      "op": "POP"
    },
    "5346": {
      "jump": "o",
      "op": "JUMP"
    },
    "5347": {
      "op": "JUMPDEST"
    },
    "5348": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5350": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5352": {
      "op": "DUP1"
    },
    "5353": {
      "op": "DUP4"
    },
    "5354": {
      "op": "DUP6"
    },
    "5355": {
      "op": "SUB"
    },
    "5356": {
      "op": "SLT"
    },
    "5357": {
      "op": "ISZERO"
    },
    "5358": {
      "op": "PUSH2",
      "value": "0x14F6"
    },
    "5361": {
      "op": "JUMPI"
    },
    "5362": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5364": {
      "op": "DUP1"
    },
    "5365": {
      "op": "REVERT"
    },
    "5366": {
      "op": "JUMPDEST"
    },
    "5367": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5376": {
      "op": "DUP1"
    },
    "5377": {
      "op": "DUP5"
    },
    "5378": {
      "op": "CALLDATALOAD"
    },
    "5379": {
      "op": "GT"
    },
    "5380": {
      "op": "ISZERO"
    },
    "5381": {
      "op": "PUSH2",
      "value": "0x150D"
    },
    "5384": {
      "op": "JUMPI"
    },
    "5385": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5387": {
      "op": "DUP1"
    },
    "5388": {
      "op": "REVERT"
    },
    "5389": {
      "op": "JUMPDEST"
    },
    "5390": {
      "op": "DUP4"
    },
    "5391": {
      "op": "CALLDATALOAD"
    },
    "5392": {
      "op": "DUP5"
    },
    "5393": {
      "op": "ADD"
    },
    "5394": {
      "op": "DUP6"
    },
    "5395": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5397": {
      "op": "DUP3"
    },
    "5398": {
      "op": "ADD"
    },
    "5399": {
      "op": "SLT"
    },
    "5400": {
      "op": "PUSH2",
      "value": "0x1520"
    },
    "5403": {
      "op": "JUMPI"
    },
    "5404": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5406": {
      "op": "DUP1"
    },
    "5407": {
      "op": "REVERT"
    },
    "5408": {
      "op": "JUMPDEST"
    },
    "5409": {
      "op": "DUP1"
    },
    "5410": {
      "op": "CALLDATALOAD"
    },
    "5411": {
      "op": "DUP3"
    },
    "5412": {
      "op": "DUP2"
    },
    "5413": {
      "op": "GT"
    },
    "5414": {
      "op": "ISZERO"
    },
    "5415": {
      "op": "PUSH2",
      "value": "0x1532"
    },
    "5418": {
      "op": "JUMPI"
    },
    "5419": {
      "op": "PUSH2",
      "value": "0x1532"
    },
    "5422": {
      "op": "PUSH2",
      "value": "0x132F"
    },
    "5425": {
      "jump": "i",
      "op": "JUMP"
    },
    "5426": {
      "op": "JUMPDEST"
    },
    "5427": {
      "op": "DUP1"
    },
    "5428": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "5430": {
      "op": "SHL"
    },
    "5431": {
      "op": "PUSH2",
      "value": "0x1541"
    },
    "5434": {
      "op": "DUP6"
    },
    "5435": {
      "op": "DUP3"
    },
    "5436": {
      "op": "ADD"
    },
    "5437": {
      "op": "PUSH2",
      "value": "0x136E"
    },
    "5440": {
      "jump": "i",
      "op": "JUMP"
    },
    "5441": {
      "op": "JUMPDEST"
    },
    "5442": {
      "op": "SWAP2"
    },
    "5443": {
      "op": "DUP3"
    },
    "5444": {
      "op": "MSTORE"
    },
    "5445": {
      "op": "DUP3"
    },
    "5446": {
      "op": "DUP2"
    },
    "5447": {
      "op": "ADD"
    },
    "5448": {
      "op": "DUP6"
    },
    "5449": {
      "op": "ADD"
    },
    "5450": {
      "op": "SWAP2"
    },
    "5451": {
      "op": "DUP6"
    },
    "5452": {
      "op": "DUP2"
    },
    "5453": {
      "op": "ADD"
    },
    "5454": {
      "op": "SWAP1"
    },
    "5455": {
      "op": "DUP10"
    },
    "5456": {
      "op": "DUP5"
    },
    "5457": {
      "op": "GT"
    },
    "5458": {
      "op": "ISZERO"
    },
    "5459": {
      "op": "PUSH2",
      "value": "0x155B"
    },
    "5462": {
      "op": "JUMPI"
    },
    "5463": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5465": {
      "op": "DUP1"
    },
    "5466": {
      "op": "REVERT"
    },
    "5467": {
      "op": "JUMPDEST"
    },
    "5468": {
      "op": "DUP7"
    },
    "5469": {
      "op": "DUP6"
    },
    "5470": {
      "op": "ADD"
    },
    "5471": {
      "op": "SWAP3"
    },
    "5472": {
      "op": "POP"
    },
    "5473": {
      "op": "JUMPDEST"
    },
    "5474": {
      "op": "DUP4"
    },
    "5475": {
      "op": "DUP4"
    },
    "5476": {
      "op": "LT"
    },
    "5477": {
      "op": "ISZERO"
    },
    "5478": {
      "op": "PUSH2",
      "value": "0x15ED"
    },
    "5481": {
      "op": "JUMPI"
    },
    "5482": {
      "op": "DUP6"
    },
    "5483": {
      "op": "DUP4"
    },
    "5484": {
      "op": "CALLDATALOAD"
    },
    "5485": {
      "op": "GT"
    },
    "5486": {
      "op": "ISZERO"
    },
    "5487": {
      "op": "PUSH2",
      "value": "0x1577"
    },
    "5490": {
      "op": "JUMPI"
    },
    "5491": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5493": {
      "op": "DUP1"
    },
    "5494": {
      "op": "REVERT"
    },
    "5495": {
      "op": "JUMPDEST"
    },
    "5496": {
      "op": "DUP3"
    },
    "5497": {
      "op": "CALLDATALOAD"
    },
    "5498": {
      "op": "DUP6"
    },
    "5499": {
      "op": "ADD"
    },
    "5500": {
      "op": "DUP11"
    },
    "5501": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "5503": {
      "op": "DUP3"
    },
    "5504": {
      "op": "ADD"
    },
    "5505": {
      "op": "SLT"
    },
    "5506": {
      "op": "PUSH2",
      "value": "0x158A"
    },
    "5509": {
      "op": "JUMPI"
    },
    "5510": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5512": {
      "op": "DUP1"
    },
    "5513": {
      "op": "REVERT"
    },
    "5514": {
      "op": "JUMPDEST"
    },
    "5515": {
      "op": "PUSH2",
      "value": "0x1592"
    },
    "5518": {
      "op": "PUSH2",
      "value": "0x1345"
    },
    "5521": {
      "jump": "i",
      "op": "JUMP"
    },
    "5522": {
      "op": "JUMPDEST"
    },
    "5523": {
      "op": "DUP1"
    },
    "5524": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5526": {
      "op": "DUP4"
    },
    "5527": {
      "op": "ADD"
    },
    "5528": {
      "op": "DUP14"
    },
    "5529": {
      "op": "DUP2"
    },
    "5530": {
      "op": "GT"
    },
    "5531": {
      "op": "ISZERO"
    },
    "5532": {
      "op": "PUSH2",
      "value": "0x15A4"
    },
    "5535": {
      "op": "JUMPI"
    },
    "5536": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5538": {
      "op": "DUP1"
    },
    "5539": {
      "op": "REVERT"
    },
    "5540": {
      "op": "JUMPDEST"
    },
    "5541": {
      "op": "DUP11"
    },
    "5542": {
      "op": "DUP5"
    },
    "5543": {
      "op": "ADD"
    },
    "5544": {
      "op": "JUMPDEST"
    },
    "5545": {
      "op": "DUP2"
    },
    "5546": {
      "op": "DUP2"
    },
    "5547": {
      "op": "LT"
    },
    "5548": {
      "op": "ISZERO"
    },
    "5549": {
      "op": "PUSH2",
      "value": "0x15DA"
    },
    "5552": {
      "op": "JUMPI"
    },
    "5553": {
      "op": "DUP11"
    },
    "5554": {
      "op": "DUP2"
    },
    "5555": {
      "op": "CALLDATALOAD"
    },
    "5556": {
      "op": "GT"
    },
    "5557": {
      "op": "ISZERO"
    },
    "5558": {
      "op": "PUSH2",
      "value": "0x15BE"
    },
    "5561": {
      "op": "JUMPI"
    },
    "5562": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5564": {
      "op": "DUP1"
    },
    "5565": {
      "op": "REVERT"
    },
    "5566": {
      "op": "JUMPDEST"
    },
    "5567": {
      "op": "PUSH2",
      "value": "0x15CD"
    },
    "5570": {
      "op": "DUP16"
    },
    "5571": {
      "op": "DUP14"
    },
    "5572": {
      "op": "DUP4"
    },
    "5573": {
      "op": "CALLDATALOAD"
    },
    "5574": {
      "op": "DUP9"
    },
    "5575": {
      "op": "ADD"
    },
    "5576": {
      "op": "ADD"
    },
    "5577": {
      "op": "PUSH2",
      "value": "0x139F"
    },
    "5580": {
      "jump": "i",
      "op": "JUMP"
    },
    "5581": {
      "op": "JUMPDEST"
    },
    "5582": {
      "op": "DUP5"
    },
    "5583": {
      "op": "MSTORE"
    },
    "5584": {
      "op": "SWAP3"
    },
    "5585": {
      "op": "DUP12"
    },
    "5586": {
      "op": "ADD"
    },
    "5587": {
      "op": "SWAP3"
    },
    "5588": {
      "op": "DUP12"
    },
    "5589": {
      "op": "ADD"
    },
    "5590": {
      "op": "PUSH2",
      "value": "0x15A8"
    },
    "5593": {
      "op": "JUMP"
    },
    "5594": {
      "op": "JUMPDEST"
    },
    "5595": {
      "op": "POP"
    },
    "5596": {
      "op": "POP"
    },
    "5597": {
      "op": "DUP5"
    },
    "5598": {
      "op": "MSTORE"
    },
    "5599": {
      "op": "POP"
    },
    "5600": {
      "op": "POP"
    },
    "5601": {
      "op": "SWAP2"
    },
    "5602": {
      "op": "DUP7"
    },
    "5603": {
      "op": "ADD"
    },
    "5604": {
      "op": "SWAP2"
    },
    "5605": {
      "op": "SWAP1"
    },
    "5606": {
      "op": "DUP7"
    },
    "5607": {
      "op": "ADD"
    },
    "5608": {
      "op": "SWAP1"
    },
    "5609": {
      "op": "PUSH2",
      "value": "0x1561"
    },
    "5612": {
      "op": "JUMP"
    },
    "5613": {
      "op": "JUMPDEST"
    },
    "5614": {
      "op": "SWAP10"
    },
    "5615": {
      "op": "SWAP9"
    },
    "5616": {
      "op": "POP"
    },
    "5617": {
      "op": "POP"
    },
    "5618": {
      "op": "POP"
    },
    "5619": {
      "op": "POP"
    },
    "5620": {
      "op": "POP"
    },
    "5621": {
      "op": "POP"
    },
    "5622": {
      "op": "POP"
    },
    "5623": {
      "op": "POP"
    },
    "5624": {
      "op": "POP"
    },
    "5625": {
      "jump": "o",
      "op": "JUMP"
    },
    "5626": {
      "op": "JUMPDEST"
    },
    "5627": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5629": {
      "op": "DUP2"
    },
    "5630": {
      "op": "MSTORE"
    },
    "5631": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5633": {
      "op": "PUSH2",
      "value": "0x160D"
    },
    "5636": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5638": {
      "op": "DUP4"
    },
    "5639": {
      "op": "ADD"
    },
    "5640": {
      "op": "DUP7"
    },
    "5641": {
      "op": "PUSH2",
      "value": "0x1247"
    },
    "5644": {
      "jump": "i",
      "op": "JUMP"
    },
    "5645": {
      "op": "JUMPDEST"
    },
    "5646": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5648": {
      "op": "DUP4"
    },
    "5649": {
      "op": "ADD"
    },
    "5650": {
      "op": "SWAP5"
    },
    "5651": {
      "op": "SWAP1"
    },
    "5652": {
      "op": "SWAP5"
    },
    "5653": {
      "op": "MSTORE"
    },
    "5654": {
      "op": "POP"
    },
    "5655": {
      "op": "SWAP1"
    },
    "5656": {
      "op": "ISZERO"
    },
    "5657": {
      "op": "ISZERO"
    },
    "5658": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5660": {
      "op": "SWAP1"
    },
    "5661": {
      "op": "SWAP2"
    },
    "5662": {
      "op": "ADD"
    },
    "5663": {
      "op": "MSTORE"
    },
    "5664": {
      "op": "SWAP2"
    },
    "5665": {
      "op": "SWAP1"
    },
    "5666": {
      "op": "POP"
    },
    "5667": {
      "jump": "o",
      "op": "JUMP"
    },
    "5668": {
      "op": "JUMPDEST"
    },
    "5669": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5671": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5673": {
      "op": "DUP1"
    },
    "5674": {
      "op": "DUP4"
    },
    "5675": {
      "op": "ADD"
    },
    "5676": {
      "op": "DUP2"
    },
    "5677": {
      "op": "DUP5"
    },
    "5678": {
      "op": "MSTORE"
    },
    "5679": {
      "op": "DUP1"
    },
    "5680": {
      "op": "DUP6"
    },
    "5681": {
      "op": "MLOAD"
    },
    "5682": {
      "op": "DUP1"
    },
    "5683": {
      "op": "DUP4"
    },
    "5684": {
      "op": "MSTORE"
    },
    "5685": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5687": {
      "op": "SWAP3"
    },
    "5688": {
      "op": "POP"
    },
    "5689": {
      "op": "DUP3"
    },
    "5690": {
      "op": "DUP7"
    },
    "5691": {
      "op": "ADD"
    },
    "5692": {
      "op": "SWAP2"
    },
    "5693": {
      "op": "POP"
    },
    "5694": {
      "op": "DUP3"
    },
    "5695": {
      "op": "DUP2"
    },
    "5696": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "5698": {
      "op": "SHL"
    },
    "5699": {
      "op": "DUP8"
    },
    "5700": {
      "op": "ADD"
    },
    "5701": {
      "op": "ADD"
    },
    "5702": {
      "op": "DUP5"
    },
    "5703": {
      "op": "DUP9"
    },
    "5704": {
      "op": "ADD"
    },
    "5705": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5707": {
      "op": "JUMPDEST"
    },
    "5708": {
      "op": "DUP4"
    },
    "5709": {
      "op": "DUP2"
    },
    "5710": {
      "op": "LT"
    },
    "5711": {
      "op": "ISZERO"
    },
    "5712": {
      "op": "PUSH2",
      "value": "0x1321"
    },
    "5715": {
      "op": "JUMPI"
    },
    "5716": {
      "op": "DUP9"
    },
    "5717": {
      "op": "DUP4"
    },
    "5718": {
      "op": "SUB"
    },
    "5719": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "5721": {
      "op": "NOT"
    },
    "5722": {
      "op": "ADD"
    },
    "5723": {
      "op": "DUP6"
    },
    "5724": {
      "op": "MSTORE"
    },
    "5725": {
      "op": "DUP2"
    },
    "5726": {
      "op": "MLOAD"
    },
    "5727": {
      "op": "DUP1"
    },
    "5728": {
      "op": "MLOAD"
    },
    "5729": {
      "op": "DUP8"
    },
    "5730": {
      "op": "DUP6"
    },
    "5731": {
      "op": "MSTORE"
    },
    "5732": {
      "op": "PUSH2",
      "value": "0x166F"
    },
    "5735": {
      "op": "DUP9"
    },
    "5736": {
      "op": "DUP7"
    },
    "5737": {
      "op": "ADD"
    },
    "5738": {
      "op": "DUP3"
    },
    "5739": {
      "op": "PUSH2",
      "value": "0x1247"
    },
    "5742": {
      "jump": "i",
      "op": "JUMP"
    },
    "5743": {
      "op": "JUMPDEST"
    },
    "5744": {
      "op": "SWAP2"
    },
    "5745": {
      "op": "DUP10"
    },
    "5746": {
      "op": "ADD"
    },
    "5747": {
      "op": "MLOAD"
    },
    "5748": {
      "op": "SWAP5"
    },
    "5749": {
      "op": "DUP10"
    },
    "5750": {
      "op": "ADD"
    },
    "5751": {
      "op": "SWAP5"
    },
    "5752": {
      "op": "SWAP1"
    },
    "5753": {
      "op": "SWAP5"
    },
    "5754": {
      "op": "MSTORE"
    },
    "5755": {
      "op": "SWAP5"
    },
    "5756": {
      "op": "DUP8"
    },
    "5757": {
      "op": "ADD"
    },
    "5758": {
      "op": "SWAP5"
    },
    "5759": {
      "op": "SWAP3"
    },
    "5760": {
      "op": "POP"
    },
    "5761": {
      "op": "SWAP1"
    },
    "5762": {
      "op": "DUP7"
    },
    "5763": {
      "op": "ADD"
    },
    "5764": {
      "op": "SWAP1"
    },
    "5765": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5767": {
      "op": "ADD"
    },
    "5768": {
      "op": "PUSH2",
      "value": "0x164B"
    },
    "5771": {
      "op": "JUMP"
    },
    "5772": {
      "op": "JUMPDEST"
    },
    "5773": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5775": {
      "op": "DUP1"
    },
    "5776": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5778": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5780": {
      "op": "DUP5"
    },
    "5781": {
      "op": "DUP7"
    },
    "5782": {
      "op": "SUB"
    },
    "5783": {
      "op": "SLT"
    },
    "5784": {
      "op": "ISZERO"
    },
    "5785": {
      "op": "PUSH2",
      "value": "0x16A1"
    },
    "5788": {
      "op": "JUMPI"
    },
    "5789": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5791": {
      "op": "DUP1"
    },
    "5792": {
      "op": "REVERT"
    },
    "5793": {
      "op": "JUMPDEST"
    },
    "5794": {
      "op": "DUP4"
    },
    "5795": {
      "op": "CALLDATALOAD"
    },
    "5796": {
      "op": "PUSH2",
      "value": "0x16AC"
    },
    "5799": {
      "op": "DUP2"
    },
    "5800": {
      "op": "PUSH2",
      "value": "0x1485"
    },
    "5803": {
      "jump": "i",
      "op": "JUMP"
    },
    "5804": {
      "op": "JUMPDEST"
    },
    "5805": {
      "op": "SWAP3"
    },
    "5806": {
      "op": "POP"
    },
    "5807": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5809": {
      "op": "DUP5"
    },
    "5810": {
      "op": "ADD"
    },
    "5811": {
      "op": "CALLDATALOAD"
    },
    "5812": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5821": {
      "op": "DUP1"
    },
    "5822": {
      "op": "DUP3"
    },
    "5823": {
      "op": "GT"
    },
    "5824": {
      "op": "ISZERO"
    },
    "5825": {
      "op": "PUSH2",
      "value": "0x16C9"
    },
    "5828": {
      "op": "JUMPI"
    },
    "5829": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5831": {
      "op": "DUP1"
    },
    "5832": {
      "op": "REVERT"
    },
    "5833": {
      "op": "JUMPDEST"
    },
    "5834": {
      "op": "PUSH2",
      "value": "0x16D5"
    },
    "5837": {
      "op": "DUP8"
    },
    "5838": {
      "op": "DUP4"
    },
    "5839": {
      "op": "DUP9"
    },
    "5840": {
      "op": "ADD"
    },
    "5841": {
      "op": "PUSH2",
      "value": "0x139F"
    },
    "5844": {
      "jump": "i",
      "op": "JUMP"
    },
    "5845": {
      "op": "JUMPDEST"
    },
    "5846": {
      "op": "SWAP4"
    },
    "5847": {
      "op": "POP"
    },
    "5848": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5850": {
      "op": "DUP7"
    },
    "5851": {
      "op": "ADD"
    },
    "5852": {
      "op": "CALLDATALOAD"
    },
    "5853": {
      "op": "SWAP2"
    },
    "5854": {
      "op": "POP"
    },
    "5855": {
      "op": "DUP1"
    },
    "5856": {
      "op": "DUP3"
    },
    "5857": {
      "op": "GT"
    },
    "5858": {
      "op": "ISZERO"
    },
    "5859": {
      "op": "PUSH2",
      "value": "0x16EB"
    },
    "5862": {
      "op": "JUMPI"
    },
    "5863": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5865": {
      "op": "DUP1"
    },
    "5866": {
      "op": "REVERT"
    },
    "5867": {
      "op": "JUMPDEST"
    },
    "5868": {
      "op": "POP"
    },
    "5869": {
      "op": "PUSH2",
      "value": "0x16F8"
    },
    "5872": {
      "op": "DUP7"
    },
    "5873": {
      "op": "DUP3"
    },
    "5874": {
      "op": "DUP8"
    },
    "5875": {
      "op": "ADD"
    },
    "5876": {
      "op": "PUSH2",
      "value": "0x139F"
    },
    "5879": {
      "jump": "i",
      "op": "JUMP"
    },
    "5880": {
      "op": "JUMPDEST"
    },
    "5881": {
      "op": "SWAP2"
    },
    "5882": {
      "op": "POP"
    },
    "5883": {
      "op": "POP"
    },
    "5884": {
      "op": "SWAP3"
    },
    "5885": {
      "op": "POP"
    },
    "5886": {
      "op": "SWAP3"
    },
    "5887": {
      "op": "POP"
    },
    "5888": {
      "op": "SWAP3"
    },
    "5889": {
      "jump": "o",
      "op": "JUMP"
    },
    "5890": {
      "op": "JUMPDEST"
    },
    "5891": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5896": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5898": {
      "op": "SHL"
    },
    "5899": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5901": {
      "op": "MSTORE"
    },
    "5902": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "5904": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5906": {
      "op": "MSTORE"
    },
    "5907": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5909": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5911": {
      "op": "REVERT"
    },
    "5912": {
      "op": "JUMPDEST"
    },
    "5913": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5918": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5920": {
      "op": "SHL"
    },
    "5921": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5923": {
      "op": "MSTORE"
    },
    "5924": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "5926": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5928": {
      "op": "MSTORE"
    },
    "5929": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5931": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5933": {
      "op": "REVERT"
    },
    "5934": {
      "op": "JUMPDEST"
    },
    "5935": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5937": {
      "op": "DUP3"
    },
    "5938": {
      "op": "NOT"
    },
    "5939": {
      "op": "DUP3"
    },
    "5940": {
      "op": "GT"
    },
    "5941": {
      "op": "ISZERO"
    },
    "5942": {
      "op": "PUSH2",
      "value": "0x1741"
    },
    "5945": {
      "op": "JUMPI"
    },
    "5946": {
      "op": "PUSH2",
      "value": "0x1741"
    },
    "5949": {
      "op": "PUSH2",
      "value": "0x1718"
    },
    "5952": {
      "jump": "i",
      "op": "JUMP"
    },
    "5953": {
      "op": "JUMPDEST"
    },
    "5954": {
      "op": "POP"
    },
    "5955": {
      "op": "ADD"
    },
    "5956": {
      "op": "SWAP1"
    },
    "5957": {
      "jump": "o",
      "op": "JUMP"
    },
    "5958": {
      "op": "JUMPDEST"
    },
    "5959": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5961": {
      "op": "DUP2"
    },
    "5962": {
      "op": "DUP2"
    },
    "5963": {
      "op": "SHR"
    },
    "5964": {
      "op": "SWAP1"
    },
    "5965": {
      "op": "DUP3"
    },
    "5966": {
      "op": "AND"
    },
    "5967": {
      "op": "DUP1"
    },
    "5968": {
      "op": "PUSH2",
      "value": "0x175A"
    },
    "5971": {
      "op": "JUMPI"
    },
    "5972": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "5974": {
      "op": "DUP3"
    },
    "5975": {
      "op": "AND"
    },
    "5976": {
      "op": "SWAP2"
    },
    "5977": {
      "op": "POP"
    },
    "5978": {
      "op": "JUMPDEST"
    },
    "5979": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5981": {
      "op": "DUP3"
    },
    "5982": {
      "op": "LT"
    },
    "5983": {
      "op": "DUP2"
    },
    "5984": {
      "op": "EQ"
    },
    "5985": {
      "op": "ISZERO"
    },
    "5986": {
      "op": "PUSH2",
      "value": "0x177B"
    },
    "5989": {
      "op": "JUMPI"
    },
    "5990": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5995": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5997": {
      "op": "SHL"
    },
    "5998": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6000": {
      "op": "MSTORE"
    },
    "6001": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "6003": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6005": {
      "op": "MSTORE"
    },
    "6006": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6008": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6010": {
      "op": "REVERT"
    },
    "6011": {
      "op": "JUMPDEST"
    },
    "6012": {
      "op": "POP"
    },
    "6013": {
      "op": "SWAP2"
    },
    "6014": {
      "op": "SWAP1"
    },
    "6015": {
      "op": "POP"
    },
    "6016": {
      "jump": "o",
      "op": "JUMP"
    },
    "6017": {
      "op": "JUMPDEST"
    },
    "6018": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6020": {
      "op": "DUP3"
    },
    "6021": {
      "op": "DUP3"
    },
    "6022": {
      "op": "LT"
    },
    "6023": {
      "op": "ISZERO"
    },
    "6024": {
      "op": "PUSH2",
      "value": "0x1793"
    },
    "6027": {
      "op": "JUMPI"
    },
    "6028": {
      "op": "PUSH2",
      "value": "0x1793"
    },
    "6031": {
      "op": "PUSH2",
      "value": "0x1718"
    },
    "6034": {
      "jump": "i",
      "op": "JUMP"
    },
    "6035": {
      "op": "JUMPDEST"
    },
    "6036": {
      "op": "POP"
    },
    "6037": {
      "op": "SUB"
    },
    "6038": {
      "op": "SWAP1"
    },
    "6039": {
      "jump": "o",
      "op": "JUMP"
    },
    "6040": {
      "op": "JUMPDEST"
    },
    "6041": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6043": {
      "op": "DUP2"
    },
    "6044": {
      "op": "DUP2"
    },
    "6045": {
      "op": "JUMPDEST"
    },
    "6046": {
      "op": "DUP1"
    },
    "6047": {
      "op": "DUP6"
    },
    "6048": {
      "op": "GT"
    },
    "6049": {
      "op": "ISZERO"
    },
    "6050": {
      "op": "PUSH2",
      "value": "0x17D3"
    },
    "6053": {
      "op": "JUMPI"
    },
    "6054": {
      "op": "DUP2"
    },
    "6055": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6057": {
      "op": "NOT"
    },
    "6058": {
      "op": "DIV"
    },
    "6059": {
      "op": "DUP3"
    },
    "6060": {
      "op": "GT"
    },
    "6061": {
      "op": "ISZERO"
    },
    "6062": {
      "op": "PUSH2",
      "value": "0x17B9"
    },
    "6065": {
      "op": "JUMPI"
    },
    "6066": {
      "op": "PUSH2",
      "value": "0x17B9"
    },
    "6069": {
      "op": "PUSH2",
      "value": "0x1718"
    },
    "6072": {
      "jump": "i",
      "op": "JUMP"
    },
    "6073": {
      "op": "JUMPDEST"
    },
    "6074": {
      "op": "DUP1"
    },
    "6075": {
      "op": "DUP6"
    },
    "6076": {
      "op": "AND"
    },
    "6077": {
      "op": "ISZERO"
    },
    "6078": {
      "op": "PUSH2",
      "value": "0x17C6"
    },
    "6081": {
      "op": "JUMPI"
    },
    "6082": {
      "op": "SWAP2"
    },
    "6083": {
      "op": "DUP2"
    },
    "6084": {
      "op": "MUL"
    },
    "6085": {
      "op": "SWAP2"
    },
    "6086": {
      "op": "JUMPDEST"
    },
    "6087": {
      "op": "SWAP4"
    },
    "6088": {
      "op": "DUP5"
    },
    "6089": {
      "op": "SHR"
    },
    "6090": {
      "op": "SWAP4"
    },
    "6091": {
      "op": "SWAP1"
    },
    "6092": {
      "op": "DUP1"
    },
    "6093": {
      "op": "MUL"
    },
    "6094": {
      "op": "SWAP1"
    },
    "6095": {
      "op": "PUSH2",
      "value": "0x179D"
    },
    "6098": {
      "op": "JUMP"
    },
    "6099": {
      "op": "JUMPDEST"
    },
    "6100": {
      "op": "POP"
    },
    "6101": {
      "op": "SWAP3"
    },
    "6102": {
      "op": "POP"
    },
    "6103": {
      "op": "SWAP3"
    },
    "6104": {
      "op": "SWAP1"
    },
    "6105": {
      "op": "POP"
    },
    "6106": {
      "jump": "o",
      "op": "JUMP"
    },
    "6107": {
      "op": "JUMPDEST"
    },
    "6108": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6110": {
      "op": "DUP3"
    },
    "6111": {
      "op": "PUSH2",
      "value": "0x17EA"
    },
    "6114": {
      "op": "JUMPI"
    },
    "6115": {
      "op": "POP"
    },
    "6116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6118": {
      "op": "PUSH2",
      "value": "0x1878"
    },
    "6121": {
      "op": "JUMP"
    },
    "6122": {
      "op": "JUMPDEST"
    },
    "6123": {
      "op": "DUP2"
    },
    "6124": {
      "op": "PUSH2",
      "value": "0x17F7"
    },
    "6127": {
      "op": "JUMPI"
    },
    "6128": {
      "op": "POP"
    },
    "6129": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6131": {
      "op": "PUSH2",
      "value": "0x1878"
    },
    "6134": {
      "op": "JUMP"
    },
    "6135": {
      "op": "JUMPDEST"
    },
    "6136": {
      "op": "DUP2"
    },
    "6137": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6139": {
      "op": "DUP2"
    },
    "6140": {
      "op": "EQ"
    },
    "6141": {
      "op": "PUSH2",
      "value": "0x180D"
    },
    "6144": {
      "op": "JUMPI"
    },
    "6145": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "6147": {
      "op": "DUP2"
    },
    "6148": {
      "op": "EQ"
    },
    "6149": {
      "op": "PUSH2",
      "value": "0x1817"
    },
    "6152": {
      "op": "JUMPI"
    },
    "6153": {
      "op": "PUSH2",
      "value": "0x1833"
    },
    "6156": {
      "op": "JUMP"
    },
    "6157": {
      "op": "JUMPDEST"
    },
    "6158": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6160": {
      "op": "SWAP2"
    },
    "6161": {
      "op": "POP"
    },
    "6162": {
      "op": "POP"
    },
    "6163": {
      "op": "PUSH2",
      "value": "0x1878"
    },
    "6166": {
      "op": "JUMP"
    },
    "6167": {
      "op": "JUMPDEST"
    },
    "6168": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6170": {
      "op": "DUP5"
    },
    "6171": {
      "op": "GT"
    },
    "6172": {
      "op": "ISZERO"
    },
    "6173": {
      "op": "PUSH2",
      "value": "0x1828"
    },
    "6176": {
      "op": "JUMPI"
    },
    "6177": {
      "op": "PUSH2",
      "value": "0x1828"
    },
    "6180": {
      "op": "PUSH2",
      "value": "0x1718"
    },
    "6183": {
      "jump": "i",
      "op": "JUMP"
    },
    "6184": {
      "op": "JUMPDEST"
    },
    "6185": {
      "op": "POP"
    },
    "6186": {
      "op": "POP"
    },
    "6187": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6189": {
      "op": "DUP3"
    },
    "6190": {
      "op": "SHL"
    },
    "6191": {
      "op": "PUSH2",
      "value": "0x1878"
    },
    "6194": {
      "op": "JUMP"
    },
    "6195": {
      "op": "JUMPDEST"
    },
    "6196": {
      "op": "POP"
    },
    "6197": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6199": {
      "op": "DUP4"
    },
    "6200": {
      "op": "LT"
    },
    "6201": {
      "op": "PUSH2",
      "value": "0x133"
    },
    "6204": {
      "op": "DUP4"
    },
    "6205": {
      "op": "LT"
    },
    "6206": {
      "op": "AND"
    },
    "6207": {
      "op": "PUSH1",
      "value": "0x4E"
    },
    "6209": {
      "op": "DUP5"
    },
    "6210": {
      "op": "LT"
    },
    "6211": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "6213": {
      "op": "DUP5"
    },
    "6214": {
      "op": "LT"
    },
    "6215": {
      "op": "AND"
    },
    "6216": {
      "op": "OR"
    },
    "6217": {
      "op": "ISZERO"
    },
    "6218": {
      "op": "PUSH2",
      "value": "0x1856"
    },
    "6221": {
      "op": "JUMPI"
    },
    "6222": {
      "op": "POP"
    },
    "6223": {
      "op": "DUP2"
    },
    "6224": {
      "op": "DUP2"
    },
    "6225": {
      "op": "EXP"
    },
    "6226": {
      "op": "PUSH2",
      "value": "0x1878"
    },
    "6229": {
      "op": "JUMP"
    },
    "6230": {
      "op": "JUMPDEST"
    },
    "6231": {
      "op": "PUSH2",
      "value": "0x1860"
    },
    "6234": {
      "op": "DUP4"
    },
    "6235": {
      "op": "DUP4"
    },
    "6236": {
      "op": "PUSH2",
      "value": "0x1798"
    },
    "6239": {
      "jump": "i",
      "op": "JUMP"
    },
    "6240": {
      "op": "JUMPDEST"
    },
    "6241": {
      "op": "DUP1"
    },
    "6242": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6244": {
      "op": "NOT"
    },
    "6245": {
      "op": "DIV"
    },
    "6246": {
      "op": "DUP3"
    },
    "6247": {
      "op": "GT"
    },
    "6248": {
      "op": "ISZERO"
    },
    "6249": {
      "op": "PUSH2",
      "value": "0x1874"
    },
    "6252": {
      "op": "JUMPI"
    },
    "6253": {
      "op": "PUSH2",
      "value": "0x1874"
    },
    "6256": {
      "op": "PUSH2",
      "value": "0x1718"
    },
    "6259": {
      "jump": "i",
      "op": "JUMP"
    },
    "6260": {
      "op": "JUMPDEST"
    },
    "6261": {
      "op": "MUL"
    },
    "6262": {
      "op": "SWAP1"
    },
    "6263": {
      "op": "POP"
    },
    "6264": {
      "op": "JUMPDEST"
    },
    "6265": {
      "op": "SWAP3"
    },
    "6266": {
      "op": "SWAP2"
    },
    "6267": {
      "op": "POP"
    },
    "6268": {
      "op": "POP"
    },
    "6269": {
      "jump": "o",
      "op": "JUMP"
    },
    "6270": {
      "op": "JUMPDEST"
    },
    "6271": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6273": {
      "op": "PUSH2",
      "value": "0x14BA"
    },
    "6276": {
      "op": "DUP4"
    },
    "6277": {
      "op": "DUP4"
    },
    "6278": {
      "op": "PUSH2",
      "value": "0x17DB"
    },
    "6281": {
      "jump": "i",
      "op": "JUMP"
    },
    "6282": {
      "op": "JUMPDEST"
    },
    "6283": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6285": {
      "op": "DUP2"
    },
    "6286": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6288": {
      "op": "NOT"
    },
    "6289": {
      "op": "DIV"
    },
    "6290": {
      "op": "DUP4"
    },
    "6291": {
      "op": "GT"
    },
    "6292": {
      "op": "DUP3"
    },
    "6293": {
      "op": "ISZERO"
    },
    "6294": {
      "op": "ISZERO"
    },
    "6295": {
      "op": "AND"
    },
    "6296": {
      "op": "ISZERO"
    },
    "6297": {
      "op": "PUSH2",
      "value": "0x18A4"
    },
    "6300": {
      "op": "JUMPI"
    },
    "6301": {
      "op": "PUSH2",
      "value": "0x18A4"
    },
    "6304": {
      "op": "PUSH2",
      "value": "0x1718"
    },
    "6307": {
      "jump": "i",
      "op": "JUMP"
    },
    "6308": {
      "op": "JUMPDEST"
    },
    "6309": {
      "op": "POP"
    },
    "6310": {
      "op": "MUL"
    },
    "6311": {
      "op": "SWAP1"
    },
    "6312": {
      "jump": "o",
      "op": "JUMP"
    },
    "6313": {
      "op": "JUMPDEST"
    },
    "6314": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6316": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6318": {
      "op": "NOT"
    },
    "6319": {
      "op": "DUP3"
    },
    "6320": {
      "op": "EQ"
    },
    "6321": {
      "op": "ISZERO"
    },
    "6322": {
      "op": "PUSH2",
      "value": "0x18BD"
    },
    "6325": {
      "op": "JUMPI"
    },
    "6326": {
      "op": "PUSH2",
      "value": "0x18BD"
    },
    "6329": {
      "op": "PUSH2",
      "value": "0x1718"
    },
    "6332": {
      "jump": "i",
      "op": "JUMP"
    },
    "6333": {
      "op": "JUMPDEST"
    },
    "6334": {
      "op": "POP"
    },
    "6335": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6337": {
      "op": "ADD"
    },
    "6338": {
      "op": "SWAP1"
    },
    "6339": {
      "jump": "o",
      "op": "JUMP"
    },
    "6340": {
      "op": "JUMPDEST"
    },
    "6341": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6343": {
      "op": "DUP1"
    },
    "6344": {
      "op": "DUP3"
    },
    "6345": {
      "op": "MSTORE"
    },
    "6346": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "6348": {
      "op": "SWAP1"
    },
    "6349": {
      "op": "DUP3"
    },
    "6350": {
      "op": "ADD"
    },
    "6351": {
      "op": "MSTORE"
    },
    "6352": {
      "op": "PUSH32",
      "value": "0x4F6E6C792063686169726D616E2063616E206769766520746865207269676874"
    },
    "6385": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6387": {
      "op": "DUP3"
    },
    "6388": {
      "op": "ADD"
    },
    "6389": {
      "op": "MSTORE"
    },
    "6390": {
      "op": "PUSH8",
      "value": "0x20746F20766F7465"
    },
    "6399": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "6401": {
      "op": "SHL"
    },
    "6402": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6404": {
      "op": "DUP3"
    },
    "6405": {
      "op": "ADD"
    },
    "6406": {
      "op": "MSTORE"
    },
    "6407": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6409": {
      "op": "ADD"
    },
    "6410": {
      "op": "SWAP1"
    },
    "6411": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "1d4da284b3a81377d53caa7434a640999197ceea",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\npragma abicoder v2;\n\ncontract Voting {\n    struct Voter {\n        string id;\n        uint area;\n        bool canVote;\n        bool[2] voted;\n    }\n\n    struct Party {\n        string name;\n        uint256 voteCount;\n    }\n\n    struct Candidate {\n        string name;\n        string party;\n        uint area;\n        uint256 voteCount;\n    }\n\n    address public chairperson;\n    mapping(address => Voter) public voters;\n    uint256 voter_count = 0;\n    Candidate[] public candidates;\n    Party[] public parties;\n\n    constructor(\n        string[3][] memory candidateNamesParty,\n        string[] memory partyNames\n    ) payable {\n        chairperson = msg.sender;\n        voters[chairperson].canVote = true;\n        for (uint256 i = 0; i < candidateNamesParty.length; i++) {\n            candidates.push(\n                Candidate({\n                    name: candidateNamesParty[i][0],\n                    party: candidateNamesParty[i][1],\n                    area: stringToUint(candidateNamesParty[i][2]),\n                    voteCount: 0\n                })\n            );\n        }\n        for (uint256 i = 0; i < partyNames.length; i++) {\n            parties.push(Party({name: partyNames[i], voteCount: 0}));\n        }\n        voter_count += 1;\n    }\n\n    function stringToUint(string memory numString) public pure returns(uint) {\n            uint  val=0;\n            bytes   memory stringBytes = bytes(numString);\n            for (uint  i =  0; i<stringBytes.length; i++) {\n                uint exp = stringBytes.length - i;\n                bytes1 ival = stringBytes[i];\n                uint8 uval = uint8(ival);\n            uint jval = uval - uint(0x30);\n    \n            val +=  (uint(jval) * (10**(exp-1))); \n            }\n        return val;\n        }\n    function addCandidates(string[3][] memory candidateNamesParty) external {\n        require(\n            msg.sender == chairperson,\n            \"Only chairman can give the right to vote\"\n        );\n        for (uint256 i = 0; i < candidateNamesParty.length; i++) {\n            candidates.push(\n                Candidate({\n                    name: candidateNamesParty[i][0],\n                    party: candidateNamesParty[i][1],\n                    area: stringToUint(candidateNamesParty[i][2]),\n                    voteCount: 0\n                })\n            );\n        }\n    }\n\n    function getCandidates() public view returns (Candidate[] memory) {\n        return candidates;\n    }\n\n    function getParties() public view returns (Party[] memory) {\n        return parties;\n    }\n\n    function giveRightToVote(\n        address payable voter,\n        string memory id,\n        string memory area\n    ) external {\n        require(\n            msg.sender == chairperson,\n            \"Only chairman can give the right to vote\"\n        );\n        require(\n            !voters[voter].voted[0] || !voters[voter].voted[1],\n            \"The voter already voted\"\n        );\n        require(!voters[voter].canVote, \"Voter can already vote\");\n        voters[voter].canVote = true;\n        voters[voter].id = id;\n        voters[voter].area = stringToUint(area);\n        voters[voter].voted[0] = false;\n        voters[voter].voted[1] = false;\n        voter.transfer(10000000000000);\n        voter_count += 1;\n    }\n    \n\n    function removeRightToVote(address voter) external {\n        require(\n            msg.sender == chairperson,\n            \"Only chairman can give denounce right to vote\"\n        );\n        require(\n            !voters[voter].voted[0] || !voters[voter].voted[1],\n            \"The voter already voted\"\n        );\n        require(voters[voter].canVote, \"Voter doesn't have right to vote\");\n        voters[voter].canVote = false;\n        voter_count -= 1;\n    }\n\n    function voteCandidate(uint256 candidate) external {\n        Voter storage sender = voters[msg.sender];\n        require(sender.canVote, \"Has no right to vote\");\n        require(!sender.voted[0], \"already voted for candidate\");\n        require(sender.area == candidates[candidate].area, \"cannot vote candidate in this area\");\n        candidates[candidate].voteCount += 1;\n        sender.voted[0] = true;\n    }\n\n    function voteParty(uint256 party) external {\n        Voter storage sender = voters[msg.sender];\n        require(sender.canVote, \"Has no right to vote\");\n        require(!sender.voted[1], \"already voted for party\");\n        parties[party].voteCount += 1;\n        sender.voted[1] = true;\n    }\n\n    function winningCandidate()\n        public\n        view\n        returns (uint256 winningCandidate_)\n    {\n        uint256 winningVoteCount = 0;\n        for (uint256 i = 0; i < candidates.length; i++) {\n            if (candidates[i].voteCount > winningVoteCount) {\n                winningVoteCount = candidates[i].voteCount;\n                winningCandidate_ = i;\n            }\n        }\n    }\n\n    function winningParty() public view returns (uint256 winningParty_) {\n        uint256 winningVoteCount = 0;\n        for (uint256 i = 0; i < parties.length; i++) {\n            if (parties[i].voteCount > winningVoteCount) {\n                winningVoteCount = parties[i].voteCount;\n                winningParty_ = i;\n            }\n        }\n    }\n\n    function voters_count() public view returns (uint256) {\n        return voter_count;\n    }\n\n    function fund() public payable {}\n\n    function get_balance() public view returns(uint256){\n        return address(this).balance;\n    }\n}\n",
  "sourceMap": "89:5401:0:-:0;;;512:1;490:23;;583:734;;;;;;;;;;;;;;;;;;:::i;:::-;703:11;:24;;-1:-1:-1;;;;;;703:24:0;717:10;703:24;;;;;737:19;;703:24;737:19;;;;;;;:27;;:34;;-1:-1:-1;;737:34:0;;;;;;781:366;805:19;:26;801:1;:30;781:366;;;852:10;885:237;;;;;;;;923:19;943:1;923:22;;;;;;;;:::i;:::-;;;;;;;946:1;923:25;;;;;;;:::i;:::-;;;;;885:237;;;;977:19;997:1;977:22;;;;;;;;:::i;:::-;;;;;;;1000:1;977:25;;;;;;;:::i;:::-;;;;;885:237;;;;1030:39;1043:19;1063:1;1043:22;;;;;;;;:::i;:::-;;;;;;;1066:1;1043:25;;;;;;;:::i;:::-;;;;;1030:12;:39::i;:::-;885:237;;1102:1;885:237;;;;;;;852:284;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;852:284:0;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;852:284:0;;;;;;;;;;;;;;;;;;833:3;;;;:::i;:::-;;;;781:366;;;;1161:9;1156:129;1180:10;:17;1176:1;:21;1156:129;;;1218:7;1231:42;;;;;;;;1244:10;1255:1;1244:13;;;;;;;;:::i;:::-;;;;;;;;;;;;1231:42;;1270:1;1231:42;;;;;;1218:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;1199:3;;;;;:::i;:::-;;;;1156:129;;;;1309:1;1294:11;;:16;;;;;;;:::i;:::-;;;;-1:-1:-1;89:5401:0;;-1:-1:-1;;;89:5401:0;1323:500;1390:4;;1470:9;1390:4;1494:299;1515:11;:18;1513:1;:20;1494:299;;;1558:8;1590:1;1569:11;:18;:22;;;;:::i;:::-;1558:33;;1609:11;1623;1635:1;1623:14;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;1623:14:0;;1655:10;1705:17;1717:4;1623:14;1705:17;:::i;:::-;1693:29;-1:-1:-1;1769:5:0;1773:1;1769:3;:5;:::i;:::-;1764:11;;:2;:11;:::i;:::-;1750:26;;1755:4;1750:26;:::i;:::-;1741:36;;;;:::i;:::-;;;1540:253;;;;1535:3;;;;;:::i;:::-;;;;1494:299;;;-1:-1:-1;1809:3:0;;1323:500;-1:-1:-1;;;1323:500:0:o;89:5401::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;89:5401:0;;;-1:-1:-1;89:5401:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:1;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:251;218:2;212:9;260:2;248:15;;-1:-1:-1;;;;;278:34:1;;314:22;;;275:62;272:88;;;340:18;;:::i;:::-;376:2;369:22;146:251;:::o;402:275::-;473:2;467:9;538:2;519:13;;-1:-1:-1;;515:27:1;503:40;;-1:-1:-1;;;;;558:34:1;;594:22;;;555:62;552:88;;;620:18;;:::i;:::-;656:2;649:22;402:275;;-1:-1:-1;402:275:1:o;682:188::-;747:4;-1:-1:-1;;;;;769:30:1;;766:56;;;802:18;;:::i;:::-;-1:-1:-1;847:1:1;843:14;859:4;839:25;;682:188::o;875:695::-;929:5;982:3;975:4;967:6;963:17;959:27;949:55;;1000:1;997;990:12;949:55;1023:13;;-1:-1:-1;;;;;1048:26:1;;1045:52;;;1077:18;;:::i;:::-;1116:4;1144:53;1187:2;1168:13;;-1:-1:-1;;1164:27:1;1160:36;;1144:53;:::i;:::-;1222:2;1213:7;1206:19;1266:3;1261:2;1256;1248:6;1244:15;1240:24;1237:33;1234:53;;;1283:1;1280;1273:12;1234:53;1305:1;1315:134;1329:2;1326:1;1323:9;1315:134;;;1418:14;;;1414:23;;1408:30;1386:15;;;1382:24;;1375:64;1340:10;;1315:134;;;1467:2;1464:1;1461:9;1458:81;;;1527:1;1522:2;1517;1508:7;1504:16;1500:25;1493:36;1458:81;-1:-1:-1;1557:7:1;875:695;-1:-1:-1;;;;;875:695:1:o;1575:901::-;1639:5;1692:3;1685:4;1677:6;1673:17;1669:27;1659:55;;1710:1;1707;1700:12;1659:55;1739:6;1733:13;1765:4;1789:65;1805:48;1850:2;1805:48;:::i;:::-;1789:65;:::i;:::-;1888:15;;;1974:1;1970:10;;;;1958:23;;1954:32;;;1919:12;;;;1998:15;;;1995:35;;;2026:1;2023;2016:12;1995:35;2062:2;2054:6;2050:15;2074:373;2090:6;2085:3;2082:15;2074:373;;;2163:10;;-1:-1:-1;;;;;2189:35:1;;2186:125;;;2265:1;2294:2;2290;2283:14;2186:125;2336:68;2400:3;2395:2;2381:11;2373:6;2369:24;2365:33;2336:68;:::i;:::-;2324:81;;-1:-1:-1;2425:12:1;;;;2107;;2074:373;;;-1:-1:-1;2465:5:1;1575:901;-1:-1:-1;;;;;;1575:901:1:o;2481:1900::-;2653:6;2661;2714:2;2702:9;2693:7;2689:23;2685:32;2682:52;;;2730:1;2727;2720:12;2682:52;2757:16;;-1:-1:-1;;;;;2822:14:1;;;2819:34;;;2849:1;2846;2839:12;2819:34;2887:6;2876:9;2872:22;2862:32;;2932:7;2925:4;2921:2;2917:13;2913:27;2903:55;;2954:1;2951;2944:12;2903:55;2983:2;2977:9;3006:65;3022:48;3067:2;3022:48;:::i;3006:65::-;3093:3;3117:2;3112:3;3105:15;3145:4;3140:3;3136:14;3129:21;;3198:4;3192:2;3189:1;3185:10;3181:2;3177:19;3173:30;3159:44;;3226:7;3218:6;3215:19;3212:39;;;3247:1;3244;3237:12;3212:39;3279:4;3275:2;3271:13;3293:869;3309:6;3304:3;3301:15;3293:869;;;3390:3;3384:10;3426:2;3413:11;3410:19;3407:39;;;3442:1;3439;3432:12;3407:39;3469:20;;3524:2;3516:11;;3512:25;-1:-1:-1;3502:53:1;;3551:1;3548;3541:12;3502:53;3581:22;;:::i;:::-;3629:5;3667:7;3661:3;3657:2;3653:12;3650:25;3647:45;;;3688:1;3685;3678:12;3647:45;3726:4;3722:2;3718:13;3744:343;3770:3;3766:2;3762:12;3755:5;3752:23;3744:343;;;3863:5;3857:12;3907:2;3892:13;3889:21;3886:41;;;3923:1;3920;3913:12;3886:41;3958:72;4022:7;4015:4;3999:13;3995:2;3991:22;3987:33;3958:72;:::i;:::-;3944:87;;-1:-1:-1;4068:4:1;4057:16;;;;3787;3744:343;;;-1:-1:-1;4100:18:1;;-1:-1:-1;;4147:4:1;4138:14;;;;3326;3293:869;;;-1:-1:-1;4232:4:1;4217:20;;4211:27;4181:5;;-1:-1:-1;4211:27:1;-1:-1:-1;;;4250:16:1;;;4247:36;;;4279:1;4276;4269:12;4247:36;;4302:73;4367:7;4356:8;4345:9;4341:24;4302:73;:::i;:::-;4292:83;;;2481:1900;;;;;:::o;4386:127::-;4447:10;4442:3;4438:20;4435:1;4428:31;4478:4;4475:1;4468:15;4502:4;4499:1;4492:15;4518:127;4579:10;4574:3;4570:20;4567:1;4560:31;4610:4;4607:1;4600:15;4634:4;4631:1;4624:15;4650:135;4689:3;-1:-1:-1;;4710:17:1;;4707:43;;;4730:18;;:::i;:::-;-1:-1:-1;4777:1:1;4766:13;;4650:135::o;4790:128::-;4830:3;4861:1;4857:6;4854:1;4851:13;4848:39;;;4867:18;;:::i;:::-;-1:-1:-1;4903:9:1;;4790:128::o;4923:125::-;4963:4;4991:1;4988;4985:8;4982:34;;;4996:18;;:::i;:::-;-1:-1:-1;5033:9:1;;4923:125::o;5053:422::-;5142:1;5185:5;5142:1;5199:270;5220:7;5210:8;5207:21;5199:270;;;5279:4;5275:1;5271:6;5267:17;5261:4;5258:27;5255:53;;;5288:18;;:::i;:::-;5338:7;5328:8;5324:22;5321:55;;;5358:16;;;;5321:55;5437:22;;;;5397:15;;;;5199:270;;;5203:3;5053:422;;;;;:::o;5480:806::-;5529:5;5559:8;5549:80;;-1:-1:-1;5600:1:1;5614:5;;5549:80;5648:4;5638:76;;-1:-1:-1;5685:1:1;5699:5;;5638:76;5730:4;5748:1;5743:59;;;;5816:1;5811:130;;;;5723:218;;5743:59;5773:1;5764:10;;5787:5;;;5811:130;5848:3;5838:8;5835:17;5832:43;;;5855:18;;:::i;:::-;-1:-1:-1;;5911:1:1;5897:16;;5926:5;;5723:218;;6025:2;6015:8;6012:16;6006:3;6000:4;5997:13;5993:36;5987:2;5977:8;5974:16;5969:2;5963:4;5960:12;5956:35;5953:77;5950:159;;;-1:-1:-1;6062:19:1;;;6094:5;;5950:159;6141:34;6166:8;6160:4;6141:34;:::i;:::-;6211:6;6207:1;6203:6;6199:19;6190:7;6187:32;6184:58;;;6222:18;;:::i;:::-;6260:20;;-1:-1:-1;5480:806:1;;;;;:::o;6291:131::-;6351:5;6380:36;6407:8;6401:4;6380:36;:::i;:::-;6371:45;6291:131;-1:-1:-1;;;6291:131:1:o;6427:168::-;6467:7;6533:1;6529;6525:6;6521:14;6518:1;6515:21;6510:1;6503:9;6496:17;6492:45;6489:71;;;6540:18;;:::i;:::-;-1:-1:-1;6580:9:1;;6427:168::o;6600:380::-;6679:1;6675:12;;;;6722;;;6743:61;;6797:4;6789:6;6785:17;6775:27;;6743:61;6850:2;6842:6;6839:14;6819:18;6816:38;6813:161;;;6896:10;6891:3;6887:20;6884:1;6877:31;6931:4;6928:1;6921:15;6959:4;6956:1;6949:15;6813:161;;6600:380;;;:::o;:::-;89:5401:0;;;;;;",
  "sourcePath": "contracts/Voting.sol",
  "type": "contract"
}