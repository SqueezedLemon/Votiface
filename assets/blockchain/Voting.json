{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[4][]",
          "name": "candidateNamesParty",
          "type": "string[4][]"
        },
        {
          "internalType": "string[]",
          "name": "partyNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "candidate_vote_count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "party",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        }
      ],
      "name": "getCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "party",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "area",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Party[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "area",
          "type": "string"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "is_open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "parties",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "party_vote_count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "removeRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "numString",
          "type": "string"
        }
      ],
      "name": "stringToUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        }
      ],
      "name": "voteCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "party",
          "type": "uint256"
        }
      ],
      "name": "voteParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter_count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canVote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "votedForCandidate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "votedForParty",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voting_state",
      "outputs": [
        {
          "internalType": "enum Voting.VOTING_STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        }
      ],
      "name": "winningCandidate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "party",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "area",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Candidate",
          "name": "winningCandidate_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningParty",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Party",
          "name": "winningParty_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Voting.sol"
  },
  "ast": {
    "absolutePath": "contracts/Voting.sol",
    "exportedSymbols": {
      "Voting": [
        790
      ]
    },
    "id": 791,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:31:0"
      },
      {
        "id": 2,
        "literals": [
          "abicoder",
          "v2"
        ],
        "nodeType": "PragmaDirective",
        "src": "68:19:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Voting",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 790,
        "linearizedBaseContracts": [
          790
        ],
        "name": "Voting",
        "nameLocation": "98:6:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Voting.Voter",
            "id": 13,
            "members": [
              {
                "constant": false,
                "id": 4,
                "mutability": "mutable",
                "name": "id",
                "nameLocation": "141:2:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "134:9:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 3,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "134:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6,
                "mutability": "mutable",
                "name": "area",
                "nameLocation": "161:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "153:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "153:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 8,
                "mutability": "mutable",
                "name": "canVote",
                "nameLocation": "180:7:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "175:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 7,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "175:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 10,
                "mutability": "mutable",
                "name": "votedForCandidate",
                "nameLocation": "202:17:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "197:22:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 9,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "197:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 12,
                "mutability": "mutable",
                "name": "votedForParty",
                "nameLocation": "234:13:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "229:18:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 11,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "229:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Voter",
            "nameLocation": "118:5:0",
            "nodeType": "StructDefinition",
            "scope": 790,
            "src": "111:143:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Party",
            "id": 18,
            "members": [
              {
                "constant": false,
                "id": 15,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "290:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 18,
                "src": "283:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 14,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "283:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 17,
                "mutability": "mutable",
                "name": "voteCount",
                "nameLocation": "312:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 18,
                "src": "304:17:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "304:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Party",
            "nameLocation": "267:5:0",
            "nodeType": "StructDefinition",
            "scope": 790,
            "src": "260:68:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Candidate",
            "id": 29,
            "members": [
              {
                "constant": false,
                "id": 20,
                "mutability": "mutable",
                "name": "id",
                "nameLocation": "369:2:0",
                "nodeType": "VariableDeclaration",
                "scope": 29,
                "src": "361:10:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 19,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "361:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 22,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "388:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 29,
                "src": "381:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 21,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "381:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 24,
                "mutability": "mutable",
                "name": "party",
                "nameLocation": "409:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 29,
                "src": "402:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 23,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "402:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 26,
                "mutability": "mutable",
                "name": "area",
                "nameLocation": "432:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 29,
                "src": "424:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 25,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "424:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 28,
                "mutability": "mutable",
                "name": "voteCount",
                "nameLocation": "454:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 29,
                "src": "446:17:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 27,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "446:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nameLocation": "341:9:0",
            "nodeType": "StructDefinition",
            "scope": 790,
            "src": "334:136:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.VOTING_STATE",
            "id": 32,
            "members": [
              {
                "id": 30,
                "name": "OPEN",
                "nameLocation": "504:4:0",
                "nodeType": "EnumValue",
                "src": "504:4:0"
              },
              {
                "id": 31,
                "name": "CLOSED",
                "nameLocation": "518:6:0",
                "nodeType": "EnumValue",
                "src": "518:6:0"
              }
            ],
            "name": "VOTING_STATE",
            "nameLocation": "481:12:0",
            "nodeType": "EnumDefinition",
            "src": "476:54:0"
          },
          {
            "constant": false,
            "functionSelector": "938d0d0f",
            "id": 35,
            "mutability": "mutable",
            "name": "voting_state",
            "nameLocation": "556:12:0",
            "nodeType": "VariableDeclaration",
            "scope": 790,
            "src": "536:32:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_VOTING_STATE_$32",
              "typeString": "enum Voting.VOTING_STATE"
            },
            "typeName": {
              "id": 34,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 33,
                "name": "VOTING_STATE",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 32,
                "src": "536:12:0"
              },
              "referencedDeclaration": 32,
              "src": "536:12:0",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                "typeString": "enum Voting.VOTING_STATE"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2e4176cf",
            "id": 37,
            "mutability": "mutable",
            "name": "chairperson",
            "nameLocation": "590:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 790,
            "src": "575:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 36,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "575:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "a3ec138d",
            "id": 42,
            "mutability": "mutable",
            "name": "voters",
            "nameLocation": "640:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 790,
            "src": "607:39:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
              "typeString": "mapping(address => struct Voting.Voter)"
            },
            "typeName": {
              "id": 41,
              "keyType": {
                "id": 38,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "615:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "607:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                "typeString": "mapping(address => struct Voting.Voter)"
              },
              "valueType": {
                "id": 40,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 39,
                  "name": "Voter",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13,
                  "src": "626:5:0"
                },
                "referencedDeclaration": 13,
                "src": "626:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                  "typeString": "struct Voting.Voter"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "3477ee2e",
            "id": 46,
            "mutability": "mutable",
            "name": "candidates",
            "nameLocation": "676:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 790,
            "src": "657:29:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
              "typeString": "struct Voting.Candidate[]"
            },
            "typeName": {
              "baseType": {
                "id": 44,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 43,
                  "name": "Candidate",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29,
                  "src": "657:9:0"
                },
                "referencedDeclaration": 29,
                "src": "657:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$29_storage_ptr",
                  "typeString": "struct Voting.Candidate"
                }
              },
              "id": 45,
              "nodeType": "ArrayTypeName",
              "src": "657:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage_ptr",
                "typeString": "struct Voting.Candidate[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "70651a18",
            "id": 50,
            "mutability": "mutable",
            "name": "parties",
            "nameLocation": "707:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 790,
            "src": "692:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
              "typeString": "struct Voting.Party[]"
            },
            "typeName": {
              "baseType": {
                "id": 48,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 47,
                  "name": "Party",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 18,
                  "src": "692:5:0"
                },
                "referencedDeclaration": 18,
                "src": "692:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Party_$18_storage_ptr",
                  "typeString": "struct Voting.Party"
                }
              },
              "id": 49,
              "nodeType": "ArrayTypeName",
              "src": "692:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr",
                "typeString": "struct Voting.Party[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "18ca28c6",
            "id": 53,
            "mutability": "mutable",
            "name": "party_vote_count",
            "nameLocation": "735:16:0",
            "nodeType": "VariableDeclaration",
            "scope": 790,
            "src": "720:33:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 51,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "720:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 52,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "752:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "6dfbeb5a",
            "id": 56,
            "mutability": "mutable",
            "name": "candidate_vote_count",
            "nameLocation": "774:20:0",
            "nodeType": "VariableDeclaration",
            "scope": 790,
            "src": "759:37:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 54,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "759:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 55,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "795:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "beb604e0",
            "id": 59,
            "mutability": "mutable",
            "name": "voter_count",
            "nameLocation": "817:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 790,
            "src": "802:30:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 57,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "802:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 58,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "831:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 163,
              "nodeType": "Block",
              "src": "957:758:0",
              "statements": [
                {
                  "expression": {
                    "id": 73,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 70,
                      "name": "chairperson",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "967:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 71,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "981:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 72,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "981:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "967:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 74,
                  "nodeType": "ExpressionStatement",
                  "src": "967:24:0"
                },
                {
                  "expression": {
                    "id": 80,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 75,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "1001:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 77,
                        "indexExpression": {
                          "id": 76,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 37,
                          "src": "1008:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1001:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 78,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "1001:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 79,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1031:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1001:34:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 81,
                  "nodeType": "ExpressionStatement",
                  "src": "1001:34:0"
                },
                {
                  "body": {
                    "id": 133,
                    "nodeType": "Block",
                    "src": "1102:443:0",
                    "statements": [
                      {
                        "assignments": [
                          94
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 94,
                            "mutability": "mutable",
                            "name": "area",
                            "nameLocation": "1121:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 133,
                            "src": "1116:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 93,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1116:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 102,
                        "initialValue": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 96,
                                  "name": "candidateNamesParty",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 64,
                                  "src": "1141:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$4_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "string memory[4] memory[] memory"
                                  }
                                },
                                "id": 98,
                                "indexExpression": {
                                  "id": 97,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 83,
                                  "src": "1161:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1141:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_memory_ptr_$4_memory_ptr",
                                  "typeString": "string memory[4] memory"
                                }
                              },
                              "id": 100,
                              "indexExpression": {
                                "hexValue": "33",
                                "id": 99,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1164:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_3_by_1",
                                  "typeString": "int_const 3"
                                },
                                "value": "3"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1141:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 95,
                            "name": "stringToUint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 255,
                            "src": "1128:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (string memory) pure returns (uint256)"
                            }
                          },
                          "id": 101,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1128:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1116:51:0"
                      },
                      {
                        "assignments": [
                          104
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 104,
                            "mutability": "mutable",
                            "name": "id",
                            "nameLocation": "1186:2:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 133,
                            "src": "1181:7:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 103,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "1181:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 112,
                        "initialValue": {
                          "arguments": [
                            {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 106,
                                  "name": "candidateNamesParty",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 64,
                                  "src": "1204:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$4_memory_ptr_$dyn_memory_ptr",
                                    "typeString": "string memory[4] memory[] memory"
                                  }
                                },
                                "id": 108,
                                "indexExpression": {
                                  "id": 107,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 83,
                                  "src": "1224:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1204:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_memory_ptr_$4_memory_ptr",
                                  "typeString": "string memory[4] memory"
                                }
                              },
                              "id": 110,
                              "indexExpression": {
                                "hexValue": "30",
                                "id": 109,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1227:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1204:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 105,
                            "name": "stringToUint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 255,
                            "src": "1191:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                              "typeString": "function (string memory) pure returns (uint256)"
                            }
                          },
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1191:39:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1181:49:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 117,
                                  "name": "id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 104,
                                  "src": "1326:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 118,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 64,
                                      "src": "1356:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$4_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[4] memory[] memory"
                                      }
                                    },
                                    "id": 120,
                                    "indexExpression": {
                                      "id": 119,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 83,
                                      "src": "1376:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1356:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$4_memory_ptr",
                                      "typeString": "string memory[4] memory"
                                    }
                                  },
                                  "id": 122,
                                  "indexExpression": {
                                    "hexValue": "31",
                                    "id": 121,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1379:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1356:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 123,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 64,
                                      "src": "1410:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$4_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[4] memory[] memory"
                                      }
                                    },
                                    "id": 125,
                                    "indexExpression": {
                                      "id": 124,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 83,
                                      "src": "1430:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1410:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$4_memory_ptr",
                                      "typeString": "string memory[4] memory"
                                    }
                                  },
                                  "id": 127,
                                  "indexExpression": {
                                    "hexValue": "32",
                                    "id": 126,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1433:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1410:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "id": 128,
                                  "name": "area",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 94,
                                  "src": "1463:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 129,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1500:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 116,
                                "name": "Candidate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 29,
                                "src": "1290:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Candidate_$29_storage_ptr_$",
                                  "typeString": "type(struct Voting.Candidate storage pointer)"
                                }
                              },
                              "id": 130,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "id",
                                "name",
                                "party",
                                "area",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "1290:230:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            ],
                            "expression": {
                              "id": 113,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46,
                              "src": "1257:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 115,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1257:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Candidate_$29_storage_$dyn_storage_ptr_$_t_struct$_Candidate_$29_storage_$returns$__$bound_to$_t_array$_t_struct$_Candidate_$29_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Candidate storage ref[] storage pointer,struct Voting.Candidate storage ref)"
                            }
                          },
                          "id": 131,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1257:277:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 132,
                        "nodeType": "ExpressionStatement",
                        "src": "1257:277:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 89,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 86,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 83,
                      "src": "1065:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 87,
                        "name": "candidateNamesParty",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 64,
                        "src": "1069:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$4_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[4] memory[] memory"
                        }
                      },
                      "id": 88,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1069:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1065:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 134,
                  "initializationExpression": {
                    "assignments": [
                      83
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 83,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1058:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 134,
                        "src": "1050:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 82,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1050:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 85,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 84,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1062:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1050:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 91,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1097:3:0",
                      "subExpression": {
                        "id": 90,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 83,
                        "src": "1097:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 92,
                    "nodeType": "ExpressionStatement",
                    "src": "1097:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1045:500:0"
                },
                {
                  "body": {
                    "id": 157,
                    "nodeType": "Block",
                    "src": "1602:81:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 150,
                                    "name": "partyNames",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 67,
                                    "src": "1642:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 152,
                                  "indexExpression": {
                                    "id": 151,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 136,
                                    "src": "1653:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1642:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 153,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1668:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 149,
                                "name": "Party",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 18,
                                "src": "1629:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Party_$18_storage_ptr_$",
                                  "typeString": "type(struct Voting.Party storage pointer)"
                                }
                              },
                              "id": 154,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "1629:42:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                                "typeString": "struct Voting.Party memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                                "typeString": "struct Voting.Party memory"
                              }
                            ],
                            "expression": {
                              "id": 146,
                              "name": "parties",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 50,
                              "src": "1616:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                "typeString": "struct Voting.Party storage ref[] storage ref"
                              }
                            },
                            "id": 148,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1616:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr_$_t_struct$_Party_$18_storage_$returns$__$bound_to$_t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Party storage ref[] storage pointer,struct Voting.Party storage ref)"
                            }
                          },
                          "id": 155,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1616:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 156,
                        "nodeType": "ExpressionStatement",
                        "src": "1616:56:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 139,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 136,
                      "src": "1574:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 140,
                        "name": "partyNames",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 67,
                        "src": "1578:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        }
                      },
                      "id": 141,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1578:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1574:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 158,
                  "initializationExpression": {
                    "assignments": [
                      136
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 136,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1567:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 158,
                        "src": "1559:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 135,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1559:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 138,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 137,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1571:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1559:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 144,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1597:3:0",
                      "subExpression": {
                        "id": 143,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 136,
                        "src": "1597:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 145,
                    "nodeType": "ExpressionStatement",
                    "src": "1597:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1554:129:0"
                },
                {
                  "expression": {
                    "id": 161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 159,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59,
                      "src": "1692:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 160,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1707:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1692:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 162,
                  "nodeType": "ExpressionStatement",
                  "src": "1692:16:0"
                }
              ]
            },
            "id": 164,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 64,
                  "mutability": "mutable",
                  "name": "candidateNamesParty",
                  "nameLocation": "887:19:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 164,
                  "src": "868:38:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$4_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[4][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 60,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "868:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "id": 62,
                      "length": {
                        "hexValue": "34",
                        "id": 61,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "875:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_4_by_1",
                          "typeString": "int_const 4"
                        },
                        "value": "4"
                      },
                      "nodeType": "ArrayTypeName",
                      "src": "868:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$4_storage_ptr",
                        "typeString": "string[4]"
                      }
                    },
                    "id": 63,
                    "nodeType": "ArrayTypeName",
                    "src": "868:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_string_storage_$4_storage_$dyn_storage_ptr",
                      "typeString": "string[4][]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 67,
                  "mutability": "mutable",
                  "name": "partyNames",
                  "nameLocation": "932:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 164,
                  "src": "916:26:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 65,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "916:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 66,
                    "nodeType": "ArrayTypeName",
                    "src": "916:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "858:90:0"
            },
            "returnParameters": {
              "id": 69,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "957:0:0"
            },
            "scope": 790,
            "src": "847:868:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 175,
              "nodeType": "Block",
              "src": "1742:89:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 170,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 167,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1760:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 168,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1760:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 169,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 37,
                          "src": "1774:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1760:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6f6e6c79206f776e65722063616e207573652074686973",
                        "id": 171,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1787:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ece2e66036fef9dab6296480958f5bc64dd2ed736138ecf0109a2f111dbdcc08",
                          "typeString": "literal_string \"only owner can use this\""
                        },
                        "value": "only owner can use this"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ece2e66036fef9dab6296480958f5bc64dd2ed736138ecf0109a2f111dbdcc08",
                          "typeString": "literal_string \"only owner can use this\""
                        }
                      ],
                      "id": 166,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1752:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 172,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1752:61:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 173,
                  "nodeType": "ExpressionStatement",
                  "src": "1752:61:0"
                },
                {
                  "id": 174,
                  "nodeType": "PlaceholderStatement",
                  "src": "1823:1:0"
                }
              ]
            },
            "id": 176,
            "name": "onlyOwner",
            "nameLocation": "1730:9:0",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 165,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1739:2:0"
            },
            "src": "1721:110:0",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 254,
              "nodeType": "Block",
              "src": "1942:408:0",
              "statements": [
                {
                  "assignments": [
                    184
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 184,
                      "mutability": "mutable",
                      "name": "val",
                      "nameLocation": "1960:3:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 254,
                      "src": "1952:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 183,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1952:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 186,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 185,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1966:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1952:15:0"
                },
                {
                  "assignments": [
                    188
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 188,
                      "mutability": "mutable",
                      "name": "stringBytes",
                      "nameLocation": "1990:11:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 254,
                      "src": "1977:24:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 187,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1977:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 193,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 191,
                        "name": "numString",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 178,
                        "src": "2010:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 190,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "2004:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                        "typeString": "type(bytes storage pointer)"
                      },
                      "typeName": {
                        "id": 189,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "2004:5:0",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 192,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2004:16:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1977:43:0"
                },
                {
                  "body": {
                    "id": 250,
                    "nodeType": "Block",
                    "src": "2079:245:0",
                    "statements": [
                      {
                        "assignments": [
                          206
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 206,
                            "mutability": "mutable",
                            "name": "exp",
                            "nameLocation": "2101:3:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 250,
                            "src": "2093:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 205,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2093:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 211,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 207,
                              "name": "stringBytes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 188,
                              "src": "2107:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 208,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2107:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 209,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 195,
                            "src": "2128:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2107:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2093:36:0"
                      },
                      {
                        "assignments": [
                          213
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 213,
                            "mutability": "mutable",
                            "name": "ival",
                            "nameLocation": "2150:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 250,
                            "src": "2143:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            },
                            "typeName": {
                              "id": 212,
                              "name": "bytes1",
                              "nodeType": "ElementaryTypeName",
                              "src": "2143:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 217,
                        "initialValue": {
                          "baseExpression": {
                            "id": 214,
                            "name": "stringBytes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "2157:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 216,
                          "indexExpression": {
                            "id": 215,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 195,
                            "src": "2169:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2157:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2143:28:0"
                      },
                      {
                        "assignments": [
                          219
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 219,
                            "mutability": "mutable",
                            "name": "uval",
                            "nameLocation": "2191:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 250,
                            "src": "2185:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 218,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "2185:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 224,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 222,
                              "name": "ival",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 213,
                              "src": "2204:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            ],
                            "id": 221,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2198:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint8_$",
                              "typeString": "type(uint8)"
                            },
                            "typeName": {
                              "id": 220,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "2198:5:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2198:11:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2185:24:0"
                      },
                      {
                        "assignments": [
                          226
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 226,
                            "mutability": "mutable",
                            "name": "jval",
                            "nameLocation": "2231:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 250,
                            "src": "2223:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 225,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2223:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 233,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 232,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 227,
                            "name": "uval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 219,
                            "src": "2238:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30783330",
                                "id": 230,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2253:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_48_by_1",
                                  "typeString": "int_const 48"
                                },
                                "value": "0x30"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_48_by_1",
                                  "typeString": "int_const 48"
                                }
                              ],
                              "id": 229,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2245:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 228,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "2245:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 231,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2245:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2238:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2223:35:0"
                      },
                      {
                        "expression": {
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 234,
                            "name": "val",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 184,
                            "src": "2273:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 246,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 237,
                                      "name": "jval",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 226,
                                      "src": "2289:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 236,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2281:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 235,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2281:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 238,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2281:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 244,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 239,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2298:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 242,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 240,
                                              "name": "exp",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 206,
                                              "src": "2303:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "-",
                                            "rightExpression": {
                                              "hexValue": "31",
                                              "id": 241,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "2309:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_1_by_1",
                                                "typeString": "int_const 1"
                                              },
                                              "value": "1"
                                            },
                                            "src": "2303:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 243,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "2302:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "2298:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 245,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "2297:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2281:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 247,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "2280:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2273:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 249,
                        "nodeType": "ExpressionStatement",
                        "src": "2273:40:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 198,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 195,
                      "src": "2050:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 199,
                        "name": "stringBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 188,
                        "src": "2054:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 200,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2054:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2050:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 251,
                  "initializationExpression": {
                    "assignments": [
                      195
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 195,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2043:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 251,
                        "src": "2035:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 194,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2035:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 197,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 196,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2047:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2035:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 203,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2074:3:0",
                      "subExpression": {
                        "id": 202,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 195,
                        "src": "2074:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 204,
                    "nodeType": "ExpressionStatement",
                    "src": "2074:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "2030:294:0"
                },
                {
                  "expression": {
                    "id": 252,
                    "name": "val",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 184,
                    "src": "2340:3:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 182,
                  "id": 253,
                  "nodeType": "Return",
                  "src": "2333:10:0"
                }
              ]
            },
            "functionSelector": "1bd95155",
            "id": 255,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "stringToUint",
            "nameLocation": "1846:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 179,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 178,
                  "mutability": "mutable",
                  "name": "numString",
                  "nameLocation": "1873:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 255,
                  "src": "1859:23:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 177,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1859:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1858:25:0"
            },
            "returnParameters": {
              "id": 182,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 181,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 255,
                  "src": "1929:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 180,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1929:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1928:9:0"
            },
            "scope": 790,
            "src": "1837:513:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 360,
              "nodeType": "Block",
              "src": "2434:829:0",
              "statements": [
                {
                  "assignments": [
                    265
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 265,
                      "mutability": "mutable",
                      "name": "totalCandidates",
                      "nameLocation": "2449:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 360,
                      "src": "2444:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 264,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2444:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 268,
                  "initialValue": {
                    "expression": {
                      "id": 266,
                      "name": "candidates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 46,
                      "src": "2467:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                        "typeString": "struct Voting.Candidate storage ref[] storage ref"
                      }
                    },
                    "id": 267,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "2467:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2444:40:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 272,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 270,
                          "name": "totalCandidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 265,
                          "src": "2502:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2520:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2502:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f2063616e646964617465732072656769737465726564",
                        "id": 273,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2523:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_bd713d5d35da3fa59a3e12d255dff109cdd349f6b78934420505b9128dcd6dd1",
                          "typeString": "literal_string \"No candidates registered\""
                        },
                        "value": "No candidates registered"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_bd713d5d35da3fa59a3e12d255dff109cdd349f6b78934420505b9128dcd6dd1",
                          "typeString": "literal_string \"No candidates registered\""
                        }
                      ],
                      "id": 269,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2494:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 274,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2494:56:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 275,
                  "nodeType": "ExpressionStatement",
                  "src": "2494:56:0"
                },
                {
                  "assignments": [
                    277
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 277,
                      "mutability": "mutable",
                      "name": "numCandidatesOnArea",
                      "nameLocation": "2566:19:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 360,
                      "src": "2561:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 276,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2561:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 278,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2561:24:0"
                },
                {
                  "body": {
                    "id": 301,
                    "nodeType": "Block",
                    "src": "2641:110:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 289,
                                "name": "candidates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 46,
                                "src": "2658:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                                  "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                }
                              },
                              "id": 291,
                              "indexExpression": {
                                "id": 290,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 280,
                                "src": "2669:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2658:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$29_storage",
                                "typeString": "struct Voting.Candidate storage ref"
                              }
                            },
                            "id": 292,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "area",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26,
                            "src": "2658:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 293,
                            "name": "area",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 257,
                            "src": "2680:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2658:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 300,
                        "nodeType": "IfStatement",
                        "src": "2655:86:0",
                        "trueBody": {
                          "id": 299,
                          "nodeType": "Block",
                          "src": "2685:56:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 297,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 295,
                                  "name": "numCandidatesOnArea",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 277,
                                  "src": "2703:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "hexValue": "31",
                                  "id": 296,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2725:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "2703:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 298,
                              "nodeType": "ExpressionStatement",
                              "src": "2703:23:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 285,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 283,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 280,
                      "src": "2615:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 284,
                      "name": "totalCandidates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 265,
                      "src": "2619:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2615:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 302,
                  "initializationExpression": {
                    "assignments": [
                      280
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 280,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2608:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 302,
                        "src": "2600:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 279,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2600:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 282,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 281,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2612:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2600:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 287,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2636:3:0",
                      "subExpression": {
                        "id": 286,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 280,
                        "src": "2636:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 288,
                    "nodeType": "ExpressionStatement",
                    "src": "2636:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "2595:156:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 306,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 304,
                          "name": "numCandidatesOnArea",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 277,
                          "src": "2768:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 305,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2790:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2768:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f2063616e6469646174657320666f756e64",
                        "id": 307,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2793:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_36560c9c08c8da75cf919cb5abdeeb892c419d509a6415fd37a9107cf38c35ca",
                          "typeString": "literal_string \"No candidates found\""
                        },
                        "value": "No candidates found"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_36560c9c08c8da75cf919cb5abdeeb892c419d509a6415fd37a9107cf38c35ca",
                          "typeString": "literal_string \"No candidates found\""
                        }
                      ],
                      "id": 303,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2760:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 308,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2760:55:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 309,
                  "nodeType": "ExpressionStatement",
                  "src": "2760:55:0"
                },
                {
                  "assignments": [
                    311
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 311,
                      "mutability": "mutable",
                      "name": "x",
                      "nameLocation": "2830:1:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 360,
                      "src": "2825:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 310,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2825:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 313,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 312,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2833:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2825:9:0"
                },
                {
                  "assignments": [
                    318
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 318,
                      "mutability": "mutable",
                      "name": "candidates_to_return",
                      "nameLocation": "2948:20:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 360,
                      "src": "2929:39:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct Voting.Candidate[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 316,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 315,
                            "name": "Candidate",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 29,
                            "src": "2929:9:0"
                          },
                          "referencedDeclaration": 29,
                          "src": "2929:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$29_storage_ptr",
                            "typeString": "struct Voting.Candidate"
                          }
                        },
                        "id": 317,
                        "nodeType": "ArrayTypeName",
                        "src": "2929:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage_ptr",
                          "typeString": "struct Voting.Candidate[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 325,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 323,
                        "name": "numCandidatesOnArea",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 277,
                        "src": "2987:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 322,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "2971:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (struct Voting.Candidate memory[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 320,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 319,
                            "name": "Candidate",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 29,
                            "src": "2975:9:0"
                          },
                          "referencedDeclaration": 29,
                          "src": "2975:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$29_storage_ptr",
                            "typeString": "struct Voting.Candidate"
                          }
                        },
                        "id": 321,
                        "nodeType": "ArrayTypeName",
                        "src": "2975:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage_ptr",
                          "typeString": "struct Voting.Candidate[]"
                        }
                      }
                    },
                    "id": 324,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2971:36:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Voting.Candidate memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2929:78:0"
                },
                {
                  "body": {
                    "id": 356,
                    "nodeType": "Block",
                    "src": "3063:148:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 341,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 336,
                                "name": "candidates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 46,
                                "src": "3080:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                                  "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                }
                              },
                              "id": 338,
                              "indexExpression": {
                                "id": 337,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 327,
                                "src": "3091:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3080:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$29_storage",
                                "typeString": "struct Voting.Candidate storage ref"
                              }
                            },
                            "id": 339,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "area",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26,
                            "src": "3080:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 340,
                            "name": "area",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 257,
                            "src": "3102:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3080:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 355,
                        "nodeType": "IfStatement",
                        "src": "3077:124:0",
                        "trueBody": {
                          "id": 354,
                          "nodeType": "Block",
                          "src": "3107:94:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 348,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 342,
                                    "name": "candidates_to_return",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 318,
                                    "src": "3125:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "struct Voting.Candidate memory[] memory"
                                    }
                                  },
                                  "id": 344,
                                  "indexExpression": {
                                    "id": 343,
                                    "name": "x",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 311,
                                    "src": "3146:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "3125:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                    "typeString": "struct Voting.Candidate memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 345,
                                    "name": "candidates",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 46,
                                    "src": "3151:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                                      "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                    }
                                  },
                                  "id": 347,
                                  "indexExpression": {
                                    "id": 346,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 327,
                                    "src": "3162:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "3151:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Candidate_$29_storage",
                                    "typeString": "struct Voting.Candidate storage ref"
                                  }
                                },
                                "src": "3125:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                  "typeString": "struct Voting.Candidate memory"
                                }
                              },
                              "id": 349,
                              "nodeType": "ExpressionStatement",
                              "src": "3125:39:0"
                            },
                            {
                              "expression": {
                                "id": 352,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 350,
                                  "name": "x",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 311,
                                  "src": "3182:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "hexValue": "31",
                                  "id": 351,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3185:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "3182:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 353,
                              "nodeType": "ExpressionStatement",
                              "src": "3182:4:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 330,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 327,
                      "src": "3037:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 331,
                      "name": "totalCandidates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 265,
                      "src": "3041:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3037:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 357,
                  "initializationExpression": {
                    "assignments": [
                      327
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 327,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3030:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "3022:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 326,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3022:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 329,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 328,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3034:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3022:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 334,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "3058:3:0",
                      "subExpression": {
                        "id": 333,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 327,
                        "src": "3058:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 335,
                    "nodeType": "ExpressionStatement",
                    "src": "3058:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "3017:194:0"
                },
                {
                  "expression": {
                    "id": 358,
                    "name": "candidates_to_return",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 318,
                    "src": "3236:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Voting.Candidate memory[] memory"
                    }
                  },
                  "functionReturnParameters": 263,
                  "id": 359,
                  "nodeType": "Return",
                  "src": "3229:27:0"
                }
              ]
            },
            "functionSelector": "3e39a7a5",
            "id": 361,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCandidates",
            "nameLocation": "2370:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 258,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 257,
                  "mutability": "mutable",
                  "name": "area",
                  "nameLocation": "2389:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 361,
                  "src": "2384:9:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 256,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2384:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2383:11:0"
            },
            "returnParameters": {
              "id": 263,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 262,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 361,
                  "src": "2414:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Candidate[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 260,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 259,
                        "name": "Candidate",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 29,
                        "src": "2414:9:0"
                      },
                      "referencedDeclaration": 29,
                      "src": "2414:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$29_storage_ptr",
                        "typeString": "struct Voting.Candidate"
                      }
                    },
                    "id": 261,
                    "nodeType": "ArrayTypeName",
                    "src": "2414:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Candidate[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2413:20:0"
            },
            "scope": 790,
            "src": "2361:902:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 370,
              "nodeType": "Block",
              "src": "3657:31:0",
              "statements": [
                {
                  "expression": {
                    "id": 368,
                    "name": "parties",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 50,
                    "src": "3674:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                      "typeString": "struct Voting.Party storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 367,
                  "id": 369,
                  "nodeType": "Return",
                  "src": "3667:14:0"
                }
              ]
            },
            "functionSelector": "a8311aa8",
            "id": 371,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getParties",
            "nameLocation": "3607:10:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 362,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3617:2:0"
            },
            "returnParameters": {
              "id": 367,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 366,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 371,
                  "src": "3641:14:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Party_$18_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Party[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 364,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 363,
                        "name": "Party",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 18,
                        "src": "3641:5:0"
                      },
                      "referencedDeclaration": 18,
                      "src": "3641:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Party_$18_storage_ptr",
                        "typeString": "struct Voting.Party"
                      }
                    },
                    "id": 365,
                    "nodeType": "ArrayTypeName",
                    "src": "3641:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Party[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3640:16:0"
            },
            "scope": 790,
            "src": "3598:90:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 453,
              "nodeType": "Block",
              "src": "3837:507:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 393,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "3877:32:0",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 383,
                                "name": "voters",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 42,
                                "src": "3878:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 385,
                              "indexExpression": {
                                "id": 384,
                                "name": "voter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 373,
                                "src": "3885:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3878:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 386,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "votedForCandidate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 10,
                            "src": "3878:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "id": 392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "3913:28:0",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 388,
                                "name": "voters",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 42,
                                "src": "3914:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 390,
                              "indexExpression": {
                                "id": 389,
                                "name": "voter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 373,
                                "src": "3921:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3914:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 391,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "votedForParty",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12,
                            "src": "3914:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3877:64:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520766f74657220616c726561647920766f746564",
                        "id": 394,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3955:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        },
                        "value": "The voter already voted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        }
                      ],
                      "id": 382,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3856:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3856:134:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 396,
                  "nodeType": "ExpressionStatement",
                  "src": "3856:134:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 402,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "4008:22:0",
                        "subExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 398,
                              "name": "voters",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 42,
                              "src": "4009:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                "typeString": "mapping(address => struct Voting.Voter storage ref)"
                              }
                            },
                            "id": 400,
                            "indexExpression": {
                              "id": 399,
                              "name": "voter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 373,
                              "src": "4016:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4009:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage",
                              "typeString": "struct Voting.Voter storage ref"
                            }
                          },
                          "id": 401,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "canVote",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 8,
                          "src": "4009:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "566f7465722063616e20616c726561647920766f7465",
                        "id": 403,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4032:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6582ac717cacb908d0fddafdc6182c53d1640512810fcb2c05e7c52b38369db7",
                          "typeString": "literal_string \"Voter can already vote\""
                        },
                        "value": "Voter can already vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6582ac717cacb908d0fddafdc6182c53d1640512810fcb2c05e7c52b38369db7",
                          "typeString": "literal_string \"Voter can already vote\""
                        }
                      ],
                      "id": 397,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4000:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 404,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4000:57:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 405,
                  "nodeType": "ExpressionStatement",
                  "src": "4000:57:0"
                },
                {
                  "expression": {
                    "id": 411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 406,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "4067:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 408,
                        "indexExpression": {
                          "id": 407,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 373,
                          "src": "4074:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4067:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 409,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "4067:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 410,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4091:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4067:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 412,
                  "nodeType": "ExpressionStatement",
                  "src": "4067:28:0"
                },
                {
                  "expression": {
                    "id": 418,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 413,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "4105:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 415,
                        "indexExpression": {
                          "id": 414,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 373,
                          "src": "4112:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4105:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 416,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4,
                      "src": "4105:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 417,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 375,
                      "src": "4124:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "4105:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 419,
                  "nodeType": "ExpressionStatement",
                  "src": "4105:21:0"
                },
                {
                  "expression": {
                    "id": 427,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 420,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "4136:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 422,
                        "indexExpression": {
                          "id": 421,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 373,
                          "src": "4143:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4136:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 423,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "area",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6,
                      "src": "4136:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 425,
                          "name": "area",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 377,
                          "src": "4170:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        ],
                        "id": 424,
                        "name": "stringToUint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 255,
                        "src": "4157:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                          "typeString": "function (string memory) pure returns (uint256)"
                        }
                      },
                      "id": 426,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4157:18:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4136:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 428,
                  "nodeType": "ExpressionStatement",
                  "src": "4136:39:0"
                },
                {
                  "expression": {
                    "id": 434,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 429,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "4185:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 431,
                        "indexExpression": {
                          "id": 430,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 373,
                          "src": "4192:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4185:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 432,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votedForCandidate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10,
                      "src": "4185:31:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 433,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4219:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "4185:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 435,
                  "nodeType": "ExpressionStatement",
                  "src": "4185:39:0"
                },
                {
                  "expression": {
                    "id": 441,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 436,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "4234:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 438,
                        "indexExpression": {
                          "id": 437,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 373,
                          "src": "4241:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4234:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 439,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votedForParty",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 12,
                      "src": "4234:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 440,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4264:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "4234:35:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 442,
                  "nodeType": "ExpressionStatement",
                  "src": "4234:35:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "31303030303030303030303030303030",
                        "id": 446,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4294:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000_by_1",
                          "typeString": "int_const 1000000000000000"
                        },
                        "value": "1000000000000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000000000000_by_1",
                          "typeString": "int_const 1000000000000000"
                        }
                      ],
                      "expression": {
                        "id": 443,
                        "name": "voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 373,
                        "src": "4279:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 445,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "4279:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4279:32:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 448,
                  "nodeType": "ExpressionStatement",
                  "src": "4279:32:0"
                },
                {
                  "expression": {
                    "id": 451,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 449,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59,
                      "src": "4321:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 450,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4336:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4321:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 452,
                  "nodeType": "ExpressionStatement",
                  "src": "4321:16:0"
                }
              ]
            },
            "functionSelector": "f972c1c4",
            "id": 454,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 380,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 379,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 176,
                  "src": "3818:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "3818:9:0"
              }
            ],
            "name": "giveRightToVote",
            "nameLocation": "3703:15:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 378,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 373,
                  "mutability": "mutable",
                  "name": "voter",
                  "nameLocation": "3744:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "3728:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 372,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3728:15:0",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 375,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "3773:2:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "3759:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 374,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3759:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 377,
                  "mutability": "mutable",
                  "name": "area",
                  "nameLocation": "3799:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "3785:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 376,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3785:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3718:100:0"
            },
            "returnParameters": {
              "id": 381,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3837:0:0"
            },
            "scope": 790,
            "src": "3694:650:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 495,
              "nodeType": "Block",
              "src": "4411:301:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 472,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 466,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "4451:32:0",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 462,
                                "name": "voters",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 42,
                                "src": "4452:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 464,
                              "indexExpression": {
                                "id": 463,
                                "name": "voter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 456,
                                "src": "4459:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4452:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 465,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "votedForCandidate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 10,
                            "src": "4452:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "id": 471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "4487:28:0",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 467,
                                "name": "voters",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 42,
                                "src": "4488:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 469,
                              "indexExpression": {
                                "id": 468,
                                "name": "voter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 456,
                                "src": "4495:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4488:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 470,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "votedForParty",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12,
                            "src": "4488:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "4451:64:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520766f74657220616c726561647920766f746564",
                        "id": 473,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4529:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        },
                        "value": "The voter already voted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        }
                      ],
                      "id": 461,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4430:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4430:134:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 475,
                  "nodeType": "ExpressionStatement",
                  "src": "4430:134:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 477,
                            "name": "voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 42,
                            "src": "4582:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                              "typeString": "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          "id": 479,
                          "indexExpression": {
                            "id": 478,
                            "name": "voter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 456,
                            "src": "4589:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4582:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage",
                            "typeString": "struct Voting.Voter storage ref"
                          }
                        },
                        "id": 480,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "4582:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "566f74657220646f65736e2774206861766520726967687420746f20766f7465",
                        "id": 481,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4605:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_71f8867ec7a526d1564968c50073693657ec877af00314443880e63ee9f37a01",
                          "typeString": "literal_string \"Voter doesn't have right to vote\""
                        },
                        "value": "Voter doesn't have right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_71f8867ec7a526d1564968c50073693657ec877af00314443880e63ee9f37a01",
                          "typeString": "literal_string \"Voter doesn't have right to vote\""
                        }
                      ],
                      "id": 476,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4574:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4574:66:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 483,
                  "nodeType": "ExpressionStatement",
                  "src": "4574:66:0"
                },
                {
                  "expression": {
                    "id": 489,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 484,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "4650:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 486,
                        "indexExpression": {
                          "id": 485,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 456,
                          "src": "4657:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4650:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 487,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "4650:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 488,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4674:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "4650:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 490,
                  "nodeType": "ExpressionStatement",
                  "src": "4650:29:0"
                },
                {
                  "expression": {
                    "id": 493,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 491,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59,
                      "src": "4689:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 492,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4704:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4689:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 494,
                  "nodeType": "ExpressionStatement",
                  "src": "4689:16:0"
                }
              ]
            },
            "functionSelector": "685a9dd8",
            "id": 496,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 459,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 458,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 176,
                  "src": "4392:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "4392:9:0"
              }
            ],
            "name": "removeRightToVote",
            "nameLocation": "4359:17:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 456,
                  "mutability": "mutable",
                  "name": "voter",
                  "nameLocation": "4385:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 496,
                  "src": "4377:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 455,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4377:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4376:15:0"
            },
            "returnParameters": {
              "id": 460,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4411:0:0"
            },
            "scope": 790,
            "src": "4350:362:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 579,
              "nodeType": "Block",
              "src": "4771:621:0",
              "statements": [
                {
                  "assignments": [
                    503
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 503,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "4795:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 579,
                      "src": "4781:20:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                        "typeString": "struct Voting.Voter"
                      },
                      "typeName": {
                        "id": 502,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 501,
                          "name": "Voter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 13,
                          "src": "4781:5:0"
                        },
                        "referencedDeclaration": 13,
                        "src": "4781:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 508,
                  "initialValue": {
                    "baseExpression": {
                      "id": 504,
                      "name": "voters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "4804:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                        "typeString": "mapping(address => struct Voting.Voter storage ref)"
                      }
                    },
                    "id": 507,
                    "indexExpression": {
                      "expression": {
                        "id": 505,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4811:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 506,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4811:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4804:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$13_storage",
                      "typeString": "struct Voting.Voter storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4781:41:0"
                },
                {
                  "assignments": [
                    510
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 510,
                      "mutability": "mutable",
                      "name": "id",
                      "nameLocation": "4837:2:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 579,
                      "src": "4832:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 509,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4832:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 511,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4832:7:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 513,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 503,
                          "src": "4857:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                            "typeString": "struct Voting.Voter storage pointer"
                          }
                        },
                        "id": 514,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "4857:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "486173206e6f20726967687420746f20766f7465",
                        "id": 515,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4873:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        },
                        "value": "Has no right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        }
                      ],
                      "id": 512,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4849:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4849:47:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 517,
                  "nodeType": "ExpressionStatement",
                  "src": "4849:47:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 521,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "4914:25:0",
                        "subExpression": {
                          "expression": {
                            "id": 519,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 503,
                            "src": "4915:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                              "typeString": "struct Voting.Voter storage pointer"
                            }
                          },
                          "id": 520,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "votedForCandidate",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 10,
                          "src": "4915:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920766f74656420666f722063616e646964617465",
                        "id": 522,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4941:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2acc0d30fb5ddb55cfba372d0e3a2c100522729d330fb7287fd1b66506e9915f",
                          "typeString": "literal_string \"already voted for candidate\""
                        },
                        "value": "already voted for candidate"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2acc0d30fb5ddb55cfba372d0e3a2c100522729d330fb7287fd1b66506e9915f",
                          "typeString": "literal_string \"already voted for candidate\""
                        }
                      ],
                      "id": 518,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4906:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4906:65:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 524,
                  "nodeType": "ExpressionStatement",
                  "src": "4906:65:0"
                },
                {
                  "body": {
                    "id": 549,
                    "nodeType": "Block",
                    "src": "5024:123:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 541,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 536,
                                "name": "candidates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 46,
                                "src": "5042:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                                  "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                }
                              },
                              "id": 538,
                              "indexExpression": {
                                "id": 537,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 526,
                                "src": "5053:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5042:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$29_storage",
                                "typeString": "struct Voting.Candidate storage ref"
                              }
                            },
                            "id": 539,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "id",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 20,
                            "src": "5042:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 540,
                            "name": "candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 498,
                            "src": "5062:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5042:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 548,
                        "nodeType": "IfStatement",
                        "src": "5038:99:0",
                        "trueBody": {
                          "id": 547,
                          "nodeType": "Block",
                          "src": "5075:62:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 544,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 542,
                                  "name": "id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 510,
                                  "src": "5093:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 543,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 526,
                                  "src": "5098:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5093:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 545,
                              "nodeType": "ExpressionStatement",
                              "src": "5093:6:0"
                            },
                            {
                              "id": 546,
                              "nodeType": "Break",
                              "src": "5117:5:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 529,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 526,
                      "src": "4999:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 530,
                        "name": "candidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 46,
                        "src": "5001:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                          "typeString": "struct Voting.Candidate storage ref[] storage ref"
                        }
                      },
                      "id": 531,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "5001:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4999:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 550,
                  "initializationExpression": {
                    "assignments": [
                      526
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 526,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "4994:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 550,
                        "src": "4986:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 525,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4986:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 528,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 527,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4996:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "4986:11:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 534,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "5020:3:0",
                      "subExpression": {
                        "id": 533,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 526,
                        "src": "5020:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 535,
                    "nodeType": "ExpressionStatement",
                    "src": "5020:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "4981:166:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 558,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 552,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 503,
                            "src": "5177:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                              "typeString": "struct Voting.Voter storage pointer"
                            }
                          },
                          "id": 553,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "area",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 6,
                          "src": "5177:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 554,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 46,
                              "src": "5192:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 556,
                            "indexExpression": {
                              "id": 555,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 510,
                              "src": "5203:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5192:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Candidate_$29_storage",
                              "typeString": "struct Voting.Candidate storage ref"
                            }
                          },
                          "id": 557,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "area",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 26,
                          "src": "5192:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5177:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "63616e6e6f7420766f74652063616e64696461746520696e20746869732061726561",
                        "id": 559,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5225:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_10b35c958a026ea23c020728842dd9fa65b199afc0f8fa68e1b7d3c691bb87ad",
                          "typeString": "literal_string \"cannot vote candidate in this area\""
                        },
                        "value": "cannot vote candidate in this area"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_10b35c958a026ea23c020728842dd9fa65b199afc0f8fa68e1b7d3c691bb87ad",
                          "typeString": "literal_string \"cannot vote candidate in this area\""
                        }
                      ],
                      "id": 551,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5156:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 560,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5156:115:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 561,
                  "nodeType": "ExpressionStatement",
                  "src": "5156:115:0"
                },
                {
                  "expression": {
                    "id": 567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 562,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46,
                          "src": "5281:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage",
                            "typeString": "struct Voting.Candidate storage ref[] storage ref"
                          }
                        },
                        "id": 564,
                        "indexExpression": {
                          "id": 563,
                          "name": "id",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 510,
                          "src": "5292:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5281:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$29_storage",
                          "typeString": "struct Voting.Candidate storage ref"
                        }
                      },
                      "id": 565,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28,
                      "src": "5281:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 566,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5309:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "5281:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 568,
                  "nodeType": "ExpressionStatement",
                  "src": "5281:29:0"
                },
                {
                  "expression": {
                    "id": 571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 569,
                      "name": "candidate_vote_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 56,
                      "src": "5320:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 570,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5343:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "5320:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 572,
                  "nodeType": "ExpressionStatement",
                  "src": "5320:24:0"
                },
                {
                  "expression": {
                    "id": 577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 573,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 503,
                        "src": "5354:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter storage pointer"
                        }
                      },
                      "id": 575,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votedForCandidate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10,
                      "src": "5354:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 576,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5381:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "5354:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 578,
                  "nodeType": "ExpressionStatement",
                  "src": "5354:31:0"
                }
              ]
            },
            "functionSelector": "8c08a4dc",
            "id": 580,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voteCandidate",
            "nameLocation": "4727:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 499,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 498,
                  "mutability": "mutable",
                  "name": "candidateId",
                  "nameLocation": "4749:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 580,
                  "src": "4741:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 497,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4741:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4740:21:0"
            },
            "returnParameters": {
              "id": 500,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4771:0:0"
            },
            "scope": 790,
            "src": "4718:674:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 623,
              "nodeType": "Block",
              "src": "5441:293:0",
              "statements": [
                {
                  "assignments": [
                    587
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 587,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "5465:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 623,
                      "src": "5451:20:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                        "typeString": "struct Voting.Voter"
                      },
                      "typeName": {
                        "id": 586,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 585,
                          "name": "Voter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 13,
                          "src": "5451:5:0"
                        },
                        "referencedDeclaration": 13,
                        "src": "5451:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 592,
                  "initialValue": {
                    "baseExpression": {
                      "id": 588,
                      "name": "voters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "5474:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                        "typeString": "mapping(address => struct Voting.Voter storage ref)"
                      }
                    },
                    "id": 591,
                    "indexExpression": {
                      "expression": {
                        "id": 589,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "5481:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 590,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "5481:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5474:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$13_storage",
                      "typeString": "struct Voting.Voter storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5451:41:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 594,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 587,
                          "src": "5510:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                            "typeString": "struct Voting.Voter storage pointer"
                          }
                        },
                        "id": 595,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "5510:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "486173206e6f20726967687420746f20766f7465",
                        "id": 596,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5526:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        },
                        "value": "Has no right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        }
                      ],
                      "id": 593,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5502:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 597,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5502:47:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 598,
                  "nodeType": "ExpressionStatement",
                  "src": "5502:47:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 602,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "5567:21:0",
                        "subExpression": {
                          "expression": {
                            "id": 600,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 587,
                            "src": "5568:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                              "typeString": "struct Voting.Voter storage pointer"
                            }
                          },
                          "id": 601,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "votedForParty",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12,
                          "src": "5568:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920766f74656420666f72207061727479",
                        "id": 603,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5590:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3fa65f686974a9b4178cc1bad10771e42e98ac4b1ba42a0c415211e737a438ae",
                          "typeString": "literal_string \"already voted for party\""
                        },
                        "value": "already voted for party"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3fa65f686974a9b4178cc1bad10771e42e98ac4b1ba42a0c415211e737a438ae",
                          "typeString": "literal_string \"already voted for party\""
                        }
                      ],
                      "id": 599,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5559:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 604,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5559:57:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 605,
                  "nodeType": "ExpressionStatement",
                  "src": "5559:57:0"
                },
                {
                  "expression": {
                    "id": 611,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 606,
                          "name": "parties",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 50,
                          "src": "5626:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                            "typeString": "struct Voting.Party storage ref[] storage ref"
                          }
                        },
                        "id": 608,
                        "indexExpression": {
                          "id": 607,
                          "name": "party",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 582,
                          "src": "5634:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5626:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Party_$18_storage",
                          "typeString": "struct Voting.Party storage ref"
                        }
                      },
                      "id": 609,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17,
                      "src": "5626:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 610,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5654:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "5626:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 612,
                  "nodeType": "ExpressionStatement",
                  "src": "5626:29:0"
                },
                {
                  "expression": {
                    "id": 615,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 613,
                      "name": "party_vote_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 53,
                      "src": "5665:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 614,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5685:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "5665:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 616,
                  "nodeType": "ExpressionStatement",
                  "src": "5665:21:0"
                },
                {
                  "expression": {
                    "id": 621,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 617,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 587,
                        "src": "5696:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter storage pointer"
                        }
                      },
                      "id": 619,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votedForCandidate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10,
                      "src": "5696:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 620,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5723:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "5696:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 622,
                  "nodeType": "ExpressionStatement",
                  "src": "5696:31:0"
                }
              ]
            },
            "functionSelector": "04cee9b3",
            "id": 624,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voteParty",
            "nameLocation": "5407:9:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 583,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 582,
                  "mutability": "mutable",
                  "name": "party",
                  "nameLocation": "5425:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 624,
                  "src": "5417:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 581,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5417:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5416:15:0"
            },
            "returnParameters": {
              "id": 584,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5441:0:0"
            },
            "scope": 790,
            "src": "5398:336:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 685,
              "nodeType": "Block",
              "src": "5836:452:0",
              "statements": [
                {
                  "assignments": [
                    636
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 636,
                      "mutability": "mutable",
                      "name": "candidates_in_area",
                      "nameLocation": "5865:18:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 685,
                      "src": "5846:37:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct Voting.Candidate[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 634,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 633,
                            "name": "Candidate",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 29,
                            "src": "5846:9:0"
                          },
                          "referencedDeclaration": 29,
                          "src": "5846:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$29_storage_ptr",
                            "typeString": "struct Voting.Candidate"
                          }
                        },
                        "id": 635,
                        "nodeType": "ArrayTypeName",
                        "src": "5846:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$29_storage_$dyn_storage_ptr",
                          "typeString": "struct Voting.Candidate[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 640,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 638,
                        "name": "area",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 626,
                        "src": "5900:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 637,
                      "name": "getCandidates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 361,
                      "src": "5886:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) view returns (struct Voting.Candidate memory[] memory)"
                      }
                    },
                    "id": 639,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5886:19:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Voting.Candidate memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5846:59:0"
                },
                {
                  "assignments": [
                    642
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 642,
                      "mutability": "mutable",
                      "name": "winningVoteCount",
                      "nameLocation": "5923:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 685,
                      "src": "5915:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 641,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5915:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 644,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 643,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5942:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5915:28:0"
                },
                {
                  "expression": {
                    "id": 649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 645,
                      "name": "winningCandidate_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 630,
                      "src": "5953:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                        "typeString": "struct Voting.Candidate memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 646,
                        "name": "candidates_in_area",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 636,
                        "src": "5973:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct Voting.Candidate memory[] memory"
                        }
                      },
                      "id": 648,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 647,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5992:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5973:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                        "typeString": "struct Voting.Candidate memory"
                      }
                    },
                    "src": "5953:41:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                      "typeString": "struct Voting.Candidate memory"
                    }
                  },
                  "id": 650,
                  "nodeType": "ExpressionStatement",
                  "src": "5953:41:0"
                },
                {
                  "body": {
                    "id": 683,
                    "nodeType": "Block",
                    "src": "6060:222:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 667,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 662,
                                "name": "candidates_in_area",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 636,
                                "src": "6078:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                                  "typeString": "struct Voting.Candidate memory[] memory"
                                }
                              },
                              "id": 664,
                              "indexExpression": {
                                "id": 663,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 652,
                                "src": "6097:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6078:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            },
                            "id": 665,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voteCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 28,
                            "src": "6078:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 666,
                            "name": "winningVoteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 642,
                            "src": "6112:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6078:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 682,
                        "nodeType": "IfStatement",
                        "src": "6074:198:0",
                        "trueBody": {
                          "id": 681,
                          "nodeType": "Block",
                          "src": "6130:142:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 673,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 668,
                                  "name": "winningVoteCount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 642,
                                  "src": "6148:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 669,
                                      "name": "candidates_in_area",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 636,
                                      "src": "6167:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct Voting.Candidate memory[] memory"
                                      }
                                    },
                                    "id": 671,
                                    "indexExpression": {
                                      "id": 670,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 652,
                                      "src": "6186:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6167:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                      "typeString": "struct Voting.Candidate memory"
                                    }
                                  },
                                  "id": 672,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "voteCount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 28,
                                  "src": "6167:31:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6148:50:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 674,
                              "nodeType": "ExpressionStatement",
                              "src": "6148:50:0"
                            },
                            {
                              "expression": {
                                "id": 679,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 675,
                                  "name": "winningCandidate_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 630,
                                  "src": "6216:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                    "typeString": "struct Voting.Candidate memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 676,
                                    "name": "candidates_in_area",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 636,
                                    "src": "6236:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "struct Voting.Candidate memory[] memory"
                                    }
                                  },
                                  "id": 678,
                                  "indexExpression": {
                                    "id": 677,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 652,
                                    "src": "6255:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6236:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                    "typeString": "struct Voting.Candidate memory"
                                  }
                                },
                                "src": "6216:41:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                                  "typeString": "struct Voting.Candidate memory"
                                }
                              },
                              "id": 680,
                              "nodeType": "ExpressionStatement",
                              "src": "6216:41:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 658,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 655,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 652,
                      "src": "6024:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 656,
                        "name": "candidates_in_area",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 636,
                        "src": "6028:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$29_memory_ptr_$dyn_memory_ptr",
                          "typeString": "struct Voting.Candidate memory[] memory"
                        }
                      },
                      "id": 657,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "6028:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6024:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 684,
                  "initializationExpression": {
                    "assignments": [
                      652
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 652,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "6017:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 684,
                        "src": "6009:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 651,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6009:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 654,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 653,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6021:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "6009:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 660,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "6055:3:0",
                      "subExpression": {
                        "id": 659,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 652,
                        "src": "6055:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 661,
                    "nodeType": "ExpressionStatement",
                    "src": "6055:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "6004:278:0"
                }
              ]
            },
            "functionSelector": "b82e1bb2",
            "id": 686,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "winningCandidate",
            "nameLocation": "5749:16:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 627,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 626,
                  "mutability": "mutable",
                  "name": "area",
                  "nameLocation": "5774:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 686,
                  "src": "5766:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 625,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5766:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5765:14:0"
            },
            "returnParameters": {
              "id": 631,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 630,
                  "mutability": "mutable",
                  "name": "winningCandidate_",
                  "nameLocation": "5818:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 686,
                  "src": "5801:34:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Candidate_$29_memory_ptr",
                    "typeString": "struct Voting.Candidate"
                  },
                  "typeName": {
                    "id": 629,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 628,
                      "name": "Candidate",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29,
                      "src": "5801:9:0"
                    },
                    "referencedDeclaration": 29,
                    "src": "5801:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$29_storage_ptr",
                      "typeString": "struct Voting.Candidate"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5800:36:0"
            },
            "scope": 790,
            "src": "5740:548:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 736,
              "nodeType": "Block",
              "src": "6368:320:0",
              "statements": [
                {
                  "assignments": [
                    693
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 693,
                      "mutability": "mutable",
                      "name": "winningVoteCount",
                      "nameLocation": "6386:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 736,
                      "src": "6378:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 692,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6378:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 695,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 694,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6405:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6378:28:0"
                },
                {
                  "expression": {
                    "id": 700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 696,
                      "name": "winningParty_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 690,
                      "src": "6416:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                        "typeString": "struct Voting.Party memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 697,
                        "name": "parties",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50,
                        "src": "6432:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                          "typeString": "struct Voting.Party storage ref[] storage ref"
                        }
                      },
                      "id": 699,
                      "indexExpression": {
                        "hexValue": "30",
                        "id": 698,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6440:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6432:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Party_$18_storage",
                        "typeString": "struct Voting.Party storage ref"
                      }
                    },
                    "src": "6416:26:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                      "typeString": "struct Voting.Party memory"
                    }
                  },
                  "id": 701,
                  "nodeType": "ExpressionStatement",
                  "src": "6416:26:0"
                },
                {
                  "body": {
                    "id": 734,
                    "nodeType": "Block",
                    "src": "6497:185:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 718,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 713,
                                "name": "parties",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 50,
                                "src": "6515:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                  "typeString": "struct Voting.Party storage ref[] storage ref"
                                }
                              },
                              "id": 715,
                              "indexExpression": {
                                "id": 714,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 703,
                                "src": "6523:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6515:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Party_$18_storage",
                                "typeString": "struct Voting.Party storage ref"
                              }
                            },
                            "id": 716,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voteCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17,
                            "src": "6515:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 717,
                            "name": "winningVoteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 693,
                            "src": "6538:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6515:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 733,
                        "nodeType": "IfStatement",
                        "src": "6511:161:0",
                        "trueBody": {
                          "id": 732,
                          "nodeType": "Block",
                          "src": "6556:116:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 724,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 719,
                                  "name": "winningVoteCount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 693,
                                  "src": "6574:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 720,
                                      "name": "parties",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 50,
                                      "src": "6593:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                        "typeString": "struct Voting.Party storage ref[] storage ref"
                                      }
                                    },
                                    "id": 722,
                                    "indexExpression": {
                                      "id": 721,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 703,
                                      "src": "6601:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6593:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Party_$18_storage",
                                      "typeString": "struct Voting.Party storage ref"
                                    }
                                  },
                                  "id": 723,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "voteCount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 17,
                                  "src": "6593:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6574:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 725,
                              "nodeType": "ExpressionStatement",
                              "src": "6574:39:0"
                            },
                            {
                              "expression": {
                                "id": 730,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 726,
                                  "name": "winningParty_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 690,
                                  "src": "6631:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                                    "typeString": "struct Voting.Party memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 727,
                                    "name": "parties",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 50,
                                    "src": "6647:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                      "typeString": "struct Voting.Party storage ref[] storage ref"
                                    }
                                  },
                                  "id": 729,
                                  "indexExpression": {
                                    "id": 728,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 703,
                                    "src": "6655:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6647:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Party_$18_storage",
                                    "typeString": "struct Voting.Party storage ref"
                                  }
                                },
                                "src": "6631:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                                  "typeString": "struct Voting.Party memory"
                                }
                              },
                              "id": 731,
                              "nodeType": "ExpressionStatement",
                              "src": "6631:26:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 709,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 706,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 703,
                      "src": "6472:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 707,
                        "name": "parties",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50,
                        "src": "6476:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                          "typeString": "struct Voting.Party storage ref[] storage ref"
                        }
                      },
                      "id": 708,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "6476:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6472:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 735,
                  "initializationExpression": {
                    "assignments": [
                      703
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 703,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "6465:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 735,
                        "src": "6457:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 702,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6457:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 705,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 704,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6469:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "6457:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 711,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "6492:3:0",
                      "subExpression": {
                        "id": 710,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 703,
                        "src": "6492:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 712,
                    "nodeType": "ExpressionStatement",
                    "src": "6492:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "6452:230:0"
                }
              ]
            },
            "functionSelector": "ae315fe4",
            "id": 737,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "winningParty",
            "nameLocation": "6303:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 687,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6315:2:0"
            },
            "returnParameters": {
              "id": 691,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 690,
                  "mutability": "mutable",
                  "name": "winningParty_",
                  "nameLocation": "6353:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 737,
                  "src": "6339:27:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                    "typeString": "struct Voting.Party"
                  },
                  "typeName": {
                    "id": 689,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 688,
                      "name": "Party",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 18,
                      "src": "6339:5:0"
                    },
                    "referencedDeclaration": 18,
                    "src": "6339:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Party_$18_storage_ptr",
                      "typeString": "struct Voting.Party"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6338:29:0"
            },
            "scope": 790,
            "src": "6294:394:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 740,
              "nodeType": "Block",
              "src": "6725:2:0",
              "statements": []
            },
            "functionSelector": "b60d4288",
            "id": 741,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fund",
            "nameLocation": "6703:4:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 738,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6707:2:0"
            },
            "returnParameters": {
              "id": 739,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6725:0:0"
            },
            "scope": 790,
            "src": "6694:33:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 752,
              "nodeType": "Block",
              "src": "6786:45:0",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 748,
                          "name": "this",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -28,
                          "src": "6811:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Voting_$790",
                            "typeString": "contract Voting"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_Voting_$790",
                            "typeString": "contract Voting"
                          }
                        ],
                        "id": 747,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "6803:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 746,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6803:7:0",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 749,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6803:13:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 750,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "src": "6803:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 745,
                  "id": 751,
                  "nodeType": "Return",
                  "src": "6796:28:0"
                }
              ]
            },
            "functionSelector": "c1cfb99a",
            "id": 753,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "get_balance",
            "nameLocation": "6742:11:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 742,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6753:2:0"
            },
            "returnParameters": {
              "id": 745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 744,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 753,
                  "src": "6777:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 743,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6777:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6776:9:0"
            },
            "scope": 790,
            "src": "6733:98:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 771,
              "nodeType": "Block",
              "src": "6879:171:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                          "typeString": "enum Voting.VOTING_STATE"
                        },
                        "id": 762,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 759,
                          "name": "voting_state",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35,
                          "src": "6910:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                            "typeString": "enum Voting.VOTING_STATE"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 760,
                            "name": "VOTING_STATE",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "6926:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_VOTING_STATE_$32_$",
                              "typeString": "type(enum Voting.VOTING_STATE)"
                            }
                          },
                          "id": 761,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "CLOSED",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 31,
                          "src": "6926:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                            "typeString": "enum Voting.VOTING_STATE"
                          }
                        },
                        "src": "6910:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616e27742073746172742061206e6577206c6f74746572792079657421",
                        "id": 763,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6959:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f28339c943e38971af61f71129bc568db91d1b5fe6baee3a0d4da6bc146bcf48",
                          "typeString": "literal_string \"Can't start a new lottery yet!\""
                        },
                        "value": "Can't start a new lottery yet!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f28339c943e38971af61f71129bc568db91d1b5fe6baee3a0d4da6bc146bcf48",
                          "typeString": "literal_string \"Can't start a new lottery yet!\""
                        }
                      ],
                      "id": 758,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6889:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 764,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6889:112:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 765,
                  "nodeType": "ExpressionStatement",
                  "src": "6889:112:0"
                },
                {
                  "expression": {
                    "id": 769,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 766,
                      "name": "voting_state",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35,
                      "src": "7011:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                        "typeString": "enum Voting.VOTING_STATE"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 767,
                        "name": "VOTING_STATE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32,
                        "src": "7026:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_VOTING_STATE_$32_$",
                          "typeString": "type(enum Voting.VOTING_STATE)"
                        }
                      },
                      "id": 768,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "OPEN",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30,
                      "src": "7026:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                        "typeString": "enum Voting.VOTING_STATE"
                      }
                    },
                    "src": "7011:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                      "typeString": "enum Voting.VOTING_STATE"
                    }
                  },
                  "id": 770,
                  "nodeType": "ExpressionStatement",
                  "src": "7011:32:0"
                }
              ]
            },
            "functionSelector": "62d73eb8",
            "id": 772,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 756,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 755,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 176,
                  "src": "6869:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "6869:9:0"
              }
            ],
            "name": "startElection",
            "nameLocation": "6846:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 754,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6859:2:0"
            },
            "returnParameters": {
              "id": 757,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6879:0:0"
            },
            "scope": 790,
            "src": "6837:213:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 788,
              "nodeType": "Block",
              "src": "7106:141:0",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                      "typeString": "enum Voting.VOTING_STATE"
                    },
                    "id": 780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 777,
                      "name": "voting_state",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35,
                      "src": "7120:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                        "typeString": "enum Voting.VOTING_STATE"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 778,
                        "name": "VOTING_STATE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 32,
                        "src": "7136:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_VOTING_STATE_$32_$",
                          "typeString": "type(enum Voting.VOTING_STATE)"
                        }
                      },
                      "id": 779,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "OPEN",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 30,
                      "src": "7136:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_VOTING_STATE_$32",
                        "typeString": "enum Voting.VOTING_STATE"
                      }
                    },
                    "src": "7120:33:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 786,
                    "nodeType": "Block",
                    "src": "7204:37:0",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 784,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7225:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 776,
                        "id": 785,
                        "nodeType": "Return",
                        "src": "7218:12:0"
                      }
                    ]
                  },
                  "id": 787,
                  "nodeType": "IfStatement",
                  "src": "7116:125:0",
                  "trueBody": {
                    "id": 783,
                    "nodeType": "Block",
                    "src": "7155:36:0",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 781,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7176:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 776,
                        "id": 782,
                        "nodeType": "Return",
                        "src": "7169:11:0"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "d659d968",
            "id": 789,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "is_open",
            "nameLocation": "7065:7:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 773,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7072:2:0"
            },
            "returnParameters": {
              "id": 776,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 775,
                  "mutability": "mutable",
                  "name": "state",
                  "nameLocation": "7100:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 789,
                  "src": "7095:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 774,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7095:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7094:12:0"
            },
            "scope": 790,
            "src": "7056:191:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 791,
        "src": "89:7161:0",
        "usedErrors": []
      }
    ],
    "src": "36:7216:0"
  },
  "bytecode": "",
  "bytecodeSha1": "0f23931c1dd712854f33ac40b67e3b08a163815e",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "Voting",
  "coverageMap": {
    "branches": {
      "0": {
        "Voting.getCandidates": {
          "54": [
            2502,
            2521,
            true
          ],
          "55": [
            2658,
            2684,
            false
          ],
          "56": [
            2768,
            2791,
            true
          ],
          "57": [
            3080,
            3106,
            false
          ]
        },
        "Voting.giveRightToVote": {
          "69": [
            3878,
            3909,
            true
          ],
          "70": [
            3914,
            3941,
            true
          ],
          "71": [
            4008,
            4030,
            true
          ]
        },
        "Voting.is_open": {
          "68": [
            7120,
            7153,
            false
          ]
        },
        "Voting.removeRightToVote": {
          "59": [
            4452,
            4483,
            true
          ],
          "60": [
            4488,
            4515,
            true
          ],
          "61": [
            4582,
            4603,
            true
          ]
        },
        "Voting.startElection": {
          "58": [
            6910,
            6945,
            true
          ]
        },
        "Voting.voteCandidate": {
          "62": [
            4857,
            4871,
            true
          ],
          "63": [
            4914,
            4939,
            true
          ],
          "64": [
            5042,
            5073,
            false
          ],
          "65": [
            5177,
            5211,
            true
          ]
        },
        "Voting.voteParty": {
          "52": [
            5510,
            5524,
            true
          ],
          "53": [
            5567,
            5588,
            true
          ]
        },
        "Voting.winningCandidate": {
          "67": [
            6078,
            6128,
            false
          ]
        },
        "Voting.winningParty": {
          "66": [
            6515,
            6554,
            false
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Voting.getCandidates": {
          "9": [
            2494,
            2550
          ],
          "10": [
            2703,
            2726
          ],
          "11": [
            2636,
            2639
          ],
          "12": [
            2760,
            2815
          ],
          "13": [
            3125,
            3164
          ],
          "14": [
            3182,
            3186
          ],
          "15": [
            3058,
            3061
          ],
          "16": [
            3229,
            3256
          ]
        },
        "Voting.getParties": {
          "32": [
            3667,
            3681
          ]
        },
        "Voting.get_balance": {
          "0": [
            6796,
            6824
          ]
        },
        "Voting.giveRightToVote": {
          "43": [
            3856,
            3990
          ],
          "44": [
            4000,
            4057
          ],
          "45": [
            4067,
            4095
          ],
          "46": [
            4105,
            4126
          ],
          "47": [
            4136,
            4175
          ],
          "48": [
            4185,
            4224
          ],
          "49": [
            4234,
            4269
          ],
          "50": [
            4279,
            4311
          ],
          "51": [
            4321,
            4337
          ]
        },
        "Voting.is_open": {
          "41": [
            7169,
            7180
          ],
          "42": [
            7218,
            7230
          ]
        },
        "Voting.removeRightToVote": {
          "19": [
            4430,
            4564
          ],
          "20": [
            4574,
            4640
          ],
          "21": [
            4650,
            4679
          ],
          "22": [
            4689,
            4705
          ]
        },
        "Voting.startElection": {
          "17": [
            6889,
            7001
          ],
          "18": [
            7011,
            7043
          ]
        },
        "Voting.stringToUint": {
          "6": [
            2273,
            2313
          ],
          "7": [
            2074,
            2077
          ],
          "8": [
            2333,
            2343
          ]
        },
        "Voting.voteCandidate": {
          "23": [
            4849,
            4896
          ],
          "24": [
            4906,
            4971
          ],
          "25": [
            5093,
            5099
          ],
          "26": [
            5117,
            5122
          ],
          "27": [
            5020,
            5023
          ],
          "28": [
            5156,
            5271
          ],
          "29": [
            5281,
            5310
          ],
          "30": [
            5320,
            5344
          ],
          "31": [
            5354,
            5385
          ]
        },
        "Voting.voteParty": {
          "1": [
            5502,
            5549
          ],
          "2": [
            5559,
            5616
          ],
          "3": [
            5626,
            5655
          ],
          "4": [
            5665,
            5686
          ],
          "5": [
            5696,
            5727
          ]
        },
        "Voting.winningCandidate": {
          "37": [
            5953,
            5994
          ],
          "38": [
            6148,
            6198
          ],
          "39": [
            6216,
            6257
          ],
          "40": [
            6055,
            6058
          ]
        },
        "Voting.winningParty": {
          "33": [
            6416,
            6442
          ],
          "34": [
            6574,
            6613
          ],
          "35": [
            6631,
            6657
          ],
          "36": [
            6492,
            6495
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "60806040526004361061012a5760003560e01c80638c08a4dc116100ab578063b60d42881161006f578063b60d42881461014f578063b82e1bb21461036a578063beb604e014610397578063c1cfb99a146103ad578063d659d968146103c0578063f972c1c4146103e557600080fd5b80638c08a4dc146102ae578063938d0d0f146102ce578063a3ec138d146102f5578063a8311aa814610326578063ae315fe41461034857600080fd5b80633e39a7a5116100f25780633e39a7a51461020857806362d73eb814610235578063685a9dd81461024a5780636dfbeb5a1461026a57806370651a181461028057600080fd5b806304cee9b31461012f57806318ca28c6146101515780631bd951551461017a5780632e4176cf1461019a5780633477ee2e146101d7575b600080fd5b34801561013b57600080fd5b5061014f61014a3660046116b1565b610405565b005b34801561015d57600080fd5b5061016760045481565b6040519081526020015b60405180910390f35b34801561018657600080fd5b5061016761019536600461176d565b610526565b3480156101a657600080fd5b506000546101bf9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610171565b3480156101e357600080fd5b506101f76101f23660046116b1565b6105ca565b6040516101719594939291906117f7565b34801561021457600080fd5b506102286102233660046116b1565b61071c565b6040516101719190611890565b34801561024157600080fd5b5061014f610a7c565b34801561025657600080fd5b5061014f61026536600461190a565b610b1d565b34801561027657600080fd5b5061016760055481565b34801561028c57600080fd5b506102a061029b3660046116b1565b610c8f565b60405161017192919061192e565b3480156102ba57600080fd5b5061014f6102c93660046116b1565b610d4b565b3480156102da57600080fd5b506000546102e89060ff1681565b6040516101719190611966565b34801561030157600080fd5b5061031561031036600461190a565b610f40565b60405161017195949392919061198e565b34801561033257600080fd5b5061033b610fff565b60405161017191906119f0565b34801561035457600080fd5b5061035d6110fa565b6040516101719190611a45565b34801561037657600080fd5b5061038a6103853660046116b1565b61131e565b6040516101719190611a58565b3480156103a357600080fd5b5061016760065481565b3480156103b957600080fd5b5047610167565b3480156103cc57600080fd5b506103d5611404565b6040519015158152602001610171565b3480156103f157600080fd5b5061014f610400366004611a6b565b611430565b336000908152600160205260409020600281015460ff166104645760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b60448201526064015b60405180910390fd5b600281015462010000900460ff16156104bf5760405162461bcd60e51b815260206004820152601760248201527f616c726561647920766f74656420666f72207061727479000000000000000000604482015260640161045b565b6001600383815481106104d4576104d4611ae1565b906000526020600020906002020160010160008282546104f49190611b0d565b9250508190555060016004600082825461050e9190611b0d565b9091555050600201805461ff00191661010017905550565b60008082815b81518110156105c15760008183516105449190611b25565b9050600083838151811061055a5761055a611ae1565b01602001516001600160f81b03198116915060f81c600061057c603083611b25565b9050610589600185611b25565b61059490600a611c22565b61059e9082611c2e565b6105a89088611b0d565b96505050505080806105b990611c4d565b91505061052c565b50909392505050565b600281815481106105da57600080fd5b600091825260209091206005909102018054600182018054919350906105ff90611c68565b80601f016020809104026020016040519081016040528092919081815260200182805461062b90611c68565b80156106785780601f1061064d57610100808354040283529160200191610678565b820191906000526020600020905b81548152906001019060200180831161065b57829003601f168201915b50505050509080600201805461068d90611c68565b80601f01602080910402602001604051908101604052809291908181526020018280546106b990611c68565b80156107065780601f106106db57610100808354040283529160200191610706565b820191906000526020600020905b8154815290600101906020018083116106e957829003601f168201915b5050505050908060030154908060040154905085565b6002546060908061076f5760405162461bcd60e51b815260206004820152601860248201527f4e6f2063616e6469646174657320726567697374657265640000000000000000604482015260640161045b565b6000805b828110156107c757846002828154811061078f5761078f611ae1565b90600052602060002090600502016003015414156107b5576107b2600183611b0d565b91505b806107bf81611c4d565b915050610773565b506000811161080e5760405162461bcd60e51b8152602060048201526013602482015272139bc818d85b991a59185d195cc8199bdd5b99606a1b604482015260640161045b565b6000808267ffffffffffffffff81111561082a5761082a6116ca565b60405190808252806020026020018201604052801561088d57816020015b61087a6040518060a0016040528060008152602001606081526020016060815260200160008152602001600081525090565b8152602001906001900390816108485790505b50905060005b84811015610a725786600282815481106108af576108af611ae1565b9060005260206000209060050201600301541415610a6057600281815481106108da576108da611ae1565b90600052602060002090600502016040518060a00160405290816000820154815260200160018201805461090d90611c68565b80601f016020809104026020016040519081016040528092919081815260200182805461093990611c68565b80156109865780601f1061095b57610100808354040283529160200191610986565b820191906000526020600020905b81548152906001019060200180831161096957829003601f168201915b5050505050815260200160028201805461099f90611c68565b80601f01602080910402602001604051908101604052809291908181526020018280546109cb90611c68565b8015610a185780601f106109ed57610100808354040283529160200191610a18565b820191906000526020600020905b8154815290600101906020018083116109fb57829003601f168201915b5050505050815260200160038201548152602001600482015481525050828481518110610a4757610a47611ae1565b6020908102919091010152610a5d600184611b0d565b92505b80610a6a81611c4d565b915050610893565b5095945050505050565b60005461010090046001600160a01b03163314610aab5760405162461bcd60e51b815260040161045b90611ca3565b600160005460ff166001811115610ac457610ac4611950565b14610b115760405162461bcd60e51b815260206004820152601e60248201527f43616e27742073746172742061206e6577206c6f747465727920796574210000604482015260640161045b565b6000805460ff19169055565b60005461010090046001600160a01b03163314610b4c5760405162461bcd60e51b815260040161045b90611ca3565b6001600160a01b038116600090815260016020526040902060020154610100900460ff161580610b9e57506001600160a01b03811660009081526001602052604090206002015462010000900460ff16155b610be45760405162461bcd60e51b8152602060048201526017602482015276151a19481d9bdd195c88185b1c9958591e481d9bdd1959604a1b604482015260640161045b565b6001600160a01b03811660009081526001602052604090206002015460ff16610c4f5760405162461bcd60e51b815260206004820181905260248201527f566f74657220646f65736e2774206861766520726967687420746f20766f7465604482015260640161045b565b6001600160a01b03811660009081526001602081905260408220600201805460ff191690556006805491929091610c87908490611b25565b909155505050565b60038181548110610c9f57600080fd5b9060005260206000209060020201600091509050806000018054610cc290611c68565b80601f0160208091040260200160405190810160405280929190818152602001828054610cee90611c68565b8015610d3b5780601f10610d1057610100808354040283529160200191610d3b565b820191906000526020600020905b815481529060010190602001808311610d1e57829003601f168201915b5050505050908060010154905082565b336000908152600160205260408120600281015490919060ff16610da85760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b604482015260640161045b565b6002820154610100900460ff1615610e025760405162461bcd60e51b815260206004820152601b60248201527f616c726561647920766f74656420666f722063616e6469646174650000000000604482015260640161045b565b60005b600254811015610e55578360028281548110610e2357610e23611ae1565b9060005260206000209060050201600001541415610e4357809150610e55565b80610e4d81611c4d565b915050610e05565b5060028181548110610e6957610e69611ae1565b906000526020600020906005020160030154826001015414610ed85760405162461bcd60e51b815260206004820152602260248201527f63616e6e6f7420766f74652063616e64696461746520696e2074686973206172604482015261656160f01b606482015260840161045b565b600160028281548110610eed57610eed611ae1565b90600052602060002090600502016004016000828254610f0d9190611b0d565b92505081905550600160056000828254610f279190611b0d565b909155505050600201805461ff00191661010017905550565b600160205260009081526040902080548190610f5b90611c68565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8790611c68565b8015610fd45780601f10610fa957610100808354040283529160200191610fd4565b820191906000526020600020905b815481529060010190602001808311610fb757829003601f168201915b50505050600183015460029093015491929160ff808216925061010082048116916201000090041685565b60606003805480602002602001604051908101604052809291908181526020016000905b828210156110f1578382906000526020600020906002020160405180604001604052908160008201805461105690611c68565b80601f016020809104026020016040519081016040528092919081815260200182805461108290611c68565b80156110cf5780601f106110a4576101008083540402835291602001916110cf565b820191906000526020600020905b8154815290600101906020018083116110b257829003601f168201915b5050505050815260200160018201548152505081526020019060010190611023565b50505050905090565b6040805180820190915260608152600060208201526000600360008154811061112557611125611ae1565b906000526020600020906002020160405180604001604052908160008201805461114e90611c68565b80601f016020809104026020016040519081016040528092919081815260200182805461117a90611c68565b80156111c75780601f1061119c576101008083540402835291602001916111c7565b820191906000526020600020905b8154815290600101906020018083116111aa57829003601f168201915b50505050508152602001600182015481525050915060005b6003548110156113195781600382815481106111fd576111fd611ae1565b9060005260206000209060020201600101541115611307576003818154811061122857611228611ae1565b90600052602060002090600202016001015491506003818154811061124f5761124f611ae1565b906000526020600020906002020160405180604001604052908160008201805461127890611c68565b80601f01602080910402602001604051908101604052809291908181526020018280546112a490611c68565b80156112f15780601f106112c6576101008083540402835291602001916112f1565b820191906000526020600020905b8154815290600101906020018083116112d457829003601f168201915b5050505050815260200160018201548152505092505b8061131181611c4d565b9150506111df565b505090565b6113506040518060a0016040528060008152602001606081526020016060815260200160008152602001600081525090565b600061135b8361071c565b905060008160008151811061137257611372611ae1565b6020026020010151925060005b82518110156113fc578183828151811061139b5761139b611ae1565b60200260200101516080015111156113ea578281815181106113bf576113bf611ae1565b60200260200101516080015191508281815181106113df576113df611ae1565b602002602001015193505b806113f481611c4d565b91505061137f565b505050919050565b60008060005460ff16600181111561141e5761141e611950565b141561142a5750600190565b50600090565b60005461010090046001600160a01b0316331461145f5760405162461bcd60e51b815260040161045b90611ca3565b6001600160a01b038316600090815260016020526040902060020154610100900460ff1615806114b157506001600160a01b03831660009081526001602052604090206002015462010000900460ff16155b6114f75760405162461bcd60e51b8152602060048201526017602482015276151a19481d9bdd195c88185b1c9958591e481d9bdd1959604a1b604482015260640161045b565b6001600160a01b03831660009081526001602052604090206002015460ff161561155c5760405162461bcd60e51b8152602060048201526016602482015275566f7465722063616e20616c726561647920766f746560501b604482015260640161045b565b6001600160a01b038316600090815260016020818152604090922060028101805460ff1916909217909155835161159592850190611618565b5061159f81610526565b6001600160a01b038416600081815260016020819052604080832091820194909455600201805462ffff0019169055915190919066038d7ea4c680009082818181858883f193505050501580156115fa573d6000803e3d6000fd5b5060016006600082825461160e9190611b0d565b9091555050505050565b82805461162490611c68565b90600052602060002090601f016020900481019282611646576000855561168c565b82601f1061165f57805160ff191683800117855561168c565b8280016001018555821561168c579182015b8281111561168c578251825591602001919060010190611671565b5061169892915061169c565b5090565b5b80821115611698576000815560010161169d565b6000602082840312156116c357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126116f157600080fd5b813567ffffffffffffffff8082111561170c5761170c6116ca565b604051601f8301601f19908116603f01168101908282118183101715611734576117346116ca565b8160405283815286602085880101111561174d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561177f57600080fd5b813567ffffffffffffffff81111561179657600080fd5b6117a2848285016116e0565b949350505050565b6000815180845260005b818110156117d0576020818501810151868301820152016117b4565b818111156117e2576000602083870101525b50601f01601f19169290920160200192915050565b85815260a06020820152600061181060a08301876117aa565b828103604084015261182281876117aa565b60608401959095525050608001529392505050565b805182526000602082015160a0602085015261185660a08501826117aa565b90506040830151848203604086015261186f82826117aa565b91505060608301516060850152608083015160808501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156118e557603f198886030184526118d3858351611837565b945092850192908501906001016118b7565b5092979650505050505050565b6001600160a01b038116811461190757600080fd5b50565b60006020828403121561191c57600080fd5b8135611927816118f2565b9392505050565b60408152600061194160408301856117aa565b90508260208301529392505050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061198857634e487b7160e01b600052602160045260246000fd5b91905290565b60a0815260006119a160a08301886117aa565b602083019690965250921515604084015290151560608301521515608090910152919050565b60008151604084526119dc60408501826117aa565b602093840151949093019390935250919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156118e557603f19888603018452611a338583516119c7565b94509285019290850190600101611a17565b60208152600061192760208301846119c7565b6020815260006119276020830184611837565b600080600060608486031215611a8057600080fd5b8335611a8b816118f2565b9250602084013567ffffffffffffffff80821115611aa857600080fd5b611ab4878388016116e0565b93506040860135915080821115611aca57600080fd5b50611ad7868287016116e0565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611b2057611b20611af7565b500190565b600082821015611b3757611b37611af7565b500390565b600181815b80851115611b77578160001904821115611b5d57611b5d611af7565b80851615611b6a57918102915b93841c9390800290611b41565b509250929050565b600082611b8e57506001611c1c565b81611b9b57506000611c1c565b8160018114611bb15760028114611bbb57611bd7565b6001915050611c1c565b60ff841115611bcc57611bcc611af7565b50506001821b611c1c565b5060208310610133831016604e8410600b8410161715611bfa575081810a611c1c565b611c048383611b3c565b8060001904821115611c1857611c18611af7565b0290505b92915050565b60006119278383611b7f565b6000816000190483118215151615611c4857611c48611af7565b500290565b6000600019821415611c6157611c61611af7565b5060010190565b600181811c90821680611c7c57607f821691505b60208210811415611c9d57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526017908201527f6f6e6c79206f776e65722063616e20757365207468697300000000000000000060408201526060019056fea2646970667358221220acd2e01bb979f3be116cda3d95337718544ef8280ef040595e4c84baeaf4068164736f6c634300080c0033",
  "deployedSourceMap": "89:7161:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5398:336;;;;;;;;;;-1:-1:-1;5398:336:0;;;;;:::i;:::-;;:::i;:::-;;720:33;;;;;;;;;;;;;;;;;;;345:25:1;;;333:2;318:18;720:33:0;;;;;;;;1837:513;;;;;;;;;;-1:-1:-1;1837:513:0;;;;;:::i;:::-;;:::i;575:26::-;;;;;;;;;;-1:-1:-1;575:26:0;;;;;;;-1:-1:-1;;;;;575:26:0;;;;;;-1:-1:-1;;;;;1728:32:1;;;1710:51;;1698:2;1683:18;575:26:0;1564:203:1;657:29:0;;;;;;;;;;-1:-1:-1;657:29:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;2361:902::-;;;;;;;;;;-1:-1:-1;2361:902:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6837:213::-;;;;;;;;;;;;;:::i;4350:362::-;;;;;;;;;;-1:-1:-1;4350:362:0;;;;;:::i;:::-;;:::i;759:37::-;;;;;;;;;;;;;;;;692:22;;;;;;;;;;-1:-1:-1;692:22:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4718:674::-;;;;;;;;;;-1:-1:-1;4718:674:0;;;;;:::i;:::-;;:::i;536:32::-;;;;;;;;;;-1:-1:-1;536:32:0;;;;;;;;;;;;;;;:::i;607:39::-;;;;;;;;;;-1:-1:-1;607:39:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;3598:90::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;6294:394::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;5740:548::-;;;;;;;;;;-1:-1:-1;5740:548:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;802:30::-;;;;;;;;;;;;;;;;6733:98;;;;;;;;;;-1:-1:-1;6803:21:0;6733:98;;7056:191;;;;;;;;;;;;;:::i;:::-;;;7765:14:1;;7758:22;7740:41;;7728:2;7713:18;7056:191:0;7600:187:1;3694:650:0;;;;;;;;;;-1:-1:-1;3694:650:0;;;;;:::i;:::-;;:::i;5398:336::-;5481:10;5451:20;5474:18;;;:6;:18;;;;;5510:14;;;;;;5502:47;;;;-1:-1:-1;;;5502:47:0;;8685:2:1;5502:47:0;;;8667:21:1;8724:2;8704:18;;;8697:30;-1:-1:-1;;;8743:18:1;;;8736:50;8803:18;;5502:47:0;;;;;;;;;5568:20;;;;;;;;;5567:21;5559:57;;;;-1:-1:-1;;;5559:57:0;;9034:2:1;5559:57:0;;;9016:21:1;9073:2;9053:18;;;9046:30;9112:25;9092:18;;;9085:53;9155:18;;5559:57:0;8832:347:1;5559:57:0;5654:1;5626:7;5634:5;5626:14;;;;;;;;:::i;:::-;;;;;;;;;;;:24;;;:29;;;;;;;:::i;:::-;;;;;;;;5685:1;5665:16;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;;5696:24:0;;:31;;-1:-1:-1;;5696:31:0;;;;;-1:-1:-1;5398:336:0:o;1837:513::-;1929:7;;2010:9;1929:7;2030:294;2054:11;:18;2050:1;:22;2030:294;;;2093:11;2128:1;2107:11;:18;:22;;;;:::i;:::-;2093:36;;2143:11;2157;2169:1;2157:14;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;2157:14:0;;;-1:-1:-1;2157:14:0;;2185:10;2238:20;2253:4;2157:14;2238:20;:::i;:::-;2223:35;-1:-1:-1;2303:7:0;2309:1;2303:3;:7;:::i;:::-;2298:13;;:2;:13;:::i;:::-;2281:31;;2289:4;2281:31;:::i;:::-;2273:40;;;;:::i;:::-;;;2079:245;;;;2074:3;;;;;:::i;:::-;;;;2030:294;;;-1:-1:-1;2340:3:0;;1837:513;-1:-1:-1;;;1837:513:0:o;657:29::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;657:29:0;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2361:902::-;2467:10;:17;2414:18;;2502:19;2494:56;;;;-1:-1:-1;;;2494:56:0;;11985:2:1;2494:56:0;;;11967:21:1;12024:2;12004:18;;;11997:30;12063:26;12043:18;;;12036:54;12107:18;;2494:56:0;11783:348:1;2494:56:0;2561:24;;2595:156;2619:15;2615:1;:19;2595:156;;;2680:4;2658:10;2669:1;2658:13;;;;;;;;:::i;:::-;;;;;;;;;;;:18;;;:26;2655:86;;;2703:23;2725:1;2703:23;;:::i;:::-;;;2655:86;2636:3;;;;:::i;:::-;;;;2595:156;;;;2790:1;2768:19;:23;2760:55;;;;-1:-1:-1;;;2760:55:0;;12338:2:1;2760:55:0;;;12320:21:1;12377:2;12357:18;;;12350:30;-1:-1:-1;;;12396:18:1;;;12389:49;12455:18;;2760:55:0;12136:343:1;2760:55:0;2825:6;2929:39;2987:19;2971:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2971:36:0;;;;;;;;;;;;;;;;;2929:78;;3022:9;3017:194;3041:15;3037:1;:19;3017:194;;;3102:4;3080:10;3091:1;3080:13;;;;;;;;:::i;:::-;;;;;;;;;;;:18;;;:26;3077:124;;;3151:10;3162:1;3151:13;;;;;;;;:::i;:::-;;;;;;;;;;;3125:39;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:20;3146:1;3125:23;;;;;;;;:::i;:::-;;;;;;;;;;:39;3182:4;3185:1;3182:4;;:::i;:::-;;;3077:124;3058:3;;;;:::i;:::-;;;;3017:194;;;-1:-1:-1;3236:20:0;2361:902;-1:-1:-1;;;;;2361:902:0:o;6837:213::-;1774:11;;;;;-1:-1:-1;;;;;1774:11:0;1760:10;:25;1752:61;;;;-1:-1:-1;;;1752:61:0;;;;;;;:::i;:::-;6926:19:::1;6910:12;::::0;::::1;;::::0;:35;::::1;;;;;;:::i;:::-;;6889:112;;;::::0;-1:-1:-1;;;6889:112:0;;13038:2:1;6889:112:0::1;::::0;::::1;13020:21:1::0;13077:2;13057:18;;;13050:30;13116:32;13096:18;;;13089:60;13166:18;;6889:112:0::1;12836:354:1::0;6889:112:0::1;7026:17;7011:32:::0;;-1:-1:-1;;7011:32:0::1;::::0;;6837:213::o;4350:362::-;1774:11;;;;;-1:-1:-1;;;;;1774:11:0;1760:10;:25;1752:61;;;;-1:-1:-1;;;1752:61:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;4452:13:0;::::1;;::::0;;;:6:::1;:13;::::0;;;;:31:::1;;::::0;::::1;::::0;::::1;;;4451:32;::::0;:64:::1;;-1:-1:-1::0;;;;;;4488:13:0;::::1;;::::0;;;:6:::1;:13;::::0;;;;:27:::1;;::::0;;;::::1;;;4487:28;4451:64;4430:134;;;::::0;-1:-1:-1;;;4430:134:0;;13397:2:1;4430:134:0::1;::::0;::::1;13379:21:1::0;13436:2;13416:18;;;13409:30;-1:-1:-1;;;13455:18:1;;;13448:53;13518:18;;4430:134:0::1;13195:347:1::0;4430:134:0::1;-1:-1:-1::0;;;;;4582:13:0;::::1;;::::0;;;:6:::1;:13;::::0;;;;:21:::1;;::::0;::::1;;4574:66;;;::::0;-1:-1:-1;;;4574:66:0;;13749:2:1;4574:66:0::1;::::0;::::1;13731:21:1::0;;;13768:18;;;13761:30;13827:34;13807:18;;;13800:62;13879:18;;4574:66:0::1;13547:356:1::0;4574:66:0::1;-1:-1:-1::0;;;;;4650:13:0;::::1;4674:5;4650:13:::0;;;:6:::1;:13;::::0;;;;;;:21:::1;;:29:::0;;-1:-1:-1;;4650:29:0::1;::::0;;4689:11:::1;:16:::0;;4650:6;;4689:11;;:16:::1;::::0;4650:6;;4689:16:::1;:::i;:::-;::::0;;;-1:-1:-1;;;4350:362:0:o;692:22::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4718:674::-;4811:10;4781:20;4804:18;;;:6;:18;;;;;4857:14;;;;4804:18;;4781:20;4857:14;;4849:47;;;;-1:-1:-1;;;4849:47:0;;8685:2:1;4849:47:0;;;8667:21:1;8724:2;8704:18;;;8697:30;-1:-1:-1;;;8743:18:1;;;8736:50;8803:18;;4849:47:0;8483:344:1;4849:47:0;4915:24;;;;;;;;;4914:25;4906:65;;;;-1:-1:-1;;;4906:65:0;;14110:2:1;4906:65:0;;;14092:21:1;14149:2;14129:18;;;14122:30;14188:29;14168:18;;;14161:57;14235:18;;4906:65:0;13908:351:1;4906:65:0;4986:9;4981:166;5001:10;:17;4999:19;;4981:166;;;5062:11;5042:10;5053:1;5042:13;;;;;;;;:::i;:::-;;;;;;;;;;;:16;;;:31;5038:99;;;5098:1;5093:6;;5117:5;;5038:99;5020:3;;;;:::i;:::-;;;;4981:166;;;;5192:10;5203:2;5192:14;;;;;;;;:::i;:::-;;;;;;;;;;;:19;;;5177:6;:11;;;:34;5156:115;;;;-1:-1:-1;;;5156:115:0;;14466:2:1;5156:115:0;;;14448:21:1;14505:2;14485:18;;;14478:30;14544:34;14524:18;;;14517:62;-1:-1:-1;;;14595:18:1;;;14588:32;14637:19;;5156:115:0;14264:398:1;5156:115:0;5309:1;5281:10;5292:2;5281:14;;;;;;;;:::i;:::-;;;;;;;;;;;:24;;;:29;;;;;;;:::i;:::-;;;;;;;;5343:1;5320:20;;:24;;;;;;;:::i;:::-;;;;-1:-1:-1;;;5354:24:0;;:31;;-1:-1:-1;;5354:31:0;;;;;-1:-1:-1;4718:674:0:o;607:39::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;607:39:0;;;;;;;;;;;;;;;;;-1:-1:-1;607:39:0;;;;;;;;;;;:::o;3598:90::-;3641:14;3674:7;3667:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3598:90;:::o;6294:394::-;-1:-1:-1;;;;;;;;;;;;;;;;;6378:24:0;6432:7;6440:1;6432:10;;;;;;;;:::i;:::-;;;;;;;;;;;6416:26;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6457:9;6452:230;6476:7;:14;6472:18;;6452:230;;;6538:16;6515:7;6523:1;6515:10;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;:39;6511:161;;;6593:7;6601:1;6593:10;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;6574:39;;6647:7;6655:1;6647:10;;;;;;;;:::i;:::-;;;;;;;;;;;6631:26;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6511:161;6492:3;;;;:::i;:::-;;;;6452:230;;;;6368:320;6294:394;:::o;5740:548::-;5801:34;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5801:34:0;5846:37;5886:19;5900:4;5886:13;:19::i;:::-;5846:59;;5915:24;5973:18;5992:1;5973:21;;;;;;;;:::i;:::-;;;;;;;5953:41;;6009:9;6004:278;6028:18;:25;6024:1;:29;6004:278;;;6112:16;6078:18;6097:1;6078:21;;;;;;;;:::i;:::-;;;;;;;:31;;;:50;6074:198;;;6167:18;6186:1;6167:21;;;;;;;;:::i;:::-;;;;;;;:31;;;6148:50;;6236:18;6255:1;6236:21;;;;;;;;:::i;:::-;;;;;;;6216:41;;6074:198;6055:3;;;;:::i;:::-;;;;6004:278;;;;5836:452;;5740:548;;;:::o;7056:191::-;7095:10;;7120:12;;;;;:33;;;;;;;:::i;:::-;;7116:125;;;-1:-1:-1;7176:4:0;;7056:191::o;7116:125::-;-1:-1:-1;7225:5:0;;7056:191::o;3694:650::-;1774:11;;;;;-1:-1:-1;;;;;1774:11:0;1760:10;:25;1752:61;;;;-1:-1:-1;;;1752:61:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;3878:13:0;::::1;;::::0;;;:6:::1;:13;::::0;;;;:31:::1;;::::0;::::1;::::0;::::1;;;3877:32;::::0;:64:::1;;-1:-1:-1::0;;;;;;3914:13:0;::::1;;::::0;;;:6:::1;:13;::::0;;;;:27:::1;;::::0;;;::::1;;;3913:28;3877:64;3856:134;;;::::0;-1:-1:-1;;;3856:134:0;;13397:2:1;3856:134:0::1;::::0;::::1;13379:21:1::0;13436:2;13416:18;;;13409:30;-1:-1:-1;;;13455:18:1;;;13448:53;13518:18;;3856:134:0::1;13195:347:1::0;3856:134:0::1;-1:-1:-1::0;;;;;4009:13:0;::::1;;::::0;;;:6:::1;:13;::::0;;;;:21:::1;;::::0;::::1;;4008:22;4000:57;;;::::0;-1:-1:-1;;;4000:57:0;;14869:2:1;4000:57:0::1;::::0;::::1;14851:21:1::0;14908:2;14888:18;;;14881:30;-1:-1:-1;;;14927:18:1;;;14920:52;14989:18;;4000:57:0::1;14667:346:1::0;4000:57:0::1;-1:-1:-1::0;;;;;4067:13:0;::::1;;::::0;;;4091:4:::1;4067:13;::::0;;;;;;;:21:::1;::::0;::::1;:28:::0;;-1:-1:-1;;4067:28:0::1;::::0;;::::1;::::0;;;4105:21;;::::1;::::0;;::::1;::::0;::::1;:::i;:::-;;4157:18;4170:4;4157:12;:18::i;:::-;-1:-1:-1::0;;;;;4136:13:0;::::1;;::::0;;;:6:::1;:13;::::0;;;;;;;:18;;::::1;:39:::0;;;;4185:31:::1;;:39:::0;;-1:-1:-1;;4234:35:0;;;4279:32;;4136:13;;;4294:16:::1;::::0;4136:13;4279:32;4136:13;4279:32;4294:16;4136:13;;4279:32:::1;;;;;;;;;;;;;::::0;::::1;;;;;;4336:1;4321:11;;:16;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;;;3694:650:0:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:180:1;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;381:127::-;442:10;437:3;433:20;430:1;423:31;473:4;470:1;463:15;497:4;494:1;487:15;513:719;556:5;609:3;602:4;594:6;590:17;586:27;576:55;;627:1;624;617:12;576:55;663:6;650:20;689:18;726:2;722;719:10;716:36;;;732:18;;:::i;:::-;807:2;801:9;775:2;861:13;;-1:-1:-1;;857:22:1;;;881:2;853:31;849:40;837:53;;;905:18;;;925:22;;;902:46;899:72;;;951:18;;:::i;:::-;991:10;987:2;980:22;1026:2;1018:6;1011:18;1072:3;1065:4;1060:2;1052:6;1048:15;1044:26;1041:35;1038:55;;;1089:1;1086;1079:12;1038:55;1153:2;1146:4;1138:6;1134:17;1127:4;1119:6;1115:17;1102:54;1200:1;1193:4;1188:2;1180:6;1176:15;1172:26;1165:37;1220:6;1211:15;;;;;;513:719;;;;:::o;1237:322::-;1306:6;1359:2;1347:9;1338:7;1334:23;1330:32;1327:52;;;1375:1;1372;1365:12;1327:52;1415:9;1402:23;1448:18;1440:6;1437:30;1434:50;;;1480:1;1477;1470:12;1434:50;1503;1545:7;1536:6;1525:9;1521:22;1503:50;:::i;:::-;1493:60;1237:322;-1:-1:-1;;;;1237:322:1:o;1772:472::-;1814:3;1852:5;1846:12;1879:6;1874:3;1867:19;1904:1;1914:162;1928:6;1925:1;1922:13;1914:162;;;1990:4;2046:13;;;2042:22;;2036:29;2018:11;;;2014:20;;2007:59;1943:12;1914:162;;;2094:6;2091:1;2088:13;2085:87;;;2160:1;2153:4;2144:6;2139:3;2135:16;2131:27;2124:38;2085:87;-1:-1:-1;2226:2:1;2205:15;-1:-1:-1;;2201:29:1;2192:39;;;;2233:4;2188:50;;1772:472;-1:-1:-1;;1772:472:1:o;2249:599::-;2530:6;2519:9;2512:25;2573:3;2568:2;2557:9;2553:18;2546:31;2493:4;2600:46;2641:3;2630:9;2626:19;2618:6;2600:46;:::i;:::-;2694:9;2686:6;2682:22;2677:2;2666:9;2662:18;2655:50;2722:33;2748:6;2740;2722:33;:::i;:::-;2786:2;2771:18;;2764:34;;;;-1:-1:-1;;2829:3:1;2814:19;2807:35;2714:41;2249:599;-1:-1:-1;;;2249:599:1:o;2853:555::-;2941:5;2935:12;2930:3;2923:25;2905:3;2994:4;2987:5;2983:16;2977:23;3032:4;3025;3020:3;3016:14;3009:28;3058:47;3099:4;3094:3;3090:14;3076:12;3058:47;:::i;:::-;3046:59;;3153:4;3146:5;3142:16;3136:23;3201:3;3195:4;3191:14;3184:4;3179:3;3175:14;3168:38;3229:39;3263:4;3247:14;3229:39;:::i;:::-;3215:53;;;3317:4;3310:5;3306:16;3300:23;3293:4;3288:3;3284:14;3277:47;3373:4;3366:5;3362:16;3356:23;3349:4;3344:3;3340:14;3333:47;3396:6;3389:13;;;2853:555;;;;:::o;3413:843::-;3605:4;3634:2;3674;3663:9;3659:18;3704:2;3693:9;3686:21;3727:6;3762;3756:13;3793:6;3785;3778:22;3831:2;3820:9;3816:18;3809:25;;3893:2;3883:6;3880:1;3876:14;3865:9;3861:30;3857:39;3843:53;;3931:2;3923:6;3919:15;3952:1;3962:265;3976:6;3973:1;3970:13;3962:265;;;4069:2;4065:7;4053:9;4045:6;4041:22;4037:36;4032:3;4025:49;4097:50;4140:6;4131;4125:13;4097:50;:::i;:::-;4087:60;-1:-1:-1;4205:12:1;;;;4170:15;;;;3998:1;3991:9;3962:265;;;-1:-1:-1;4244:6:1;;3413:843;-1:-1:-1;;;;;;;3413:843:1:o;4261:131::-;-1:-1:-1;;;;;4336:31:1;;4326:42;;4316:70;;4382:1;4379;4372:12;4316:70;4261:131;:::o;4397:247::-;4456:6;4509:2;4497:9;4488:7;4484:23;4480:32;4477:52;;;4525:1;4522;4515:12;4477:52;4564:9;4551:23;4583:31;4608:5;4583:31;:::i;:::-;4633:5;4397:247;-1:-1:-1;;;4397:247:1:o;4649:291::-;4826:2;4815:9;4808:21;4789:4;4846:45;4887:2;4876:9;4872:18;4864:6;4846:45;:::i;:::-;4838:53;;4927:6;4922:2;4911:9;4907:18;4900:34;4649:291;;;;;:::o;4945:127::-;5006:10;5001:3;4997:20;4994:1;4987:31;5037:4;5034:1;5027:15;5061:4;5058:1;5051:15;5077:343;5224:2;5209:18;;5257:1;5246:13;;5236:144;;5302:10;5297:3;5293:20;5290:1;5283:31;5337:4;5334:1;5327:15;5365:4;5362:1;5355:15;5236:144;5389:25;;;5077:343;:::o;5425:537::-;5668:3;5657:9;5650:22;5631:4;5689:46;5730:3;5719:9;5715:19;5707:6;5689:46;:::i;:::-;5766:2;5751:18;;5744:34;;;;-1:-1:-1;5821:14:1;;5814:22;5809:2;5794:18;;5787:50;5880:14;;5873:22;5868:2;5853:18;;5846:50;5940:14;5933:22;5927:3;5912:19;;;5905:51;5681:54;5425:537;-1:-1:-1;5425:537:1:o;5967:274::-;6015:3;6059:5;6053:12;6086:4;6081:3;6074:17;6112:47;6153:4;6148:3;6144:14;6130:12;6112:47;:::i;:::-;6208:4;6197:16;;;6191:23;6175:14;;;;6168:47;;;;-1:-1:-1;6100:59:1;5967:274;-1:-1:-1;5967:274:1:o;6246:831::-;6430:4;6459:2;6499;6488:9;6484:18;6529:2;6518:9;6511:21;6552:6;6587;6581:13;6618:6;6610;6603:22;6656:2;6645:9;6641:18;6634:25;;6718:2;6708:6;6705:1;6701:14;6690:9;6686:30;6682:39;6668:53;;6756:2;6748:6;6744:15;6777:1;6787:261;6801:6;6798:1;6795:13;6787:261;;;6894:2;6890:7;6878:9;6870:6;6866:22;6862:36;6857:3;6850:49;6922:46;6961:6;6952;6946:13;6922:46;:::i;:::-;6912:56;-1:-1:-1;7026:12:1;;;;6991:15;;;;6823:1;6816:9;6787:261;;7082:248;7253:2;7242:9;7235:21;7216:4;7273:51;7320:2;7309:9;7305:18;7297:6;7273:51;:::i;7335:260::-;7514:2;7503:9;7496:21;7477:4;7534:55;7585:2;7574:9;7570:18;7562:6;7534:55;:::i;7792:686::-;7897:6;7905;7913;7966:2;7954:9;7945:7;7941:23;7937:32;7934:52;;;7982:1;7979;7972:12;7934:52;8021:9;8008:23;8040:31;8065:5;8040:31;:::i;:::-;8090:5;-1:-1:-1;8146:2:1;8131:18;;8118:32;8169:18;8199:14;;;8196:34;;;8226:1;8223;8216:12;8196:34;8249:50;8291:7;8282:6;8271:9;8267:22;8249:50;:::i;:::-;8239:60;;8352:2;8341:9;8337:18;8324:32;8308:48;;8381:2;8371:8;8368:16;8365:36;;;8397:1;8394;8387:12;8365:36;;8420:52;8464:7;8453:8;8442:9;8438:24;8420:52;:::i;:::-;8410:62;;;7792:686;;;;;:::o;9184:127::-;9245:10;9240:3;9236:20;9233:1;9226:31;9276:4;9273:1;9266:15;9300:4;9297:1;9290:15;9316:127;9377:10;9372:3;9368:20;9365:1;9358:31;9408:4;9405:1;9398:15;9432:4;9429:1;9422:15;9448:128;9488:3;9519:1;9515:6;9512:1;9509:13;9506:39;;;9525:18;;:::i;:::-;-1:-1:-1;9561:9:1;;9448:128::o;9581:125::-;9621:4;9649:1;9646;9643:8;9640:34;;;9654:18;;:::i;:::-;-1:-1:-1;9691:9:1;;9581:125::o;9711:422::-;9800:1;9843:5;9800:1;9857:270;9878:7;9868:8;9865:21;9857:270;;;9937:4;9933:1;9929:6;9925:17;9919:4;9916:27;9913:53;;;9946:18;;:::i;:::-;9996:7;9986:8;9982:22;9979:55;;;10016:16;;;;9979:55;10095:22;;;;10055:15;;;;9857:270;;;9861:3;9711:422;;;;;:::o;10138:806::-;10187:5;10217:8;10207:80;;-1:-1:-1;10258:1:1;10272:5;;10207:80;10306:4;10296:76;;-1:-1:-1;10343:1:1;10357:5;;10296:76;10388:4;10406:1;10401:59;;;;10474:1;10469:130;;;;10381:218;;10401:59;10431:1;10422:10;;10445:5;;;10469:130;10506:3;10496:8;10493:17;10490:43;;;10513:18;;:::i;:::-;-1:-1:-1;;10569:1:1;10555:16;;10584:5;;10381:218;;10683:2;10673:8;10670:16;10664:3;10658:4;10655:13;10651:36;10645:2;10635:8;10632:16;10627:2;10621:4;10618:12;10614:35;10611:77;10608:159;;;-1:-1:-1;10720:19:1;;;10752:5;;10608:159;10799:34;10824:8;10818:4;10799:34;:::i;:::-;10869:6;10865:1;10861:6;10857:19;10848:7;10845:32;10842:58;;;10880:18;;:::i;:::-;10918:20;;-1:-1:-1;10138:806:1;;;;;:::o;10949:131::-;11009:5;11038:36;11065:8;11059:4;11038:36;:::i;11085:168::-;11125:7;11191:1;11187;11183:6;11179:14;11176:1;11173:21;11168:1;11161:9;11154:17;11150:45;11147:71;;;11198:18;;:::i;:::-;-1:-1:-1;11238:9:1;;11085:168::o;11258:135::-;11297:3;-1:-1:-1;;11318:17:1;;11315:43;;;11338:18;;:::i;:::-;-1:-1:-1;11385:1:1;11374:13;;11258:135::o;11398:380::-;11477:1;11473:12;;;;11520;;;11541:61;;11595:4;11587:6;11583:17;11573:27;;11541:61;11648:2;11640:6;11637:14;11617:18;11614:38;11611:161;;;11694:10;11689:3;11685:20;11682:1;11675:31;11729:4;11726:1;11719:15;11757:4;11754:1;11747:15;11611:161;;11398:380;;;:::o;12484:347::-;12686:2;12668:21;;;12725:2;12705:18;;;12698:30;12764:25;12759:2;12744:18;;12737:53;12822:2;12807:18;;12484:347::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    89,
    7250
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C08A4DC GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xB60D4288 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xB60D4288 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xB82E1BB2 EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0xBEB604E0 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xC1CFB99A EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0xD659D968 EQ PUSH2 0x3C0 JUMPI DUP1 PUSH4 0xF972C1C4 EQ PUSH2 0x3E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C08A4DC EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0x938D0D0F EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x2F5 JUMPI DUP1 PUSH4 0xA8311AA8 EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0xAE315FE4 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3E39A7A5 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x3E39A7A5 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x62D73EB8 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0x685A9DD8 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x6DFBEB5A EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x70651A18 EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CEE9B3 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x18CA28C6 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x1BD95155 EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x2E4176CF EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x3477EE2E EQ PUSH2 0x1D7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0x405 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x176D JUMP JUMPDEST PUSH2 0x526 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x1BF SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x171 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x1F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0x5CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x228 PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0x71C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0x1890 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0xA7C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x265 CALLDATASIZE PUSH1 0x4 PUSH2 0x190A JUMP JUMPDEST PUSH2 0xB1D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A0 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP3 SWAP2 SWAP1 PUSH2 0x192E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0xD4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x2E8 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0x1966 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x315 PUSH2 0x310 CALLDATASIZE PUSH1 0x4 PUSH2 0x190A JUMP JUMPDEST PUSH2 0xF40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x198E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH2 0xFFF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0x19F0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x35D PUSH2 0x10FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0x1A45 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38A PUSH2 0x385 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B1 JUMP JUMPDEST PUSH2 0x131E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x171 SWAP2 SWAP1 PUSH2 0x1A58 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x167 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE PUSH2 0x167 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D5 PUSH2 0x1404 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x171 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x400 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A6B JUMP JUMPDEST PUSH2 0x1430 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x464 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x486173206E6F20726967687420746F20766F7465 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x4BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616C726561647920766F74656420666F72207061727479000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x4D4 JUMPI PUSH2 0x4D4 PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4F4 SWAP2 SWAP1 PUSH2 0x1B0D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x50E SWAP2 SWAP1 PUSH2 0x1B0D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP2 DUP4 MLOAD PUSH2 0x544 SWAP2 SWAP1 PUSH2 0x1B25 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x55A JUMPI PUSH2 0x55A PUSH2 0x1AE1 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 AND SWAP2 POP PUSH1 0xF8 SHR PUSH1 0x0 PUSH2 0x57C PUSH1 0x30 DUP4 PUSH2 0x1B25 JUMP JUMPDEST SWAP1 POP PUSH2 0x589 PUSH1 0x1 DUP6 PUSH2 0x1B25 JUMP JUMPDEST PUSH2 0x594 SWAP1 PUSH1 0xA PUSH2 0x1C22 JUMP JUMPDEST PUSH2 0x59E SWAP1 DUP3 PUSH2 0x1C2E JUMP JUMPDEST PUSH2 0x5A8 SWAP1 DUP9 PUSH2 0x1B0D JUMP JUMPDEST SWAP7 POP POP POP POP POP DUP1 DUP1 PUSH2 0x5B9 SWAP1 PUSH2 0x1C4D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x52C JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x5DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP2 SWAP4 POP SWAP1 PUSH2 0x5FF SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x62B SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x678 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x64D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x678 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x65B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x68D SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6B9 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x706 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6DB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x706 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6E9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP6 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x60 SWAP1 DUP1 PUSH2 0x76F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F2063616E6469646174657320726567697374657265640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7C7 JUMPI DUP5 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x78F JUMPI PUSH2 0x78F PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x3 ADD SLOAD EQ ISZERO PUSH2 0x7B5 JUMPI PUSH2 0x7B2 PUSH1 0x1 DUP4 PUSH2 0x1B0D JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH2 0x7BF DUP2 PUSH2 0x1C4D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x773 JUMP JUMPDEST POP PUSH1 0x0 DUP2 GT PUSH2 0x80E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x139BC818D85B991A59185D195CC8199BDD5B99 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x82A JUMPI PUSH2 0x82A PUSH2 0x16CA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x88D JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x87A PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x848 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA72 JUMPI DUP7 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8AF JUMPI PUSH2 0x8AF PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x3 ADD SLOAD EQ ISZERO PUSH2 0xA60 JUMPI PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x8DA JUMPI PUSH2 0x8DA PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x90D SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x939 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x986 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x95B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x986 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x969 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH2 0x99F SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9CB SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA18 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA18 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP3 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xA47 JUMPI PUSH2 0xA47 PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0xA5D PUSH1 0x1 DUP5 PUSH2 0x1B0D JUMP JUMPDEST SWAP3 POP JUMPDEST DUP1 PUSH2 0xA6A DUP2 PUSH2 0x1C4D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x893 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAAB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x45B SWAP1 PUSH2 0x1CA3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xAC4 JUMPI PUSH2 0xAC4 PUSH2 0x1950 JUMP JUMPDEST EQ PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E27742073746172742061206E6577206C6F747465727920796574210000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB4C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x45B SWAP1 PUSH2 0x1CA3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0xB9E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xBE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959 PUSH1 0x4A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xC4F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F74657220646F65736E2774206861766520726967687420746F20766F7465 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0xC87 SWAP1 DUP5 SWAP1 PUSH2 0x1B25 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0xCC2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCEE SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD3B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD10 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD3B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD1E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x486173206E6F20726967687420746F20766F7465 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE02 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616C726561647920766F74656420666F722063616E6469646174650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0xE55 JUMPI DUP4 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xE23 JUMPI PUSH2 0xE23 PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0xE43 JUMPI DUP1 SWAP2 POP PUSH2 0xE55 JUMP JUMPDEST DUP1 PUSH2 0xE4D DUP2 PUSH2 0x1C4D JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE05 JUMP JUMPDEST POP PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xE69 JUMPI PUSH2 0xE69 PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x3 ADD SLOAD DUP3 PUSH1 0x1 ADD SLOAD EQ PUSH2 0xED8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F7420766F74652063616E64696461746520696E2074686973206172 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6561 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xEED JUMPI PUSH2 0xEED PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF0D SWAP2 SWAP1 PUSH2 0x1B0D JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF27 SWAP2 SWAP1 PUSH2 0x1B0D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0xF5B SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF87 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFD4 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFA9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFD4 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFB7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x2 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP3 POP PUSH2 0x100 DUP3 DIV DUP2 AND SWAP2 PUSH3 0x10000 SWAP1 DIV AND DUP6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x10F1 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x1056 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1082 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10CF JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x10A4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10CF JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x10B2 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1023 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x1125 JUMPI PUSH2 0x1125 PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x114E SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x117A SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11C7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x119C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11C7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x11AA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP2 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0x1319 JUMPI DUP2 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x11FD JUMPI PUSH2 0x11FD PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0x1307 JUMPI PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1228 JUMPI PUSH2 0x1228 PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x124F JUMPI PUSH2 0x124F PUSH2 0x1AE1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x1278 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x12A4 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x12F1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x12C6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x12F1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x12D4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP3 POP JUMPDEST DUP1 PUSH2 0x1311 DUP2 PUSH2 0x1C4D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11DF JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH2 0x1350 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135B DUP4 PUSH2 0x71C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1372 JUMPI PUSH2 0x1372 PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x13FC JUMPI DUP2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x139B JUMPI PUSH2 0x139B PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD GT ISZERO PUSH2 0x13EA JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x13BF JUMPI PUSH2 0x13BF PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD SWAP2 POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x13DF JUMPI PUSH2 0x13DF PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST DUP1 PUSH2 0x13F4 DUP2 PUSH2 0x1C4D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x137F JUMP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x141E JUMPI PUSH2 0x141E PUSH2 0x1950 JUMP JUMPDEST EQ ISZERO PUSH2 0x142A JUMPI POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x145F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x45B SWAP1 PUSH2 0x1CA3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x14B1 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x14F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959 PUSH1 0x4A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x155C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x566F7465722063616E20616C726561647920766F7465 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x45B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE DUP4 MLOAD PUSH2 0x1595 SWAP3 DUP6 ADD SWAP1 PUSH2 0x1618 JUMP JUMPDEST POP PUSH2 0x159F DUP2 PUSH2 0x526 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP2 DUP3 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH3 0xFFFF00 NOT AND SWAP1 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH7 0x38D7EA4C68000 SWAP1 DUP3 DUP2 DUP2 DUP2 DUP6 DUP9 DUP4 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x15FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x160E SWAP2 SWAP1 PUSH2 0x1B0D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1624 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1646 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x168C JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x165F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x168C JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x168C JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x168C JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1671 JUMP JUMPDEST POP PUSH2 0x1698 SWAP3 SWAP2 POP PUSH2 0x169C JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x169D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x16F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x170C JUMPI PUSH2 0x170C PUSH2 0x16CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1734 JUMPI PUSH2 0x1734 PUSH2 0x16CA JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x174D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x177F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17A2 DUP5 DUP3 DUP6 ADD PUSH2 0x16E0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17D0 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x17B4 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x17E2 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP6 DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1810 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x17AA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1822 DUP2 DUP8 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1856 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x17AA JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x186F DUP3 DUP3 PUSH2 0x17AA JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x18E5 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x18D3 DUP6 DUP4 MLOAD PUSH2 0x1837 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x18B7 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1907 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x191C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1927 DUP2 PUSH2 0x18F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1941 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x17AA JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x2 DUP4 LT PUSH2 0x1988 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x19A1 PUSH1 0xA0 DUP4 ADD DUP9 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP7 SWAP1 SWAP7 MSTORE POP SWAP3 ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x40 DUP5 MSTORE PUSH2 0x19DC PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x20 SWAP4 DUP5 ADD MLOAD SWAP5 SWAP1 SWAP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x18E5 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x1A33 DUP6 DUP4 MLOAD PUSH2 0x19C7 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A17 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1927 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1927 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1837 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1A8B DUP2 PUSH2 0x18F2 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1AA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AB4 DUP8 DUP4 DUP9 ADD PUSH2 0x16E0 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1ACA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AD7 DUP7 DUP3 DUP8 ADD PUSH2 0x16E0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1B20 JUMPI PUSH2 0x1B20 PUSH2 0x1AF7 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1B37 JUMPI PUSH2 0x1B37 PUSH2 0x1AF7 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1B77 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1B5D JUMPI PUSH2 0x1B5D PUSH2 0x1AF7 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1B6A JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1B41 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B8E JUMPI POP PUSH1 0x1 PUSH2 0x1C1C JUMP JUMPDEST DUP2 PUSH2 0x1B9B JUMPI POP PUSH1 0x0 PUSH2 0x1C1C JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1BB1 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1BBB JUMPI PUSH2 0x1BD7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1C1C JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1BCC JUMPI PUSH2 0x1BCC PUSH2 0x1AF7 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x1C1C JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1BFA JUMPI POP DUP2 DUP2 EXP PUSH2 0x1C1C JUMP JUMPDEST PUSH2 0x1C04 DUP4 DUP4 PUSH2 0x1B3C JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1C18 JUMPI PUSH2 0x1C18 PUSH2 0x1AF7 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1927 DUP4 DUP4 PUSH2 0x1B7F JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1C48 JUMPI PUSH2 0x1C48 PUSH2 0x1AF7 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1C61 JUMPI PUSH2 0x1C61 PUSH2 0x1AF7 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1C7C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1C9D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x6F6E6C79206F776E65722063616E207573652074686973000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0xD2 0xE0 SHL 0xB9 PUSH26 0xF3BE116CDA3D95337718544EF8280EF040595E4C84BAEAF40681 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12A"
    },
    "12": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8C08A4DC"
    },
    "25": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "GT",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAB"
    },
    "29": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xB60D4288"
    },
    "36": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "GT",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6F"
    },
    "40": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xB60D4288"
    },
    "47": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "51": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xB82E1BB2"
    },
    "58": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "59": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36A"
    },
    "62": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "63": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "64": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xBEB604E0"
    },
    "69": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "70": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x397"
    },
    "73": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "74": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "75": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xC1CFB99A"
    },
    "80": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "81": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3AD"
    },
    "84": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "85": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "86": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD659D968"
    },
    "91": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "92": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3C0"
    },
    "95": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "96": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "97": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xF972C1C4"
    },
    "102": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "103": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3E5"
    },
    "106": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "107": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "109": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "110": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "REVERT",
      "path": "0"
    },
    "111": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "112": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "113": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8C08A4DC"
    },
    "118": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "119": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2AE"
    },
    "122": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "123": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "124": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x938D0D0F"
    },
    "129": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "130": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2CE"
    },
    "133": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "134": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "135": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA3EC138D"
    },
    "140": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "141": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F5"
    },
    "144": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "145": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "146": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA8311AA8"
    },
    "151": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "152": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x326"
    },
    "155": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "156": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "157": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xAE315FE4"
    },
    "162": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "163": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x348"
    },
    "166": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "167": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "169": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "170": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "REVERT",
      "path": "0"
    },
    "171": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "172": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "173": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3E39A7A5"
    },
    "178": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "GT",
      "path": "0"
    },
    "179": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF2"
    },
    "182": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "183": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "184": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3E39A7A5"
    },
    "189": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "190": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x208"
    },
    "193": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "194": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "195": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x62D73EB8"
    },
    "200": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "201": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x235"
    },
    "204": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "205": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "206": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x685A9DD8"
    },
    "211": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "212": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24A"
    },
    "215": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "216": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "217": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6DFBEB5A"
    },
    "222": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "223": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x26A"
    },
    "226": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "227": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "228": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70651A18"
    },
    "233": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "234": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x280"
    },
    "237": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "238": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "240": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "241": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "REVERT",
      "path": "0"
    },
    "242": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "243": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "244": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x4CEE9B3"
    },
    "249": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "250": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12F"
    },
    "253": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "254": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "255": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x18CA28C6"
    },
    "260": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "261": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x151"
    },
    "264": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "265": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "266": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x1BD95155"
    },
    "271": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "272": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17A"
    },
    "275": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "276": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "277": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2E4176CF"
    },
    "282": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "283": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19A"
    },
    "286": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "287": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "288": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3477EE2E"
    },
    "293": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "EQ",
      "path": "0"
    },
    "294": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D7"
    },
    "297": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "298": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "299": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "301": {
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "DUP1",
      "path": "0"
    },
    "302": {
      "first_revert": true,
      "fn": null,
      "offset": [
        89,
        7250
      ],
      "op": "REVERT",
      "path": "0"
    },
    "303": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "304": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "305": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "DUP1",
      "path": "0"
    },
    "306": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "307": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13B"
    },
    "310": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "311": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "313": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "DUP1",
      "path": "0"
    },
    "314": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "REVERT",
      "path": "0"
    },
    "315": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "316": {
      "op": "POP"
    },
    "317": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "320": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14A"
    },
    "323": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "324": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "326": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B1"
    },
    "329": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMP",
      "path": "0"
    },
    "330": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "331": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x405"
    },
    "334": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMP",
      "path": "0"
    },
    "335": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "336": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "STOP",
      "path": "0"
    },
    "337": {
      "offset": [
        720,
        753
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "338": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "339": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "DUP1",
      "path": "0"
    },
    "340": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "341": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15D"
    },
    "344": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "345": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "347": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "DUP1",
      "path": "0"
    },
    "348": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "REVERT",
      "path": "0"
    },
    "349": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "350": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "POP",
      "path": "0"
    },
    "351": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x167"
    },
    "354": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "356": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "357": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "DUP2",
      "path": "0"
    },
    "358": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "JUMP",
      "path": "0"
    },
    "359": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "360": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "362": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "363": {
      "op": "SWAP1"
    },
    "364": {
      "op": "DUP2"
    },
    "365": {
      "op": "MSTORE"
    },
    "366": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "368": {
      "op": "ADD"
    },
    "369": {
      "offset": [
        720,
        753
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "370": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "372": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "373": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "DUP1",
      "path": "0"
    },
    "374": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "375": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "SUB",
      "path": "0"
    },
    "376": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "377": {
      "fn": "Voting.voteParty",
      "offset": [
        720,
        753
      ],
      "op": "RETURN",
      "path": "0"
    },
    "378": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "379": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "380": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "DUP1",
      "path": "0"
    },
    "381": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "382": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x186"
    },
    "385": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "386": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "388": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "DUP1",
      "path": "0"
    },
    "389": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "REVERT",
      "path": "0"
    },
    "390": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "391": {
      "op": "POP"
    },
    "392": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x167"
    },
    "395": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195"
    },
    "398": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "399": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "401": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x176D"
    },
    "404": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1837,
        2350
      ],
      "op": "JUMP",
      "path": "0"
    },
    "405": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "406": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x526"
    },
    "409": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1837,
        2350
      ],
      "op": "JUMP",
      "path": "0"
    },
    "410": {
      "offset": [
        575,
        601
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "411": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "412": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "DUP1",
      "path": "0"
    },
    "413": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "414": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A6"
    },
    "417": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "418": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "420": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "DUP1",
      "path": "0"
    },
    "421": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "REVERT",
      "path": "0"
    },
    "422": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "423": {
      "op": "POP"
    },
    "424": {
      "offset": [
        575,
        601
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "426": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "427": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1BF"
    },
    "430": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "431": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "434": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "435": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "DIV",
      "path": "0"
    },
    "436": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "438": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "440": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "442": {
      "op": "SHL"
    },
    "443": {
      "op": "SUB"
    },
    "444": {
      "offset": [
        575,
        601
      ],
      "op": "AND",
      "path": "0"
    },
    "445": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "DUP2",
      "path": "0"
    },
    "446": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "JUMP",
      "path": "0"
    },
    "447": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "448": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "450": {
      "fn": "Voting.stringToUint",
      "offset": [
        575,
        601
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "451": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "453": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "455": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "457": {
      "op": "SHL"
    },
    "458": {
      "op": "SUB"
    },
    "459": {
      "op": "SWAP1"
    },
    "460": {
      "op": "SWAP2"
    },
    "461": {
      "op": "AND"
    },
    "462": {
      "op": "DUP2"
    },
    "463": {
      "op": "MSTORE"
    },
    "464": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "466": {
      "op": "ADD"
    },
    "467": {
      "offset": [
        575,
        601
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "470": {
      "op": "JUMP"
    },
    "471": {
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "472": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "473": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "474": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "475": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E3"
    },
    "478": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "479": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "481": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "482": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "REVERT",
      "path": "0"
    },
    "483": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "484": {
      "op": "POP"
    },
    "485": {
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F7"
    },
    "488": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F2"
    },
    "491": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "492": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "494": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B1"
    },
    "497": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "498": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "499": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5CA"
    },
    "502": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "503": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "504": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "506": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "507": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "510": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "511": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "512": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "513": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "514": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "515": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "516": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17F7"
    },
    "519": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "520": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "521": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "522": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "DUP1",
      "path": "0"
    },
    "523": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "524": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x214"
    },
    "527": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "528": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "530": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "DUP1",
      "path": "0"
    },
    "531": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "REVERT",
      "path": "0"
    },
    "532": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "533": {
      "op": "POP"
    },
    "534": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x228"
    },
    "537": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x223"
    },
    "540": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "541": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "543": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B1"
    },
    "546": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMP",
      "path": "0"
    },
    "547": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "548": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x71C"
    },
    "551": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMP",
      "path": "0"
    },
    "552": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "553": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "555": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "556": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "559": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "560": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "561": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1890"
    },
    "564": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMP",
      "path": "0"
    },
    "565": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "566": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "567": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "DUP1",
      "path": "0"
    },
    "568": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "569": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x241"
    },
    "572": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "573": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "575": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "DUP1",
      "path": "0"
    },
    "576": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "REVERT",
      "path": "0"
    },
    "577": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "578": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "POP",
      "path": "0"
    },
    "579": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "582": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA7C"
    },
    "585": {
      "fn": "Voting.startElection",
      "jump": "i",
      "offset": [
        6837,
        7050
      ],
      "op": "JUMP",
      "path": "0"
    },
    "586": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "587": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "588": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "DUP1",
      "path": "0"
    },
    "589": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "590": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x256"
    },
    "593": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "594": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "596": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "DUP1",
      "path": "0"
    },
    "597": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "REVERT",
      "path": "0"
    },
    "598": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "599": {
      "op": "POP"
    },
    "600": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "603": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x265"
    },
    "606": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "607": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "609": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x190A"
    },
    "612": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        4350,
        4712
      ],
      "op": "JUMP",
      "path": "0"
    },
    "613": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "614": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB1D"
    },
    "617": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        4350,
        4712
      ],
      "op": "JUMP",
      "path": "0"
    },
    "618": {
      "offset": [
        759,
        796
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "619": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "620": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "DUP1",
      "path": "0"
    },
    "621": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "622": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x276"
    },
    "625": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "626": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "628": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "DUP1",
      "path": "0"
    },
    "629": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "REVERT",
      "path": "0"
    },
    "630": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "631": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "POP",
      "path": "0"
    },
    "632": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x167"
    },
    "635": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "637": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "638": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "DUP2",
      "path": "0"
    },
    "639": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        759,
        796
      ],
      "op": "JUMP",
      "path": "0"
    },
    "640": {
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "641": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "642": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "643": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "644": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x28C"
    },
    "647": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "648": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "650": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "651": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "REVERT",
      "path": "0"
    },
    "652": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "653": {
      "op": "POP"
    },
    "654": {
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A0"
    },
    "657": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x29B"
    },
    "660": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "661": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "663": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B1"
    },
    "666": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        692,
        714
      ],
      "op": "JUMP",
      "path": "0"
    },
    "667": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "668": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC8F"
    },
    "671": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        692,
        714
      ],
      "op": "JUMP",
      "path": "0"
    },
    "672": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "673": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "675": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "676": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "679": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "680": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "681": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "682": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x192E"
    },
    "685": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        692,
        714
      ],
      "op": "JUMP",
      "path": "0"
    },
    "686": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "687": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "688": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "DUP1",
      "path": "0"
    },
    "689": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "690": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BA"
    },
    "693": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "694": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "696": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "DUP1",
      "path": "0"
    },
    "697": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "REVERT",
      "path": "0"
    },
    "698": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "699": {
      "op": "POP"
    },
    "700": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "703": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2C9"
    },
    "706": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "707": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "709": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B1"
    },
    "712": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        4718,
        5392
      ],
      "op": "JUMP",
      "path": "0"
    },
    "713": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "714": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD4B"
    },
    "717": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        4718,
        5392
      ],
      "op": "JUMP",
      "path": "0"
    },
    "718": {
      "offset": [
        536,
        568
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "719": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "720": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "DUP1",
      "path": "0"
    },
    "721": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "722": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2DA"
    },
    "725": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "726": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "728": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "DUP1",
      "path": "0"
    },
    "729": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "REVERT",
      "path": "0"
    },
    "730": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "offset": [
        536,
        568
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "734": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "735": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E8"
    },
    "738": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "739": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "741": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "AND",
      "path": "0"
    },
    "742": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "DUP2",
      "path": "0"
    },
    "743": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "JUMP",
      "path": "0"
    },
    "744": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "745": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "747": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "748": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "751": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "752": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "753": {
      "fn": "Voting.voteCandidate",
      "offset": [
        536,
        568
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1966"
    },
    "756": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        536,
        568
      ],
      "op": "JUMP",
      "path": "0"
    },
    "757": {
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "758": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "759": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "760": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "761": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x301"
    },
    "764": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "765": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "767": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "768": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "REVERT",
      "path": "0"
    },
    "769": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "770": {
      "op": "POP"
    },
    "771": {
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x315"
    },
    "774": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x310"
    },
    "777": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "778": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "780": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x190A"
    },
    "783": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        607,
        646
      ],
      "op": "JUMP",
      "path": "0"
    },
    "784": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "785": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF40"
    },
    "788": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        607,
        646
      ],
      "op": "JUMP",
      "path": "0"
    },
    "789": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "790": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "792": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "793": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "796": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "797": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "798": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "799": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "800": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "801": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "802": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x198E"
    },
    "805": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        607,
        646
      ],
      "op": "JUMP",
      "path": "0"
    },
    "806": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "807": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "808": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "DUP1",
      "path": "0"
    },
    "809": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "810": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x332"
    },
    "813": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "814": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "816": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "DUP1",
      "path": "0"
    },
    "817": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "REVERT",
      "path": "0"
    },
    "818": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "819": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "POP",
      "path": "0"
    },
    "820": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x33B"
    },
    "823": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFFF"
    },
    "826": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        3598,
        3688
      ],
      "op": "JUMP",
      "path": "0"
    },
    "827": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "828": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "830": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "831": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "834": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "835": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "836": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19F0"
    },
    "839": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        3598,
        3688
      ],
      "op": "JUMP",
      "path": "0"
    },
    "840": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "841": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "842": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "DUP1",
      "path": "0"
    },
    "843": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "844": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x354"
    },
    "847": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "848": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "850": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "DUP1",
      "path": "0"
    },
    "851": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "REVERT",
      "path": "0"
    },
    "852": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "853": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "POP",
      "path": "0"
    },
    "854": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x35D"
    },
    "857": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10FA"
    },
    "860": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6294,
        6688
      ],
      "op": "JUMP",
      "path": "0"
    },
    "861": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "862": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "864": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "865": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "868": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "869": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "870": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A45"
    },
    "873": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6294,
        6688
      ],
      "op": "JUMP",
      "path": "0"
    },
    "874": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "875": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "876": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "DUP1",
      "path": "0"
    },
    "877": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "878": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x376"
    },
    "881": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "882": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "884": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "DUP1",
      "path": "0"
    },
    "885": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "REVERT",
      "path": "0"
    },
    "886": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "887": {
      "op": "POP"
    },
    "888": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38A"
    },
    "891": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x385"
    },
    "894": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "895": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "897": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B1"
    },
    "900": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMP",
      "path": "0"
    },
    "901": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "902": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x131E"
    },
    "905": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMP",
      "path": "0"
    },
    "906": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "907": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "909": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "910": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "913": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "914": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "915": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A58"
    },
    "918": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMP",
      "path": "0"
    },
    "919": {
      "offset": [
        802,
        832
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "920": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "921": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "DUP1",
      "path": "0"
    },
    "922": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "923": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3A3"
    },
    "926": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "927": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "929": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "DUP1",
      "path": "0"
    },
    "930": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "REVERT",
      "path": "0"
    },
    "931": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "932": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "POP",
      "path": "0"
    },
    "933": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x167"
    },
    "936": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "938": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "939": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "DUP2",
      "path": "0"
    },
    "940": {
      "fn": "Voting.winningCandidate",
      "offset": [
        802,
        832
      ],
      "op": "JUMP",
      "path": "0"
    },
    "941": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "942": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "943": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "DUP1",
      "path": "0"
    },
    "944": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "945": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B9"
    },
    "948": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "949": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "951": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "DUP1",
      "path": "0"
    },
    "952": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "REVERT",
      "path": "0"
    },
    "953": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "954": {
      "op": "POP"
    },
    "955": {
      "fn": "Voting.get_balance",
      "offset": [
        6803,
        6824
      ],
      "op": "SELFBALANCE",
      "path": "0",
      "statement": 0
    },
    "956": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x167"
    },
    "959": {
      "fn": "Voting.get_balance",
      "offset": [
        6733,
        6831
      ],
      "op": "JUMP",
      "path": "0"
    },
    "960": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "961": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "962": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "DUP1",
      "path": "0"
    },
    "963": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "964": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3CC"
    },
    "967": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "968": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "970": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "DUP1",
      "path": "0"
    },
    "971": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "REVERT",
      "path": "0"
    },
    "972": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "973": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "POP",
      "path": "0"
    },
    "974": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3D5"
    },
    "977": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1404"
    },
    "980": {
      "fn": "Voting.is_open",
      "jump": "i",
      "offset": [
        7056,
        7247
      ],
      "op": "JUMP",
      "path": "0"
    },
    "981": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "982": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "984": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "985": {
      "op": "SWAP1"
    },
    "986": {
      "op": "ISZERO"
    },
    "987": {
      "op": "ISZERO"
    },
    "988": {
      "op": "DUP2"
    },
    "989": {
      "op": "MSTORE"
    },
    "990": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "992": {
      "op": "ADD"
    },
    "993": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x171"
    },
    "996": {
      "op": "JUMP"
    },
    "997": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "998": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "999": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1000": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1001": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3F1"
    },
    "1004": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1005": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1007": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1008": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1009": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1010": {
      "op": "POP"
    },
    "1011": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "1014": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x400"
    },
    "1017": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "1018": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1020": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A6B"
    },
    "1023": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        3694,
        4344
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1024": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1025": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1430"
    },
    "1028": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        3694,
        4344
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1029": {
      "fn": "Voting.voteParty",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1030": {
      "fn": "Voting.voteParty",
      "offset": [
        5481,
        5491
      ],
      "op": "CALLER",
      "path": "0"
    },
    "1031": {
      "fn": "Voting.voteParty",
      "offset": [
        5451,
        5471
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1033": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5492
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1034": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5492
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1035": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5492
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1036": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5480
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1038": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5492
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1040": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5492
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1041": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5492
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1043": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5492
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1044": {
      "fn": "Voting.voteParty",
      "offset": [
        5474,
        5492
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1045": {
      "fn": "Voting.voteParty",
      "offset": [
        5510,
        5524
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 1,
      "value": "0x2"
    },
    "1047": {
      "fn": "Voting.voteParty",
      "offset": [
        5510,
        5524
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1048": {
      "fn": "Voting.voteParty",
      "offset": [
        5510,
        5524
      ],
      "op": "ADD",
      "path": "0"
    },
    "1049": {
      "fn": "Voting.voteParty",
      "offset": [
        5510,
        5524
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1050": {
      "fn": "Voting.voteParty",
      "offset": [
        5510,
        5524
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "1052": {
      "branch": 52,
      "fn": "Voting.voteParty",
      "offset": [
        5510,
        5524
      ],
      "op": "AND",
      "path": "0"
    },
    "1053": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x464"
    },
    "1056": {
      "branch": 52,
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1057": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1059": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1060": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1066": {
      "op": "SHL"
    },
    "1067": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1068": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1071": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1073": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1074": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "ADD",
      "path": "0"
    },
    "1075": {
      "op": "MSTORE"
    },
    "1076": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "1078": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1080": {
      "op": "DUP3"
    },
    "1081": {
      "op": "ADD"
    },
    "1082": {
      "op": "MSTORE"
    },
    "1083": {
      "op": "PUSH20",
      "value": "0x486173206E6F20726967687420746F20766F7465"
    },
    "1104": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1106": {
      "op": "SHL"
    },
    "1107": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1109": {
      "op": "DUP3"
    },
    "1110": {
      "op": "ADD"
    },
    "1111": {
      "op": "MSTORE"
    },
    "1112": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1114": {
      "op": "ADD"
    },
    "1115": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1116": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1118": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1119": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1120": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1121": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "SUB",
      "path": "0"
    },
    "1122": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1123": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "1124": {
      "fn": "Voting.voteParty",
      "offset": [
        5502,
        5549
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1125": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x2"
    },
    "1127": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1128": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "ADD",
      "path": "0"
    },
    "1129": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1130": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "1134": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1135": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "DIV",
      "path": "0"
    },
    "1136": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "1138": {
      "fn": "Voting.voteParty",
      "offset": [
        5568,
        5588
      ],
      "op": "AND",
      "path": "0"
    },
    "1139": {
      "branch": 53,
      "fn": "Voting.voteParty",
      "offset": [
        5567,
        5588
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1140": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4BF"
    },
    "1143": {
      "branch": 53,
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1144": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1146": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1147": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1151": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1153": {
      "op": "SHL"
    },
    "1154": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1155": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1156": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1158": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1160": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1161": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "ADD",
      "path": "0"
    },
    "1162": {
      "op": "MSTORE"
    },
    "1163": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1165": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1167": {
      "op": "DUP3"
    },
    "1168": {
      "op": "ADD"
    },
    "1169": {
      "op": "MSTORE"
    },
    "1170": {
      "op": "PUSH32",
      "value": "0x616C726561647920766F74656420666F72207061727479000000000000000000"
    },
    "1203": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1205": {
      "op": "DUP3"
    },
    "1206": {
      "op": "ADD"
    },
    "1207": {
      "op": "MSTORE"
    },
    "1208": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1210": {
      "op": "ADD"
    },
    "1211": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "1214": {
      "op": "JUMP"
    },
    "1215": {
      "fn": "Voting.voteParty",
      "offset": [
        5559,
        5616
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1216": {
      "fn": "Voting.voteParty",
      "offset": [
        5654,
        5655
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x1"
    },
    "1218": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5633
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1220": {
      "fn": "Voting.voteParty",
      "offset": [
        5634,
        5639
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1221": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1222": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1223": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1224": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "LT",
      "path": "0"
    },
    "1225": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D4"
    },
    "1228": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1229": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D4"
    },
    "1232": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "1235": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        5626,
        5640
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1236": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1237": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1238": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1240": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1241": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1243": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1245": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1246": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1247": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1249": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "MUL",
      "path": "0"
    },
    "1250": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5640
      ],
      "op": "ADD",
      "path": "0"
    },
    "1251": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5650
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1253": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5650
      ],
      "op": "ADD",
      "path": "0"
    },
    "1254": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5650
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1256": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1257": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1258": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1259": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4F4"
    },
    "1262": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1263": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1264": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "1267": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        5626,
        5655
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1268": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1269": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1270": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "POP",
      "path": "0"
    },
    "1271": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "POP",
      "path": "0"
    },
    "1272": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1273": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1274": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1275": {
      "fn": "Voting.voteParty",
      "offset": [
        5626,
        5655
      ],
      "op": "POP",
      "path": "0"
    },
    "1276": {
      "fn": "Voting.voteParty",
      "offset": [
        5685,
        5686
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x1"
    },
    "1278": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1280": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1282": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1283": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1284": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1285": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x50E"
    },
    "1288": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1289": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1290": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "1293": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        5665,
        5686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1294": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1295": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1296": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1297": {
      "fn": "Voting.voteParty",
      "offset": [
        5665,
        5686
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1298": {
      "op": "POP"
    },
    "1299": {
      "op": "POP"
    },
    "1300": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5720
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0x2"
    },
    "1302": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5720
      ],
      "op": "ADD",
      "path": "0"
    },
    "1303": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5727
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1304": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5727
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1305": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "1308": {
      "op": "NOT"
    },
    "1309": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5727
      ],
      "op": "AND",
      "path": "0"
    },
    "1310": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5727
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1313": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5727
      ],
      "op": "OR",
      "path": "0"
    },
    "1314": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5727
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1315": {
      "fn": "Voting.voteParty",
      "offset": [
        5696,
        5727
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1316": {
      "op": "POP"
    },
    "1317": {
      "fn": "Voting.voteParty",
      "jump": "o",
      "offset": [
        5398,
        5734
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1318": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1319": {
      "fn": "Voting.stringToUint",
      "offset": [
        1929,
        1936
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1321": {
      "fn": "Voting.stringToUint",
      "offset": [
        1929,
        1936
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1322": {
      "fn": "Voting.stringToUint",
      "offset": [
        2010,
        2019
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1323": {
      "fn": "Voting.stringToUint",
      "offset": [
        1929,
        1936
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1324": {
      "fn": "Voting.stringToUint",
      "offset": [
        2030,
        2324
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1325": {
      "fn": "Voting.stringToUint",
      "offset": [
        2054,
        2065
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1326": {
      "fn": "Voting.stringToUint",
      "offset": [
        2054,
        2072
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1327": {
      "fn": "Voting.stringToUint",
      "offset": [
        2050,
        2051
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1328": {
      "fn": "Voting.stringToUint",
      "offset": [
        2050,
        2072
      ],
      "op": "LT",
      "path": "0"
    },
    "1329": {
      "fn": "Voting.stringToUint",
      "offset": [
        2030,
        2324
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1330": {
      "fn": "Voting.stringToUint",
      "offset": [
        2030,
        2324
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5C1"
    },
    "1333": {
      "fn": "Voting.stringToUint",
      "offset": [
        2030,
        2324
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1334": {
      "fn": "Voting.stringToUint",
      "offset": [
        2093,
        2104
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1336": {
      "fn": "Voting.stringToUint",
      "offset": [
        2128,
        2129
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1337": {
      "fn": "Voting.stringToUint",
      "offset": [
        2107,
        2118
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1338": {
      "fn": "Voting.stringToUint",
      "offset": [
        2107,
        2125
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1339": {
      "fn": "Voting.stringToUint",
      "offset": [
        2107,
        2129
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x544"
    },
    "1342": {
      "fn": "Voting.stringToUint",
      "offset": [
        2107,
        2129
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1343": {
      "fn": "Voting.stringToUint",
      "offset": [
        2107,
        2129
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1344": {
      "fn": "Voting.stringToUint",
      "offset": [
        2107,
        2129
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B25"
    },
    "1347": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        2107,
        2129
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1348": {
      "fn": "Voting.stringToUint",
      "offset": [
        2107,
        2129
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1349": {
      "fn": "Voting.stringToUint",
      "offset": [
        2093,
        2129
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1350": {
      "fn": "Voting.stringToUint",
      "offset": [
        2093,
        2129
      ],
      "op": "POP",
      "path": "0"
    },
    "1351": {
      "fn": "Voting.stringToUint",
      "offset": [
        2143,
        2154
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1353": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2168
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1354": {
      "fn": "Voting.stringToUint",
      "offset": [
        2169,
        2170
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1355": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1356": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1357": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1358": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "LT",
      "path": "0"
    },
    "1359": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x55A"
    },
    "1362": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1363": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x55A"
    },
    "1366": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "1369": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        2157,
        2171
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1370": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1371": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "ADD",
      "path": "0"
    },
    "1372": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1374": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "ADD",
      "path": "0"
    },
    "1375": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1380": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "1382": {
      "op": "SHL"
    },
    "1383": {
      "op": "SUB"
    },
    "1384": {
      "op": "NOT"
    },
    "1385": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1386": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "AND",
      "path": "0"
    },
    "1387": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1388": {
      "op": "POP"
    },
    "1389": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "1391": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "SHR",
      "path": "0"
    },
    "1392": {
      "fn": "Voting.stringToUint",
      "offset": [
        2185,
        2195
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1394": {
      "fn": "Voting.stringToUint",
      "offset": [
        2238,
        2258
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57C"
    },
    "1397": {
      "fn": "Voting.stringToUint",
      "offset": [
        2253,
        2257
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x30"
    },
    "1399": {
      "fn": "Voting.stringToUint",
      "offset": [
        2157,
        2171
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1400": {
      "fn": "Voting.stringToUint",
      "offset": [
        2238,
        2258
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B25"
    },
    "1403": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        2238,
        2258
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1404": {
      "fn": "Voting.stringToUint",
      "offset": [
        2238,
        2258
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1405": {
      "fn": "Voting.stringToUint",
      "offset": [
        2223,
        2258
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1406": {
      "op": "POP"
    },
    "1407": {
      "fn": "Voting.stringToUint",
      "offset": [
        2303,
        2310
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 6,
      "value": "0x589"
    },
    "1410": {
      "fn": "Voting.stringToUint",
      "offset": [
        2309,
        2310
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1412": {
      "fn": "Voting.stringToUint",
      "offset": [
        2303,
        2306
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1413": {
      "fn": "Voting.stringToUint",
      "offset": [
        2303,
        2310
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B25"
    },
    "1416": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        2303,
        2310
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1417": {
      "fn": "Voting.stringToUint",
      "offset": [
        2303,
        2310
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1418": {
      "fn": "Voting.stringToUint",
      "offset": [
        2298,
        2311
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x594"
    },
    "1421": {
      "fn": "Voting.stringToUint",
      "offset": [
        2298,
        2311
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1422": {
      "fn": "Voting.stringToUint",
      "offset": [
        2298,
        2300
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "1424": {
      "fn": "Voting.stringToUint",
      "offset": [
        2298,
        2311
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C22"
    },
    "1427": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        2298,
        2311
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1428": {
      "fn": "Voting.stringToUint",
      "offset": [
        2298,
        2311
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1429": {
      "fn": "Voting.stringToUint",
      "offset": [
        2281,
        2312
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x59E"
    },
    "1432": {
      "fn": "Voting.stringToUint",
      "offset": [
        2281,
        2312
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1433": {
      "fn": "Voting.stringToUint",
      "offset": [
        2289,
        2293
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1434": {
      "fn": "Voting.stringToUint",
      "offset": [
        2281,
        2312
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C2E"
    },
    "1437": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        2281,
        2312
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1438": {
      "fn": "Voting.stringToUint",
      "offset": [
        2281,
        2312
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1439": {
      "fn": "Voting.stringToUint",
      "offset": [
        2273,
        2313
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5A8"
    },
    "1442": {
      "fn": "Voting.stringToUint",
      "offset": [
        2273,
        2313
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1443": {
      "fn": "Voting.stringToUint",
      "offset": [
        2273,
        2313
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1444": {
      "fn": "Voting.stringToUint",
      "offset": [
        2273,
        2313
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "1447": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        2273,
        2313
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1448": {
      "fn": "Voting.stringToUint",
      "offset": [
        2273,
        2313
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1449": {
      "fn": "Voting.stringToUint",
      "offset": [
        2273,
        2313
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "1450": {
      "fn": "Voting.stringToUint",
      "offset": [
        2273,
        2313
      ],
      "op": "POP",
      "path": "0"
    },
    "1451": {
      "fn": "Voting.stringToUint",
      "offset": [
        2079,
        2324
      ],
      "op": "POP",
      "path": "0"
    },
    "1452": {
      "fn": "Voting.stringToUint",
      "offset": [
        2079,
        2324
      ],
      "op": "POP",
      "path": "0"
    },
    "1453": {
      "fn": "Voting.stringToUint",
      "offset": [
        2079,
        2324
      ],
      "op": "POP",
      "path": "0"
    },
    "1454": {
      "fn": "Voting.stringToUint",
      "offset": [
        2079,
        2324
      ],
      "op": "POP",
      "path": "0"
    },
    "1455": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 7
    },
    "1456": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1457": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5B9"
    },
    "1460": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1461": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C4D"
    },
    "1464": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        2074,
        2077
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1465": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1466": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1467": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "POP",
      "path": "0"
    },
    "1468": {
      "fn": "Voting.stringToUint",
      "offset": [
        2074,
        2077
      ],
      "op": "POP",
      "path": "0"
    },
    "1469": {
      "fn": "Voting.stringToUint",
      "offset": [
        2030,
        2324
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52C"
    },
    "1472": {
      "fn": "Voting.stringToUint",
      "offset": [
        2030,
        2324
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1473": {
      "fn": "Voting.stringToUint",
      "offset": [
        2030,
        2324
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1474": {
      "op": "POP"
    },
    "1475": {
      "fn": "Voting.stringToUint",
      "offset": [
        2340,
        2343
      ],
      "op": "SWAP1",
      "path": "0",
      "statement": 8
    },
    "1476": {
      "fn": "Voting.stringToUint",
      "offset": [
        2340,
        2343
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1477": {
      "fn": "Voting.stringToUint",
      "offset": [
        1837,
        2350
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1478": {
      "op": "POP"
    },
    "1479": {
      "op": "POP"
    },
    "1480": {
      "op": "POP"
    },
    "1481": {
      "fn": "Voting.stringToUint",
      "jump": "o",
      "offset": [
        1837,
        2350
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1482": {
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1483": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1485": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1486": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1487": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1488": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1489": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "LT",
      "path": "0"
    },
    "1490": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5DA"
    },
    "1493": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1494": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1496": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1497": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1498": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1499": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1501": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1502": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1503": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1504": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1506": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1507": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1508": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1509": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "1511": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1512": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1513": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MUL",
      "path": "0"
    },
    "1514": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1515": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1516": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1517": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1519": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1520": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1521": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1522": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1523": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1524": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1525": {
      "op": "POP"
    },
    "1526": {
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1527": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5FF"
    },
    "1530": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1531": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "1534": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1535": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1536": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1537": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1539": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1540": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1542": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1543": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1544": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DIV",
      "path": "0"
    },
    "1545": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MUL",
      "path": "0"
    },
    "1546": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1548": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1549": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1551": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1552": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1553": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1554": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1555": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1557": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1558": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1559": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1560": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1561": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1562": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1563": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1564": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1565": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1567": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1568": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1569": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1570": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1571": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x62B"
    },
    "1574": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1575": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "1578": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1579": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1580": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1581": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1582": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x678"
    },
    "1585": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1586": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1587": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1589": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "LT",
      "path": "0"
    },
    "1590": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x64D"
    },
    "1593": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1594": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1597": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1598": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1599": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1600": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DIV",
      "path": "0"
    },
    "1601": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MUL",
      "path": "0"
    },
    "1602": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1603": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1604": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1605": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1607": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1608": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1609": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x678"
    },
    "1612": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1613": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1614": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1615": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1616": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1617": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1618": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1620": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1621": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1623": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1625": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1626": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1627": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1628": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1629": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1630": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1631": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1632": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1633": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1635": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1636": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1637": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1639": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1640": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1641": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1642": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "GT",
      "path": "0"
    },
    "1643": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x65B"
    },
    "1646": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1647": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1648": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1649": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SUB",
      "path": "0"
    },
    "1650": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1652": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "AND",
      "path": "0"
    },
    "1653": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1654": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1655": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1656": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1657": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1658": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1659": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1660": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1661": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1662": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1663": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1664": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1666": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1667": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1668": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1669": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x68D"
    },
    "1672": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1673": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "1676": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1677": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1678": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1679": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1681": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1682": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1684": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1685": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1686": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DIV",
      "path": "0"
    },
    "1687": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MUL",
      "path": "0"
    },
    "1688": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1690": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1691": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1693": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1694": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1695": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1696": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1697": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1699": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1700": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1701": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1702": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1703": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1704": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1705": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1706": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1707": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1709": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1710": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1711": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1712": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1713": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6B9"
    },
    "1716": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1717": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "1720": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1721": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1722": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1723": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1724": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x706"
    },
    "1727": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1728": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1729": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1731": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "LT",
      "path": "0"
    },
    "1732": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6DB"
    },
    "1735": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1736": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1739": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1740": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1741": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1742": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DIV",
      "path": "0"
    },
    "1743": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MUL",
      "path": "0"
    },
    "1744": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1745": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1746": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1747": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1749": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1750": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1751": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x706"
    },
    "1754": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1755": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1756": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1757": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1758": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1759": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1760": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1762": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1763": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1765": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1767": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1768": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1769": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1770": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1771": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1772": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1773": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1774": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1775": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1777": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1778": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1779": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1781": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1782": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1783": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1784": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "GT",
      "path": "0"
    },
    "1785": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6E9"
    },
    "1788": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1789": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1790": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1791": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SUB",
      "path": "0"
    },
    "1792": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1794": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "AND",
      "path": "0"
    },
    "1795": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1796": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1797": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1798": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1799": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1800": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1801": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1802": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1803": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1804": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1805": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1806": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1808": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1809": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1810": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1811": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1812": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1814": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "ADD",
      "path": "0"
    },
    "1815": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1816": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1817": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "POP",
      "path": "0"
    },
    "1818": {
      "fn": "Voting.stringToUint",
      "offset": [
        657,
        686
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1819": {
      "fn": "Voting.stringToUint",
      "jump": "o",
      "offset": [
        657,
        686
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1820": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1821": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1823": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2484
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1824": {
      "fn": "Voting.getCandidates",
      "offset": [
        2414,
        2432
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "1826": {
      "fn": "Voting.getCandidates",
      "offset": [
        2414,
        2432
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1827": {
      "branch": 54,
      "fn": "Voting.getCandidates",
      "offset": [
        2502,
        2521
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 9
    },
    "1828": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x76F"
    },
    "1831": {
      "branch": 54,
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1832": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1834": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1835": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1839": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1841": {
      "op": "SHL"
    },
    "1842": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1843": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1844": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1846": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1848": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1849": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "ADD",
      "path": "0"
    },
    "1850": {
      "op": "MSTORE"
    },
    "1851": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "1853": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1855": {
      "op": "DUP3"
    },
    "1856": {
      "op": "ADD"
    },
    "1857": {
      "op": "MSTORE"
    },
    "1858": {
      "op": "PUSH32",
      "value": "0x4E6F2063616E6469646174657320726567697374657265640000000000000000"
    },
    "1891": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1893": {
      "op": "DUP3"
    },
    "1894": {
      "op": "ADD"
    },
    "1895": {
      "op": "MSTORE"
    },
    "1896": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1898": {
      "op": "ADD"
    },
    "1899": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "1902": {
      "op": "JUMP"
    },
    "1903": {
      "fn": "Voting.getCandidates",
      "offset": [
        2494,
        2550
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1904": {
      "fn": "Voting.getCandidates",
      "offset": [
        2561,
        2585
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1906": {
      "fn": "Voting.getCandidates",
      "offset": [
        2561,
        2585
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1907": {
      "fn": "Voting.getCandidates",
      "offset": [
        2595,
        2751
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1908": {
      "fn": "Voting.getCandidates",
      "offset": [
        2619,
        2634
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1909": {
      "fn": "Voting.getCandidates",
      "offset": [
        2615,
        2616
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1910": {
      "fn": "Voting.getCandidates",
      "offset": [
        2615,
        2634
      ],
      "op": "LT",
      "path": "0"
    },
    "1911": {
      "fn": "Voting.getCandidates",
      "offset": [
        2595,
        2751
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1912": {
      "fn": "Voting.getCandidates",
      "offset": [
        2595,
        2751
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7C7"
    },
    "1915": {
      "fn": "Voting.getCandidates",
      "offset": [
        2595,
        2751
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1916": {
      "fn": "Voting.getCandidates",
      "offset": [
        2680,
        2684
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1917": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2668
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1919": {
      "fn": "Voting.getCandidates",
      "offset": [
        2669,
        2670
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1920": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1921": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1922": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1923": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "LT",
      "path": "0"
    },
    "1924": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x78F"
    },
    "1927": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1928": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x78F"
    },
    "1931": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "1934": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2658,
        2671
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1935": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1936": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1937": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1939": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1940": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1942": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1944": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1945": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1946": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "1948": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "MUL",
      "path": "0"
    },
    "1949": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2671
      ],
      "op": "ADD",
      "path": "0"
    },
    "1950": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2676
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1952": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2676
      ],
      "op": "ADD",
      "path": "0"
    },
    "1953": {
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2676
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1954": {
      "branch": 55,
      "fn": "Voting.getCandidates",
      "offset": [
        2658,
        2684
      ],
      "op": "EQ",
      "path": "0"
    },
    "1955": {
      "fn": "Voting.getCandidates",
      "offset": [
        2655,
        2741
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1956": {
      "fn": "Voting.getCandidates",
      "offset": [
        2655,
        2741
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7B5"
    },
    "1959": {
      "branch": 55,
      "fn": "Voting.getCandidates",
      "offset": [
        2655,
        2741
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1960": {
      "fn": "Voting.getCandidates",
      "offset": [
        2703,
        2726
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 10,
      "value": "0x7B2"
    },
    "1963": {
      "fn": "Voting.getCandidates",
      "offset": [
        2725,
        2726
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1965": {
      "fn": "Voting.getCandidates",
      "offset": [
        2703,
        2726
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1966": {
      "fn": "Voting.getCandidates",
      "offset": [
        2703,
        2726
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "1969": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2703,
        2726
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1970": {
      "fn": "Voting.getCandidates",
      "offset": [
        2703,
        2726
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1971": {
      "fn": "Voting.getCandidates",
      "offset": [
        2703,
        2726
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1972": {
      "fn": "Voting.getCandidates",
      "offset": [
        2703,
        2726
      ],
      "op": "POP",
      "path": "0"
    },
    "1973": {
      "fn": "Voting.getCandidates",
      "offset": [
        2655,
        2741
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1974": {
      "fn": "Voting.getCandidates",
      "offset": [
        2636,
        2639
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 11
    },
    "1975": {
      "fn": "Voting.getCandidates",
      "offset": [
        2636,
        2639
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7BF"
    },
    "1978": {
      "fn": "Voting.getCandidates",
      "offset": [
        2636,
        2639
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1979": {
      "fn": "Voting.getCandidates",
      "offset": [
        2636,
        2639
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C4D"
    },
    "1982": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2636,
        2639
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1983": {
      "fn": "Voting.getCandidates",
      "offset": [
        2636,
        2639
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1984": {
      "fn": "Voting.getCandidates",
      "offset": [
        2636,
        2639
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1985": {
      "fn": "Voting.getCandidates",
      "offset": [
        2636,
        2639
      ],
      "op": "POP",
      "path": "0"
    },
    "1986": {
      "fn": "Voting.getCandidates",
      "offset": [
        2636,
        2639
      ],
      "op": "POP",
      "path": "0"
    },
    "1987": {
      "fn": "Voting.getCandidates",
      "offset": [
        2595,
        2751
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x773"
    },
    "1990": {
      "fn": "Voting.getCandidates",
      "offset": [
        2595,
        2751
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1991": {
      "fn": "Voting.getCandidates",
      "offset": [
        2595,
        2751
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1992": {
      "fn": "Voting.getCandidates",
      "offset": [
        2595,
        2751
      ],
      "op": "POP",
      "path": "0"
    },
    "1993": {
      "fn": "Voting.getCandidates",
      "offset": [
        2790,
        2791
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 12,
      "value": "0x0"
    },
    "1995": {
      "fn": "Voting.getCandidates",
      "offset": [
        2768,
        2787
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1996": {
      "branch": 56,
      "fn": "Voting.getCandidates",
      "offset": [
        2768,
        2791
      ],
      "op": "GT",
      "path": "0"
    },
    "1997": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x80E"
    },
    "2000": {
      "branch": 56,
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2001": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2003": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2004": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2008": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2010": {
      "op": "SHL"
    },
    "2011": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2012": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2013": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2015": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2017": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2018": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "ADD",
      "path": "0"
    },
    "2019": {
      "op": "MSTORE"
    },
    "2020": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "2022": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2024": {
      "op": "DUP3"
    },
    "2025": {
      "op": "ADD"
    },
    "2026": {
      "op": "MSTORE"
    },
    "2027": {
      "op": "PUSH19",
      "value": "0x139BC818D85B991A59185D195CC8199BDD5B99"
    },
    "2047": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "2049": {
      "op": "SHL"
    },
    "2050": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2052": {
      "op": "DUP3"
    },
    "2053": {
      "op": "ADD"
    },
    "2054": {
      "op": "MSTORE"
    },
    "2055": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2057": {
      "op": "ADD"
    },
    "2058": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "2061": {
      "op": "JUMP"
    },
    "2062": {
      "fn": "Voting.getCandidates",
      "offset": [
        2760,
        2815
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2063": {
      "fn": "Voting.getCandidates",
      "offset": [
        2825,
        2831
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2065": {
      "fn": "Voting.getCandidates",
      "offset": [
        2929,
        2968
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2066": {
      "fn": "Voting.getCandidates",
      "offset": [
        2987,
        3006
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2067": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH8",
      "path": "0",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2076": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2077": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "GT",
      "path": "0"
    },
    "2078": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2079": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x82A"
    },
    "2082": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2083": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x82A"
    },
    "2086": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16CA"
    },
    "2089": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2971,
        3007
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2090": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2091": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2093": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2094": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2095": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2096": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2097": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2098": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2099": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2101": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "MUL",
      "path": "0"
    },
    "2102": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2104": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "ADD",
      "path": "0"
    },
    "2105": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2106": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "ADD",
      "path": "0"
    },
    "2107": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2109": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2110": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2111": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2112": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88D"
    },
    "2115": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2116": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2117": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2119": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "ADD",
      "path": "0"
    },
    "2120": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2121": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x87A"
    },
    "2124": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2126": {
      "op": "MLOAD"
    },
    "2127": {
      "op": "DUP1"
    },
    "2128": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2130": {
      "op": "ADD"
    },
    "2131": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2133": {
      "op": "MSTORE"
    },
    "2134": {
      "op": "DUP1"
    },
    "2135": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2137": {
      "op": "DUP2"
    },
    "2138": {
      "op": "MSTORE"
    },
    "2139": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2141": {
      "op": "ADD"
    },
    "2142": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2144": {
      "op": "DUP2"
    },
    "2145": {
      "op": "MSTORE"
    },
    "2146": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2148": {
      "op": "ADD"
    },
    "2149": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2151": {
      "op": "DUP2"
    },
    "2152": {
      "op": "MSTORE"
    },
    "2153": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2155": {
      "op": "ADD"
    },
    "2156": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2158": {
      "op": "DUP2"
    },
    "2159": {
      "op": "MSTORE"
    },
    "2160": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2162": {
      "op": "ADD"
    },
    "2163": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2165": {
      "op": "DUP2"
    },
    "2166": {
      "op": "MSTORE"
    },
    "2167": {
      "op": "POP"
    },
    "2168": {
      "op": "SWAP1"
    },
    "2169": {
      "op": "JUMP"
    },
    "2170": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2171": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2172": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2173": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2175": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "ADD",
      "path": "0"
    },
    "2176": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2177": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2179": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2180": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "SUB",
      "path": "0"
    },
    "2181": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2182": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2183": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x848"
    },
    "2186": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2187": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2188": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "POP",
      "path": "0"
    },
    "2189": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2190": {
      "fn": "Voting.getCandidates",
      "offset": [
        2971,
        3007
      ],
      "op": "POP",
      "path": "0"
    },
    "2191": {
      "fn": "Voting.getCandidates",
      "offset": [
        2929,
        3007
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2192": {
      "fn": "Voting.getCandidates",
      "offset": [
        2929,
        3007
      ],
      "op": "POP",
      "path": "0"
    },
    "2193": {
      "fn": "Voting.getCandidates",
      "offset": [
        3022,
        3031
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2195": {
      "fn": "Voting.getCandidates",
      "offset": [
        3017,
        3211
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2196": {
      "fn": "Voting.getCandidates",
      "offset": [
        3041,
        3056
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2197": {
      "fn": "Voting.getCandidates",
      "offset": [
        3037,
        3038
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2198": {
      "fn": "Voting.getCandidates",
      "offset": [
        3037,
        3056
      ],
      "op": "LT",
      "path": "0"
    },
    "2199": {
      "fn": "Voting.getCandidates",
      "offset": [
        3017,
        3211
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2200": {
      "fn": "Voting.getCandidates",
      "offset": [
        3017,
        3211
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA72"
    },
    "2203": {
      "fn": "Voting.getCandidates",
      "offset": [
        3017,
        3211
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2204": {
      "fn": "Voting.getCandidates",
      "offset": [
        3102,
        3106
      ],
      "op": "DUP7",
      "path": "0"
    },
    "2205": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3090
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2207": {
      "fn": "Voting.getCandidates",
      "offset": [
        3091,
        3092
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2208": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2209": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2210": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2211": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "LT",
      "path": "0"
    },
    "2212": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8AF"
    },
    "2215": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2216": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8AF"
    },
    "2219": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "2222": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3080,
        3093
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2223": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2224": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2225": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2227": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2228": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2230": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2232": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2233": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2234": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "2236": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "MUL",
      "path": "0"
    },
    "2237": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3093
      ],
      "op": "ADD",
      "path": "0"
    },
    "2238": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3098
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2240": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3098
      ],
      "op": "ADD",
      "path": "0"
    },
    "2241": {
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3098
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2242": {
      "branch": 57,
      "fn": "Voting.getCandidates",
      "offset": [
        3080,
        3106
      ],
      "op": "EQ",
      "path": "0"
    },
    "2243": {
      "fn": "Voting.getCandidates",
      "offset": [
        3077,
        3201
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2244": {
      "fn": "Voting.getCandidates",
      "offset": [
        3077,
        3201
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA60"
    },
    "2247": {
      "branch": 57,
      "fn": "Voting.getCandidates",
      "offset": [
        3077,
        3201
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2248": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3161
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 13,
      "value": "0x2"
    },
    "2250": {
      "fn": "Voting.getCandidates",
      "offset": [
        3162,
        3163
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2251": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2252": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2253": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2254": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "LT",
      "path": "0"
    },
    "2255": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8DA"
    },
    "2258": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2259": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8DA"
    },
    "2262": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "2265": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3151,
        3164
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2266": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2267": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2268": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2270": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2271": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2273": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2275": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2276": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2277": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "2279": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "MUL",
      "path": "0"
    },
    "2280": {
      "fn": "Voting.getCandidates",
      "offset": [
        3151,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2281": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2283": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2284": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2285": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA0"
    },
    "2287": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2288": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2290": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2291": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2292": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2293": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2295": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2296": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2297": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2298": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2299": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2300": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2302": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2303": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2305": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2306": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2307": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2308": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2309": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x90D"
    },
    "2312": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2313": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "2316": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2317": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2318": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2319": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2321": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2322": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2324": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2325": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2326": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DIV",
      "path": "0"
    },
    "2327": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MUL",
      "path": "0"
    },
    "2328": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2330": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2331": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2333": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2334": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2335": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2336": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2337": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2339": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2340": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2341": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2342": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2343": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2344": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2345": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2346": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2347": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2349": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2350": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2351": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2352": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2353": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x939"
    },
    "2356": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2357": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "2360": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2361": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2362": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2363": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2364": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x986"
    },
    "2367": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2368": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2369": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2371": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "LT",
      "path": "0"
    },
    "2372": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x95B"
    },
    "2375": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2376": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2379": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2380": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2381": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2382": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DIV",
      "path": "0"
    },
    "2383": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MUL",
      "path": "0"
    },
    "2384": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2385": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2386": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2387": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2389": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2390": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2391": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x986"
    },
    "2394": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2395": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2396": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2397": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2398": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2399": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2400": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2402": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2403": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2405": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2407": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2408": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2409": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2410": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2411": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2412": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2413": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2414": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2415": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2417": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2418": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2419": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2421": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2422": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2423": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2424": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "GT",
      "path": "0"
    },
    "2425": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x969"
    },
    "2428": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2429": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2430": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2431": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SUB",
      "path": "0"
    },
    "2432": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2434": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "AND",
      "path": "0"
    },
    "2435": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2436": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2437": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2438": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2439": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2440": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2441": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2442": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2443": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2444": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2445": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2446": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2448": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2449": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2451": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2452": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2453": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2454": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2455": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x99F"
    },
    "2458": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2459": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "2462": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2463": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2464": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2465": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2467": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2468": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2470": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2471": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2472": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DIV",
      "path": "0"
    },
    "2473": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MUL",
      "path": "0"
    },
    "2474": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2476": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2477": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2479": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2480": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2481": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2482": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2483": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2485": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2486": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2487": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2488": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2489": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2490": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2491": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2492": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2493": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2495": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2496": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2497": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2498": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2499": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9CB"
    },
    "2502": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2503": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "2506": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2507": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2508": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2509": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2510": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA18"
    },
    "2513": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2514": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2515": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2517": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "LT",
      "path": "0"
    },
    "2518": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9ED"
    },
    "2521": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2522": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2525": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2526": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2527": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2528": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DIV",
      "path": "0"
    },
    "2529": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MUL",
      "path": "0"
    },
    "2530": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2531": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2532": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2533": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2535": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2536": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2537": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA18"
    },
    "2540": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2541": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2542": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2543": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2544": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2545": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2546": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2548": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2549": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2551": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2553": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2554": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2555": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2556": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2557": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2558": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2559": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2560": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2561": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2563": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2564": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2565": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2567": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2568": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2569": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2570": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "GT",
      "path": "0"
    },
    "2571": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9FB"
    },
    "2574": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2575": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2576": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2577": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SUB",
      "path": "0"
    },
    "2578": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2580": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "AND",
      "path": "0"
    },
    "2581": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2582": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2583": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2584": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2585": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2586": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2587": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2588": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2589": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2590": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2591": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2592": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2594": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2595": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2597": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2598": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2599": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2600": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2601": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2602": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2604": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2605": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2607": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2608": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "ADD",
      "path": "0"
    },
    "2609": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2610": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2611": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2612": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2613": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "POP",
      "path": "0"
    },
    "2614": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3145
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2615": {
      "fn": "Voting.getCandidates",
      "offset": [
        3146,
        3147
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2616": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2617": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2618": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2619": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "LT",
      "path": "0"
    },
    "2620": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA47"
    },
    "2623": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2624": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA47"
    },
    "2627": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "2630": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3125,
        3148
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2631": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2632": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2634": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2635": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2636": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "MUL",
      "path": "0"
    },
    "2637": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2638": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2639": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2640": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "ADD",
      "path": "0"
    },
    "2641": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3148
      ],
      "op": "ADD",
      "path": "0"
    },
    "2642": {
      "fn": "Voting.getCandidates",
      "offset": [
        3125,
        3164
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2643": {
      "fn": "Voting.getCandidates",
      "offset": [
        3182,
        3186
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 14,
      "value": "0xA5D"
    },
    "2646": {
      "fn": "Voting.getCandidates",
      "offset": [
        3185,
        3186
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2648": {
      "fn": "Voting.getCandidates",
      "offset": [
        3182,
        3186
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2649": {
      "fn": "Voting.getCandidates",
      "offset": [
        3182,
        3186
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "2652": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3182,
        3186
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2653": {
      "fn": "Voting.getCandidates",
      "offset": [
        3182,
        3186
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2654": {
      "fn": "Voting.getCandidates",
      "offset": [
        3182,
        3186
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2655": {
      "fn": "Voting.getCandidates",
      "offset": [
        3182,
        3186
      ],
      "op": "POP",
      "path": "0"
    },
    "2656": {
      "fn": "Voting.getCandidates",
      "offset": [
        3077,
        3201
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2657": {
      "fn": "Voting.getCandidates",
      "offset": [
        3058,
        3061
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 15
    },
    "2658": {
      "fn": "Voting.getCandidates",
      "offset": [
        3058,
        3061
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA6A"
    },
    "2661": {
      "fn": "Voting.getCandidates",
      "offset": [
        3058,
        3061
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2662": {
      "fn": "Voting.getCandidates",
      "offset": [
        3058,
        3061
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C4D"
    },
    "2665": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        3058,
        3061
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2666": {
      "fn": "Voting.getCandidates",
      "offset": [
        3058,
        3061
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2667": {
      "fn": "Voting.getCandidates",
      "offset": [
        3058,
        3061
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2668": {
      "fn": "Voting.getCandidates",
      "offset": [
        3058,
        3061
      ],
      "op": "POP",
      "path": "0"
    },
    "2669": {
      "fn": "Voting.getCandidates",
      "offset": [
        3058,
        3061
      ],
      "op": "POP",
      "path": "0"
    },
    "2670": {
      "fn": "Voting.getCandidates",
      "offset": [
        3017,
        3211
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x893"
    },
    "2673": {
      "fn": "Voting.getCandidates",
      "offset": [
        3017,
        3211
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2674": {
      "fn": "Voting.getCandidates",
      "offset": [
        3017,
        3211
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2675": {
      "op": "POP"
    },
    "2676": {
      "fn": "Voting.getCandidates",
      "offset": [
        3236,
        3256
      ],
      "op": "SWAP6",
      "path": "0",
      "statement": 16
    },
    "2677": {
      "fn": "Voting.getCandidates",
      "offset": [
        2361,
        3263
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "2678": {
      "op": "POP"
    },
    "2679": {
      "op": "POP"
    },
    "2680": {
      "op": "POP"
    },
    "2681": {
      "op": "POP"
    },
    "2682": {
      "op": "POP"
    },
    "2683": {
      "fn": "Voting.getCandidates",
      "jump": "o",
      "offset": [
        2361,
        3263
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2684": {
      "fn": "Voting.startElection",
      "offset": [
        6837,
        7050
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2685": {
      "offset": [
        1774,
        1785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2687": {
      "fn": "Voting.startElection",
      "offset": [
        1774,
        1785
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2688": {
      "fn": "Voting.startElection",
      "offset": [
        1774,
        1785
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2691": {
      "fn": "Voting.startElection",
      "offset": [
        1774,
        1785
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2692": {
      "fn": "Voting.startElection",
      "offset": [
        1774,
        1785
      ],
      "op": "DIV",
      "path": "0"
    },
    "2693": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2695": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2697": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2699": {
      "op": "SHL"
    },
    "2700": {
      "op": "SUB"
    },
    "2701": {
      "offset": [
        1774,
        1785
      ],
      "op": "AND",
      "path": "0"
    },
    "2702": {
      "offset": [
        1760,
        1770
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2703": {
      "offset": [
        1760,
        1785
      ],
      "op": "EQ",
      "path": "0"
    },
    "2704": {
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAAB"
    },
    "2707": {
      "offset": [
        1752,
        1813
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2708": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2710": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2711": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2715": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2717": {
      "op": "SHL"
    },
    "2718": {
      "offset": [
        1752,
        1813
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2719": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2720": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2722": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "ADD",
      "path": "0"
    },
    "2723": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "2726": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2727": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CA3"
    },
    "2730": {
      "fn": "Voting.startElection",
      "jump": "i",
      "offset": [
        1752,
        1813
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2731": {
      "fn": "Voting.startElection",
      "offset": [
        1752,
        1813
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2732": {
      "fn": "Voting.startElection",
      "offset": [
        6926,
        6945
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 17,
      "value": "0x1"
    },
    "2734": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6922
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2736": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6922
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2737": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6922
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2739": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6922
      ],
      "op": "AND",
      "path": "0"
    },
    "2740": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6922
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2742": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2743": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "GT",
      "path": "0"
    },
    "2744": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2745": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAC4"
    },
    "2748": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2749": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAC4"
    },
    "2752": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1950"
    },
    "2755": {
      "fn": "Voting.startElection",
      "jump": "i",
      "offset": [
        6910,
        6945
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2756": {
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2757": {
      "branch": 58,
      "fn": "Voting.startElection",
      "offset": [
        6910,
        6945
      ],
      "op": "EQ",
      "path": "0"
    },
    "2758": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB11"
    },
    "2761": {
      "branch": 58,
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2762": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2764": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2765": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2769": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2771": {
      "op": "SHL"
    },
    "2772": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2773": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2774": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2776": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2778": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2779": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "ADD",
      "path": "0"
    },
    "2780": {
      "op": "MSTORE"
    },
    "2781": {
      "op": "PUSH1",
      "value": "0x1E"
    },
    "2783": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2785": {
      "op": "DUP3"
    },
    "2786": {
      "op": "ADD"
    },
    "2787": {
      "op": "MSTORE"
    },
    "2788": {
      "op": "PUSH32",
      "value": "0x43616E27742073746172742061206E6577206C6F747465727920796574210000"
    },
    "2821": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2823": {
      "op": "DUP3"
    },
    "2824": {
      "op": "ADD"
    },
    "2825": {
      "op": "MSTORE"
    },
    "2826": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2828": {
      "op": "ADD"
    },
    "2829": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "2832": {
      "op": "JUMP"
    },
    "2833": {
      "fn": "Voting.startElection",
      "offset": [
        6889,
        7001
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2834": {
      "fn": "Voting.startElection",
      "offset": [
        7026,
        7043
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 18,
      "value": "0x0"
    },
    "2836": {
      "fn": "Voting.startElection",
      "offset": [
        7011,
        7043
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2837": {
      "fn": "Voting.startElection",
      "offset": [
        7011,
        7043
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2838": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2840": {
      "op": "NOT"
    },
    "2841": {
      "fn": "Voting.startElection",
      "offset": [
        7011,
        7043
      ],
      "op": "AND",
      "path": "0"
    },
    "2842": {
      "fn": "Voting.startElection",
      "offset": [
        7011,
        7043
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2843": {
      "fn": "Voting.startElection",
      "offset": [
        7011,
        7043
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2844": {
      "fn": "Voting.startElection",
      "jump": "o",
      "offset": [
        6837,
        7050
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2845": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4350,
        4712
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2846": {
      "offset": [
        1774,
        1785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2848": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1774,
        1785
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2849": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1774,
        1785
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2852": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1774,
        1785
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2853": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1774,
        1785
      ],
      "op": "DIV",
      "path": "0"
    },
    "2854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2858": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2860": {
      "op": "SHL"
    },
    "2861": {
      "op": "SUB"
    },
    "2862": {
      "offset": [
        1774,
        1785
      ],
      "op": "AND",
      "path": "0"
    },
    "2863": {
      "offset": [
        1760,
        1770
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2864": {
      "offset": [
        1760,
        1785
      ],
      "op": "EQ",
      "path": "0"
    },
    "2865": {
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB4C"
    },
    "2868": {
      "offset": [
        1752,
        1813
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2869": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2871": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2872": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2876": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2878": {
      "op": "SHL"
    },
    "2879": {
      "offset": [
        1752,
        1813
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2880": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2881": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2883": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "ADD",
      "path": "0"
    },
    "2884": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "2887": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2888": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CA3"
    },
    "2891": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        1752,
        1813
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2892": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2893": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2895": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2897": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2899": {
      "op": "SHL"
    },
    "2900": {
      "op": "SUB"
    },
    "2901": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 19
    },
    "2902": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "AND",
      "path": "0"
    },
    "2903": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2905": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2906": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2907": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2908": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4458
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2910": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2912": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2913": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2915": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2916": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4465
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2917": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4483
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2919": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4483
      ],
      "op": "ADD",
      "path": "0"
    },
    "2920": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4483
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2921": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4483
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2924": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4483
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2925": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4483
      ],
      "op": "DIV",
      "path": "0"
    },
    "2926": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4483
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2928": {
      "branch": 59,
      "fn": "Voting.removeRightToVote",
      "offset": [
        4452,
        4483
      ],
      "op": "AND",
      "path": "0"
    },
    "2929": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4451,
        4483
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2930": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4451,
        4483
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2931": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4451,
        4515
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB9E"
    },
    "2934": {
      "branch": 59,
      "fn": "Voting.removeRightToVote",
      "offset": [
        4451,
        4515
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2935": {
      "op": "POP"
    },
    "2936": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2938": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2940": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2942": {
      "op": "SHL"
    },
    "2943": {
      "op": "SUB"
    },
    "2944": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2945": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "AND",
      "path": "0"
    },
    "2946": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2948": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2949": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2950": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2951": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4494
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2953": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2955": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2956": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2958": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2959": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4501
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2960": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4515
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2962": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4515
      ],
      "op": "ADD",
      "path": "0"
    },
    "2963": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4515
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2964": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4515
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "2968": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4515
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2969": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4515
      ],
      "op": "DIV",
      "path": "0"
    },
    "2970": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4515
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2972": {
      "branch": 60,
      "fn": "Voting.removeRightToVote",
      "offset": [
        4488,
        4515
      ],
      "op": "AND",
      "path": "0"
    },
    "2973": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4487,
        4515
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2974": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4451,
        4515
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2975": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBE4"
    },
    "2978": {
      "branch": 60,
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2979": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2981": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2982": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2986": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2988": {
      "op": "SHL"
    },
    "2989": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2990": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2991": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2993": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2995": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2996": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "ADD",
      "path": "0"
    },
    "2997": {
      "op": "MSTORE"
    },
    "2998": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "3000": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3002": {
      "op": "DUP3"
    },
    "3003": {
      "op": "ADD"
    },
    "3004": {
      "op": "MSTORE"
    },
    "3005": {
      "op": "PUSH23",
      "value": "0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959"
    },
    "3029": {
      "op": "PUSH1",
      "value": "0x4A"
    },
    "3031": {
      "op": "SHL"
    },
    "3032": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3034": {
      "op": "DUP3"
    },
    "3035": {
      "op": "ADD"
    },
    "3036": {
      "op": "MSTORE"
    },
    "3037": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3039": {
      "op": "ADD"
    },
    "3040": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "3043": {
      "op": "JUMP"
    },
    "3044": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4430,
        4564
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3047": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3049": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3051": {
      "op": "SHL"
    },
    "3052": {
      "op": "SUB"
    },
    "3053": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 20
    },
    "3054": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "AND",
      "path": "0"
    },
    "3055": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3057": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3058": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3059": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3060": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4588
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3062": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3064": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3065": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3067": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3068": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4595
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3069": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3071": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4603
      ],
      "op": "ADD",
      "path": "0"
    },
    "3072": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4603
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3073": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "3075": {
      "branch": 61,
      "fn": "Voting.removeRightToVote",
      "offset": [
        4582,
        4603
      ],
      "op": "AND",
      "path": "0"
    },
    "3076": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC4F"
    },
    "3079": {
      "branch": 61,
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3080": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3082": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3083": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3087": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3089": {
      "op": "SHL"
    },
    "3090": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3091": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3092": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3094": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3096": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3097": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "ADD",
      "path": "0"
    },
    "3098": {
      "op": "DUP2"
    },
    "3099": {
      "op": "SWAP1"
    },
    "3100": {
      "op": "MSTORE"
    },
    "3101": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3103": {
      "op": "DUP3"
    },
    "3104": {
      "op": "ADD"
    },
    "3105": {
      "op": "MSTORE"
    },
    "3106": {
      "op": "PUSH32",
      "value": "0x566F74657220646F65736E2774206861766520726967687420746F20766F7465"
    },
    "3139": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3141": {
      "op": "DUP3"
    },
    "3142": {
      "op": "ADD"
    },
    "3143": {
      "op": "MSTORE"
    },
    "3144": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3146": {
      "op": "ADD"
    },
    "3147": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "3150": {
      "op": "JUMP"
    },
    "3151": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4574,
        4640
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3152": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3154": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3156": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3158": {
      "op": "SHL"
    },
    "3159": {
      "op": "SUB"
    },
    "3160": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 21
    },
    "3161": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "AND",
      "path": "0"
    },
    "3162": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4674,
        4679
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3164": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3165": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3166": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3167": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3169": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3171": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3172": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3173": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3174": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3176": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3177": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4663
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3178": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4671
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3180": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4671
      ],
      "op": "ADD",
      "path": "0"
    },
    "3181": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4679
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3182": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4679
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3183": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3185": {
      "op": "NOT"
    },
    "3186": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4679
      ],
      "op": "AND",
      "path": "0"
    },
    "3187": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4679
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3188": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4679
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3189": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4700
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 22,
      "value": "0x6"
    },
    "3191": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3192": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3193": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3194": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4656
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3195": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4700
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3196": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4700
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3197": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC87"
    },
    "3200": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3201": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4656
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3202": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4650,
        4656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3203": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B25"
    },
    "3206": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        4689,
        4705
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3207": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3208": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3209": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3210": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        4689,
        4705
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3211": {
      "op": "POP"
    },
    "3212": {
      "op": "POP"
    },
    "3213": {
      "op": "POP"
    },
    "3214": {
      "fn": "Voting.removeRightToVote",
      "jump": "o",
      "offset": [
        4350,
        4712
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3215": {
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3216": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3218": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3219": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3220": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3221": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3222": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "LT",
      "path": "0"
    },
    "3223": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC9F"
    },
    "3226": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3227": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3229": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3230": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "REVERT",
      "path": "0"
    },
    "3231": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3232": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3233": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3235": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3236": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3238": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3240": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3241": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3242": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3244": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MUL",
      "path": "0"
    },
    "3245": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3246": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3248": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3249": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "POP",
      "path": "0"
    },
    "3250": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3251": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "POP",
      "path": "0"
    },
    "3252": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3253": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3255": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3256": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3257": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3258": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC2"
    },
    "3261": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3262": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "3265": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        692,
        714
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3266": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3267": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3268": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3270": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3271": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3273": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3274": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3275": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DIV",
      "path": "0"
    },
    "3276": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MUL",
      "path": "0"
    },
    "3277": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3279": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3280": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3282": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3283": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3284": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3285": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3286": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3288": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3289": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3290": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3291": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3292": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3293": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3294": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3295": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3296": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3298": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3299": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3300": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3301": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3302": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCEE"
    },
    "3305": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3306": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "3309": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        692,
        714
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3310": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3311": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3312": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3313": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD3B"
    },
    "3316": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3317": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3318": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3320": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "LT",
      "path": "0"
    },
    "3321": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD10"
    },
    "3324": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3325": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3328": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3329": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3330": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3331": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DIV",
      "path": "0"
    },
    "3332": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MUL",
      "path": "0"
    },
    "3333": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3334": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3335": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3336": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3338": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3339": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3340": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD3B"
    },
    "3343": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3344": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3345": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3346": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3347": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3348": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3349": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3351": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3352": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3354": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3356": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3357": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3358": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3359": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3360": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3361": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3362": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3363": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3364": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3366": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3367": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3368": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3370": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3371": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3372": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3373": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "GT",
      "path": "0"
    },
    "3374": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD1E"
    },
    "3377": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3378": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3379": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3380": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SUB",
      "path": "0"
    },
    "3381": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3383": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "AND",
      "path": "0"
    },
    "3384": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3385": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3386": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3387": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3388": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "POP",
      "path": "0"
    },
    "3389": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "POP",
      "path": "0"
    },
    "3390": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "POP",
      "path": "0"
    },
    "3391": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "POP",
      "path": "0"
    },
    "3392": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "POP",
      "path": "0"
    },
    "3393": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3394": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3395": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3397": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "ADD",
      "path": "0"
    },
    "3398": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3399": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3400": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "POP",
      "path": "0"
    },
    "3401": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        692,
        714
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3402": {
      "fn": "Voting.removeRightToVote",
      "jump": "o",
      "offset": [
        692,
        714
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3403": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4718,
        5392
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3404": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4811,
        4821
      ],
      "op": "CALLER",
      "path": "0"
    },
    "3405": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4781,
        4801
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3407": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3408": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3409": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3410": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4810
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3412": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3414": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3415": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3417": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3418": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3419": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4857,
        4871
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 23,
      "value": "0x2"
    },
    "3421": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4857,
        4871
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3422": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4857,
        4871
      ],
      "op": "ADD",
      "path": "0"
    },
    "3423": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4857,
        4871
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3424": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3425": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4804,
        4822
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3426": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4781,
        4801
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3427": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4857,
        4871
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "3429": {
      "branch": 62,
      "fn": "Voting.voteCandidate",
      "offset": [
        4857,
        4871
      ],
      "op": "AND",
      "path": "0"
    },
    "3430": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDA8"
    },
    "3433": {
      "branch": 62,
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3434": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3436": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3437": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3441": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3443": {
      "op": "SHL"
    },
    "3444": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3445": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3446": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3448": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3450": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3451": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "ADD",
      "path": "0"
    },
    "3452": {
      "op": "MSTORE"
    },
    "3453": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "3455": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3457": {
      "op": "DUP3"
    },
    "3458": {
      "op": "ADD"
    },
    "3459": {
      "op": "MSTORE"
    },
    "3460": {
      "op": "PUSH20",
      "value": "0x486173206E6F20726967687420746F20766F7465"
    },
    "3481": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3483": {
      "op": "SHL"
    },
    "3484": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3486": {
      "op": "DUP3"
    },
    "3487": {
      "op": "ADD"
    },
    "3488": {
      "op": "MSTORE"
    },
    "3489": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3491": {
      "op": "ADD"
    },
    "3492": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "3495": {
      "op": "JUMP"
    },
    "3496": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4849,
        4896
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3497": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 24,
      "value": "0x2"
    },
    "3499": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3500": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "ADD",
      "path": "0"
    },
    "3501": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3502": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3505": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3506": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "DIV",
      "path": "0"
    },
    "3507": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "3509": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4915,
        4939
      ],
      "op": "AND",
      "path": "0"
    },
    "3510": {
      "branch": 63,
      "fn": "Voting.voteCandidate",
      "offset": [
        4914,
        4939
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3511": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE02"
    },
    "3514": {
      "branch": 63,
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3515": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3517": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3518": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3522": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3524": {
      "op": "SHL"
    },
    "3525": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3526": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3527": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3529": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3531": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3532": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "ADD",
      "path": "0"
    },
    "3533": {
      "op": "MSTORE"
    },
    "3534": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "3536": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3538": {
      "op": "DUP3"
    },
    "3539": {
      "op": "ADD"
    },
    "3540": {
      "op": "MSTORE"
    },
    "3541": {
      "op": "PUSH32",
      "value": "0x616C726561647920766F74656420666F722063616E6469646174650000000000"
    },
    "3574": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3576": {
      "op": "DUP3"
    },
    "3577": {
      "op": "ADD"
    },
    "3578": {
      "op": "MSTORE"
    },
    "3579": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3581": {
      "op": "ADD"
    },
    "3582": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "3585": {
      "op": "JUMP"
    },
    "3586": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4906,
        4971
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3587": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4986,
        4995
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3589": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4981,
        5147
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3590": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5001,
        5011
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3592": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5001,
        5018
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3593": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4999,
        5018
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3594": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4999,
        5018
      ],
      "op": "LT",
      "path": "0"
    },
    "3595": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4981,
        5147
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3596": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4981,
        5147
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE55"
    },
    "3599": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4981,
        5147
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3600": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5062,
        5073
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3601": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5052
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3603": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5053,
        5054
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3604": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3605": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3606": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3607": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "LT",
      "path": "0"
    },
    "3608": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE23"
    },
    "3611": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3612": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE23"
    },
    "3615": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "3618": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        5042,
        5055
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3619": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3620": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3621": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3623": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3624": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3626": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3628": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3629": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3630": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "3632": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "MUL",
      "path": "0"
    },
    "3633": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5055
      ],
      "op": "ADD",
      "path": "0"
    },
    "3634": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5058
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3636": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5058
      ],
      "op": "ADD",
      "path": "0"
    },
    "3637": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5058
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3638": {
      "branch": 64,
      "fn": "Voting.voteCandidate",
      "offset": [
        5042,
        5073
      ],
      "op": "EQ",
      "path": "0"
    },
    "3639": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5038,
        5137
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3640": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5038,
        5137
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE43"
    },
    "3643": {
      "branch": 64,
      "fn": "Voting.voteCandidate",
      "offset": [
        5038,
        5137
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3644": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5098,
        5099
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 25
    },
    "3645": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5093,
        5099
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3646": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5093,
        5099
      ],
      "op": "POP",
      "path": "0"
    },
    "3647": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5117,
        5122
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 26,
      "value": "0xE55"
    },
    "3650": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5117,
        5122
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3651": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5038,
        5137
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3652": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5020,
        5023
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 27
    },
    "3653": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5020,
        5023
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE4D"
    },
    "3656": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5020,
        5023
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3657": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5020,
        5023
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C4D"
    },
    "3660": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        5020,
        5023
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3661": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5020,
        5023
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3662": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5020,
        5023
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3663": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5020,
        5023
      ],
      "op": "POP",
      "path": "0"
    },
    "3664": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5020,
        5023
      ],
      "op": "POP",
      "path": "0"
    },
    "3665": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4981,
        5147
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE05"
    },
    "3668": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4981,
        5147
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3669": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4981,
        5147
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3670": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4981,
        5147
      ],
      "op": "POP",
      "path": "0"
    },
    "3671": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5202
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 28,
      "value": "0x2"
    },
    "3673": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5203,
        5205
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3674": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3675": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3676": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3677": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "LT",
      "path": "0"
    },
    "3678": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE69"
    },
    "3681": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3682": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE69"
    },
    "3685": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "3688": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        5192,
        5206
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3689": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3690": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3691": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3693": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3694": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3696": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3698": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3699": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3700": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "3702": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "MUL",
      "path": "0"
    },
    "3703": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5206
      ],
      "op": "ADD",
      "path": "0"
    },
    "3704": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5211
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3706": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5211
      ],
      "op": "ADD",
      "path": "0"
    },
    "3707": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5192,
        5211
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3708": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5177,
        5183
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3709": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5177,
        5188
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3711": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5177,
        5188
      ],
      "op": "ADD",
      "path": "0"
    },
    "3712": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5177,
        5188
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3713": {
      "branch": 65,
      "fn": "Voting.voteCandidate",
      "offset": [
        5177,
        5211
      ],
      "op": "EQ",
      "path": "0"
    },
    "3714": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xED8"
    },
    "3717": {
      "branch": 65,
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3718": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3720": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3721": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3725": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3727": {
      "op": "SHL"
    },
    "3728": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3729": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3730": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3732": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3734": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3735": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "ADD",
      "path": "0"
    },
    "3736": {
      "op": "MSTORE"
    },
    "3737": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "3739": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3741": {
      "op": "DUP3"
    },
    "3742": {
      "op": "ADD"
    },
    "3743": {
      "op": "MSTORE"
    },
    "3744": {
      "op": "PUSH32",
      "value": "0x63616E6E6F7420766F74652063616E64696461746520696E2074686973206172"
    },
    "3777": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3779": {
      "op": "DUP3"
    },
    "3780": {
      "op": "ADD"
    },
    "3781": {
      "op": "MSTORE"
    },
    "3782": {
      "op": "PUSH2",
      "value": "0x6561"
    },
    "3785": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "3787": {
      "op": "SHL"
    },
    "3788": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3790": {
      "op": "DUP3"
    },
    "3791": {
      "op": "ADD"
    },
    "3792": {
      "op": "MSTORE"
    },
    "3793": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3795": {
      "op": "ADD"
    },
    "3796": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "3799": {
      "op": "JUMP"
    },
    "3800": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5156,
        5271
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3801": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5309,
        5310
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 29,
      "value": "0x1"
    },
    "3803": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5291
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3805": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5292,
        5294
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3806": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3807": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3808": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3809": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "LT",
      "path": "0"
    },
    "3810": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEED"
    },
    "3813": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3814": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEED"
    },
    "3817": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "3820": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        5281,
        5295
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3821": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3822": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3823": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3825": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3826": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3828": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3830": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3831": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3832": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "3834": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "MUL",
      "path": "0"
    },
    "3835": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5295
      ],
      "op": "ADD",
      "path": "0"
    },
    "3836": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5305
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3838": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5305
      ],
      "op": "ADD",
      "path": "0"
    },
    "3839": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5305
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3841": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3842": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3843": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3844": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF0D"
    },
    "3847": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3848": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3849": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "3852": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        5281,
        5310
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3853": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3854": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3855": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "POP",
      "path": "0"
    },
    "3856": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "POP",
      "path": "0"
    },
    "3857": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3858": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3859": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3860": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5281,
        5310
      ],
      "op": "POP",
      "path": "0"
    },
    "3861": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5343,
        5344
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 30,
      "value": "0x1"
    },
    "3863": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5340
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "3865": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5340
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3867": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3868": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3869": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3870": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF27"
    },
    "3873": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3874": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3875": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "3878": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        5320,
        5344
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3879": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3880": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3881": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3882": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5320,
        5344
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3883": {
      "op": "POP"
    },
    "3884": {
      "op": "POP"
    },
    "3885": {
      "op": "POP"
    },
    "3886": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5378
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 31,
      "value": "0x2"
    },
    "3888": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5378
      ],
      "op": "ADD",
      "path": "0"
    },
    "3889": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5385
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3890": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5385
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3891": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "3894": {
      "op": "NOT"
    },
    "3895": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5385
      ],
      "op": "AND",
      "path": "0"
    },
    "3896": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5385
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3899": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5385
      ],
      "op": "OR",
      "path": "0"
    },
    "3900": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5385
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3901": {
      "fn": "Voting.voteCandidate",
      "offset": [
        5354,
        5385
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3902": {
      "op": "POP"
    },
    "3903": {
      "fn": "Voting.voteCandidate",
      "jump": "o",
      "offset": [
        4718,
        5392
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3904": {
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3905": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3907": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3909": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3910": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3912": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3913": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3914": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3915": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3917": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3918": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3919": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3920": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3921": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3922": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3923": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF5B"
    },
    "3926": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3927": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "3930": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        607,
        646
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3931": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3932": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3933": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3935": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "3936": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3938": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3939": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3940": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DIV",
      "path": "0"
    },
    "3941": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MUL",
      "path": "0"
    },
    "3942": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3944": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "3945": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3947": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3948": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3949": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3950": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "3951": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3953": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3954": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3955": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3956": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3957": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3958": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3959": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3960": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3961": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3963": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "3964": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3965": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3966": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3967": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF87"
    },
    "3970": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3971": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "3974": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        607,
        646
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3975": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3976": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3977": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3978": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFD4"
    },
    "3981": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3982": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3983": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3985": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "LT",
      "path": "0"
    },
    "3986": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA9"
    },
    "3989": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3990": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3993": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3994": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3995": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3996": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DIV",
      "path": "0"
    },
    "3997": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MUL",
      "path": "0"
    },
    "3998": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3999": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4000": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4001": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4003": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "4004": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4005": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFD4"
    },
    "4008": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4009": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4010": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4011": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "4012": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4013": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4014": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4016": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4017": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4019": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4021": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4022": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4023": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4024": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4025": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4026": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4027": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4028": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4029": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4031": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "4032": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4033": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4035": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "4036": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4037": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4038": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "GT",
      "path": "0"
    },
    "4039": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFB7"
    },
    "4042": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4043": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4044": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4045": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SUB",
      "path": "0"
    },
    "4046": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4048": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "AND",
      "path": "0"
    },
    "4049": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4050": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "4051": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4052": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4053": {
      "op": "POP"
    },
    "4054": {
      "op": "POP"
    },
    "4055": {
      "op": "POP"
    },
    "4056": {
      "op": "POP"
    },
    "4057": {
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4059": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4060": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "4061": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4062": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4064": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4065": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "4066": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "ADD",
      "path": "0"
    },
    "4067": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4068": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4069": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4070": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4071": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4073": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4074": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4075": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "AND",
      "path": "0"
    },
    "4076": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4077": {
      "op": "POP"
    },
    "4078": {
      "offset": [
        607,
        646
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "4081": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4082": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DIV",
      "path": "0"
    },
    "4083": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4084": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "AND",
      "path": "0"
    },
    "4085": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4086": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "4090": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4091": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DIV",
      "path": "0"
    },
    "4092": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "AND",
      "path": "0"
    },
    "4093": {
      "fn": "Voting.voteCandidate",
      "offset": [
        607,
        646
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4094": {
      "fn": "Voting.voteCandidate",
      "jump": "o",
      "offset": [
        607,
        646
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4095": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4096": {
      "fn": "Voting.getParties",
      "offset": [
        3641,
        3655
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "4098": {
      "fn": "Voting.getParties",
      "offset": [
        3674,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 32,
      "value": "0x3"
    },
    "4100": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4101": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4102": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4103": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4105": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MUL",
      "path": "0"
    },
    "4106": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4108": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4109": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4111": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4112": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4113": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4114": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4115": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4117": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4118": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4119": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4120": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4121": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4122": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4123": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4124": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4125": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4127": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4128": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4130": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4131": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4132": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4133": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4134": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "LT",
      "path": "0"
    },
    "4135": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4136": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10F1"
    },
    "4139": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4140": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4141": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4142": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4143": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4145": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4146": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4148": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4150": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4151": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4152": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4154": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MUL",
      "path": "0"
    },
    "4155": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4156": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4158": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4159": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4160": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4162": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4163": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4165": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4166": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4167": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4168": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4170": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4171": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4172": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4173": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4174": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1056"
    },
    "4177": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4178": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "4181": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4182": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4183": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4184": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4186": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4187": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4189": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4190": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4191": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DIV",
      "path": "0"
    },
    "4192": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MUL",
      "path": "0"
    },
    "4193": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4195": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4196": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4198": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4199": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4200": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4201": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4202": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4204": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4205": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4206": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4207": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4208": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4209": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4210": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4211": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4212": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4214": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4215": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4216": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4217": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4218": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1082"
    },
    "4221": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4222": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "4225": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4226": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4227": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4228": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4229": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10CF"
    },
    "4232": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4233": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4234": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4236": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "LT",
      "path": "0"
    },
    "4237": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10A4"
    },
    "4240": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4241": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "4244": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4245": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4246": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4247": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DIV",
      "path": "0"
    },
    "4248": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MUL",
      "path": "0"
    },
    "4249": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4250": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4251": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4252": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4254": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4255": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4256": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10CF"
    },
    "4259": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4260": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4261": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4262": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4263": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4264": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4265": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4267": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4268": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4270": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4272": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4273": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4274": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4275": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4276": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4277": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4278": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4279": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4280": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4282": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4283": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4284": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4286": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4287": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4288": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4289": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "GT",
      "path": "0"
    },
    "4290": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10B2"
    },
    "4293": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4294": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4295": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4296": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SUB",
      "path": "0"
    },
    "4297": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4299": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "AND",
      "path": "0"
    },
    "4300": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4301": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4302": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4303": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4304": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4305": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4306": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4307": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4308": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4309": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4310": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4311": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4313": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4314": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4316": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4317": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4318": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4319": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4320": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4321": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4322": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4323": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4324": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4325": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4327": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4328": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4329": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4331": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "ADD",
      "path": "0"
    },
    "4332": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4333": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1023"
    },
    "4336": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4337": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4338": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4339": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4340": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4341": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4342": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4343": {
      "fn": "Voting.getParties",
      "offset": [
        3667,
        3681
      ],
      "op": "POP",
      "path": "0"
    },
    "4344": {
      "fn": "Voting.getParties",
      "offset": [
        3598,
        3688
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4345": {
      "fn": "Voting.getParties",
      "jump": "o",
      "offset": [
        3598,
        3688
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4346": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4347": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4349": {
      "op": "DUP1"
    },
    "4350": {
      "op": "MLOAD"
    },
    "4351": {
      "op": "DUP1"
    },
    "4352": {
      "op": "DUP3"
    },
    "4353": {
      "op": "ADD"
    },
    "4354": {
      "op": "SWAP1"
    },
    "4355": {
      "op": "SWAP2"
    },
    "4356": {
      "op": "MSTORE"
    },
    "4357": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4359": {
      "op": "DUP2"
    },
    "4360": {
      "op": "MSTORE"
    },
    "4361": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4363": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4365": {
      "op": "DUP3"
    },
    "4366": {
      "op": "ADD"
    },
    "4367": {
      "op": "MSTORE"
    },
    "4368": {
      "fn": "Voting.winningParty",
      "offset": [
        6378,
        6402
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4370": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6439
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 33,
      "value": "0x3"
    },
    "4372": {
      "fn": "Voting.winningParty",
      "offset": [
        6440,
        6441
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4374": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4375": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4376": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4377": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "LT",
      "path": "0"
    },
    "4378": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1125"
    },
    "4381": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4382": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1125"
    },
    "4385": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "4388": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6432,
        6442
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4389": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4390": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4391": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4393": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4394": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4396": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4398": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4399": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4400": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4402": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "MUL",
      "path": "0"
    },
    "4403": {
      "fn": "Voting.winningParty",
      "offset": [
        6432,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4404": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4406": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4407": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4408": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4410": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4411": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4413": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4414": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4415": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4416": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4418": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4419": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4420": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4421": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4422": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x114E"
    },
    "4425": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4426": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "4429": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4430": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4431": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4432": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4434": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4435": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4437": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4438": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4439": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DIV",
      "path": "0"
    },
    "4440": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MUL",
      "path": "0"
    },
    "4441": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4443": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4444": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4446": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4447": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4448": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4449": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4450": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4452": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4453": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4454": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4455": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4456": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4457": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4458": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4459": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4460": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4462": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4463": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4464": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4465": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4466": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x117A"
    },
    "4469": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4470": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "4473": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4474": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4475": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4476": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4477": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C7"
    },
    "4480": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4481": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4482": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4484": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "LT",
      "path": "0"
    },
    "4485": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x119C"
    },
    "4488": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4489": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "4492": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4493": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4494": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4495": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DIV",
      "path": "0"
    },
    "4496": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MUL",
      "path": "0"
    },
    "4497": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4498": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4499": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4500": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4502": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4503": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4504": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C7"
    },
    "4507": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4508": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4509": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4510": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4511": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4512": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4513": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4515": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4516": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4518": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4520": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4521": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4522": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4523": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4524": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4525": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4526": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4527": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4528": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4530": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4531": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4532": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4534": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4535": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4536": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4537": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "GT",
      "path": "0"
    },
    "4538": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11AA"
    },
    "4541": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4542": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4543": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4544": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SUB",
      "path": "0"
    },
    "4545": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4547": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "AND",
      "path": "0"
    },
    "4548": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4549": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4550": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4551": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4552": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "POP",
      "path": "0"
    },
    "4553": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "POP",
      "path": "0"
    },
    "4554": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "POP",
      "path": "0"
    },
    "4555": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "POP",
      "path": "0"
    },
    "4556": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "POP",
      "path": "0"
    },
    "4557": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4558": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4559": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4561": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4562": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4564": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4565": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "ADD",
      "path": "0"
    },
    "4566": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4567": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4568": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4569": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "POP",
      "path": "0"
    },
    "4570": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "POP",
      "path": "0"
    },
    "4571": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4572": {
      "fn": "Voting.winningParty",
      "offset": [
        6416,
        6442
      ],
      "op": "POP",
      "path": "0"
    },
    "4573": {
      "fn": "Voting.winningParty",
      "offset": [
        6457,
        6466
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4575": {
      "fn": "Voting.winningParty",
      "offset": [
        6452,
        6682
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4576": {
      "fn": "Voting.winningParty",
      "offset": [
        6476,
        6483
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "4578": {
      "fn": "Voting.winningParty",
      "offset": [
        6476,
        6490
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4579": {
      "fn": "Voting.winningParty",
      "offset": [
        6472,
        6490
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4580": {
      "fn": "Voting.winningParty",
      "offset": [
        6472,
        6490
      ],
      "op": "LT",
      "path": "0"
    },
    "4581": {
      "fn": "Voting.winningParty",
      "offset": [
        6452,
        6682
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4582": {
      "fn": "Voting.winningParty",
      "offset": [
        6452,
        6682
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1319"
    },
    "4585": {
      "fn": "Voting.winningParty",
      "offset": [
        6452,
        6682
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4586": {
      "fn": "Voting.winningParty",
      "offset": [
        6538,
        6554
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4587": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6522
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "4589": {
      "fn": "Voting.winningParty",
      "offset": [
        6523,
        6524
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4590": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4591": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4592": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4593": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "LT",
      "path": "0"
    },
    "4594": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11FD"
    },
    "4597": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4598": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11FD"
    },
    "4601": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "4604": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6515,
        6525
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4605": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4606": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4607": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4609": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4610": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4612": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4614": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4615": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4616": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4618": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "MUL",
      "path": "0"
    },
    "4619": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6525
      ],
      "op": "ADD",
      "path": "0"
    },
    "4620": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6535
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4622": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6535
      ],
      "op": "ADD",
      "path": "0"
    },
    "4623": {
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6535
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4624": {
      "branch": 66,
      "fn": "Voting.winningParty",
      "offset": [
        6515,
        6554
      ],
      "op": "GT",
      "path": "0"
    },
    "4625": {
      "fn": "Voting.winningParty",
      "offset": [
        6511,
        6672
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4626": {
      "fn": "Voting.winningParty",
      "offset": [
        6511,
        6672
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1307"
    },
    "4629": {
      "branch": 66,
      "fn": "Voting.winningParty",
      "offset": [
        6511,
        6672
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4630": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6600
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 34,
      "value": "0x3"
    },
    "4632": {
      "fn": "Voting.winningParty",
      "offset": [
        6601,
        6602
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4633": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4634": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4635": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4636": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "LT",
      "path": "0"
    },
    "4637": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1228"
    },
    "4640": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4641": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1228"
    },
    "4644": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "4647": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6593,
        6603
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4648": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4649": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4650": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4652": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4653": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4655": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4657": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4658": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4659": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4661": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "MUL",
      "path": "0"
    },
    "4662": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6603
      ],
      "op": "ADD",
      "path": "0"
    },
    "4663": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6613
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4665": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6613
      ],
      "op": "ADD",
      "path": "0"
    },
    "4666": {
      "fn": "Voting.winningParty",
      "offset": [
        6593,
        6613
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4667": {
      "fn": "Voting.winningParty",
      "offset": [
        6574,
        6613
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4668": {
      "fn": "Voting.winningParty",
      "offset": [
        6574,
        6613
      ],
      "op": "POP",
      "path": "0"
    },
    "4669": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6654
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 35,
      "value": "0x3"
    },
    "4671": {
      "fn": "Voting.winningParty",
      "offset": [
        6655,
        6656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4672": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4673": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4674": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4675": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "LT",
      "path": "0"
    },
    "4676": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x124F"
    },
    "4679": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4680": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x124F"
    },
    "4683": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "4686": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6647,
        6657
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4687": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4688": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4689": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4691": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4692": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4694": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4696": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4697": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4698": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4700": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "MUL",
      "path": "0"
    },
    "4701": {
      "fn": "Voting.winningParty",
      "offset": [
        6647,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4702": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4704": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4705": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4706": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4708": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4709": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4711": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4712": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4713": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4714": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4716": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4717": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4718": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4719": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4720": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1278"
    },
    "4723": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4724": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "4727": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4728": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4729": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4730": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4732": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4733": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4735": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4736": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4737": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DIV",
      "path": "0"
    },
    "4738": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MUL",
      "path": "0"
    },
    "4739": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4741": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4742": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4744": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4745": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4746": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4747": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4748": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4750": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4751": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4752": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4753": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4754": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4755": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4756": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4757": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4758": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4760": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4761": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4762": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4763": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4764": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12A4"
    },
    "4767": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4768": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C68"
    },
    "4771": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4772": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4773": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4774": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4775": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12F1"
    },
    "4778": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4779": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4780": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4782": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "LT",
      "path": "0"
    },
    "4783": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12C6"
    },
    "4786": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4787": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "4790": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4791": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4792": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4793": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DIV",
      "path": "0"
    },
    "4794": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MUL",
      "path": "0"
    },
    "4795": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4796": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4797": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4798": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4800": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4801": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4802": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12F1"
    },
    "4805": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4806": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4807": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4808": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4809": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4810": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4811": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4813": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4814": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4816": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4818": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4819": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4820": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4821": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4822": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4823": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4824": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4825": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4826": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4828": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4829": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4830": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4832": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4833": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4834": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4835": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "GT",
      "path": "0"
    },
    "4836": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12D4"
    },
    "4839": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4840": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4841": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4842": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SUB",
      "path": "0"
    },
    "4843": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "4845": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "AND",
      "path": "0"
    },
    "4846": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4847": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4848": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4849": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4850": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "POP",
      "path": "0"
    },
    "4851": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "POP",
      "path": "0"
    },
    "4852": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "POP",
      "path": "0"
    },
    "4853": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "POP",
      "path": "0"
    },
    "4854": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "POP",
      "path": "0"
    },
    "4855": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4856": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4857": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4859": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4860": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4862": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4863": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "ADD",
      "path": "0"
    },
    "4864": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4865": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4866": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4867": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "POP",
      "path": "0"
    },
    "4868": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "POP",
      "path": "0"
    },
    "4869": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4870": {
      "fn": "Voting.winningParty",
      "offset": [
        6631,
        6657
      ],
      "op": "POP",
      "path": "0"
    },
    "4871": {
      "fn": "Voting.winningParty",
      "offset": [
        6511,
        6672
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4872": {
      "fn": "Voting.winningParty",
      "offset": [
        6492,
        6495
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 36
    },
    "4873": {
      "fn": "Voting.winningParty",
      "offset": [
        6492,
        6495
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1311"
    },
    "4876": {
      "fn": "Voting.winningParty",
      "offset": [
        6492,
        6495
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4877": {
      "fn": "Voting.winningParty",
      "offset": [
        6492,
        6495
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C4D"
    },
    "4880": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        6492,
        6495
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4881": {
      "fn": "Voting.winningParty",
      "offset": [
        6492,
        6495
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4882": {
      "fn": "Voting.winningParty",
      "offset": [
        6492,
        6495
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4883": {
      "fn": "Voting.winningParty",
      "offset": [
        6492,
        6495
      ],
      "op": "POP",
      "path": "0"
    },
    "4884": {
      "fn": "Voting.winningParty",
      "offset": [
        6492,
        6495
      ],
      "op": "POP",
      "path": "0"
    },
    "4885": {
      "fn": "Voting.winningParty",
      "offset": [
        6452,
        6682
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11DF"
    },
    "4888": {
      "fn": "Voting.winningParty",
      "offset": [
        6452,
        6682
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4889": {
      "fn": "Voting.winningParty",
      "offset": [
        6452,
        6682
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4890": {
      "fn": "Voting.winningParty",
      "offset": [
        6452,
        6682
      ],
      "op": "POP",
      "path": "0"
    },
    "4891": {
      "fn": "Voting.winningParty",
      "offset": [
        6368,
        6688
      ],
      "op": "POP",
      "path": "0"
    },
    "4892": {
      "fn": "Voting.winningParty",
      "offset": [
        6294,
        6688
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4893": {
      "fn": "Voting.winningParty",
      "jump": "o",
      "offset": [
        6294,
        6688
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4894": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4895": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5801,
        5835
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1350"
    },
    "4898": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4900": {
      "op": "MLOAD"
    },
    "4901": {
      "op": "DUP1"
    },
    "4902": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4904": {
      "op": "ADD"
    },
    "4905": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4907": {
      "op": "MSTORE"
    },
    "4908": {
      "op": "DUP1"
    },
    "4909": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4911": {
      "op": "DUP2"
    },
    "4912": {
      "op": "MSTORE"
    },
    "4913": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4915": {
      "op": "ADD"
    },
    "4916": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4918": {
      "op": "DUP2"
    },
    "4919": {
      "op": "MSTORE"
    },
    "4920": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4922": {
      "op": "ADD"
    },
    "4923": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4925": {
      "op": "DUP2"
    },
    "4926": {
      "op": "MSTORE"
    },
    "4927": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4929": {
      "op": "ADD"
    },
    "4930": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4932": {
      "op": "DUP2"
    },
    "4933": {
      "op": "MSTORE"
    },
    "4934": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4936": {
      "op": "ADD"
    },
    "4937": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4939": {
      "op": "DUP2"
    },
    "4940": {
      "op": "MSTORE"
    },
    "4941": {
      "op": "POP"
    },
    "4942": {
      "op": "SWAP1"
    },
    "4943": {
      "op": "JUMP"
    },
    "4944": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5801,
        5835
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4945": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5846,
        5883
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4947": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5886,
        5905
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x135B"
    },
    "4950": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5900,
        5904
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4951": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5886,
        5899
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x71C"
    },
    "4954": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        5886,
        5905
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4955": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5886,
        5905
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4956": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5846,
        5905
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4957": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5846,
        5905
      ],
      "op": "POP",
      "path": "0"
    },
    "4958": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5915,
        5939
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4960": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5991
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 37
    },
    "4961": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5992,
        5993
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4963": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4964": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4965": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4966": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "LT",
      "path": "0"
    },
    "4967": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1372"
    },
    "4970": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4971": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1372"
    },
    "4974": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "4977": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        5973,
        5994
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4978": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4979": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4981": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "MUL",
      "path": "0"
    },
    "4982": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4984": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "ADD",
      "path": "0"
    },
    "4985": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "ADD",
      "path": "0"
    },
    "4986": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5973,
        5994
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4987": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5953,
        5994
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4988": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5953,
        5994
      ],
      "op": "POP",
      "path": "0"
    },
    "4989": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6009,
        6018
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4991": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6004,
        6282
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4992": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6028,
        6046
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4993": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6028,
        6053
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4994": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6024,
        6025
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4995": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6024,
        6053
      ],
      "op": "LT",
      "path": "0"
    },
    "4996": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6004,
        6282
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4997": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6004,
        6282
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13FC"
    },
    "5000": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6004,
        6282
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5001": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6112,
        6128
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5002": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6096
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5003": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6097,
        6098
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5004": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5005": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5006": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5007": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "LT",
      "path": "0"
    },
    "5008": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x139B"
    },
    "5011": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5012": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x139B"
    },
    "5015": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "5018": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        6078,
        6099
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5019": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5020": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5022": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "MUL",
      "path": "0"
    },
    "5023": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5025": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "ADD",
      "path": "0"
    },
    "5026": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "ADD",
      "path": "0"
    },
    "5027": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6099
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5028": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6109
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "5030": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6109
      ],
      "op": "ADD",
      "path": "0"
    },
    "5031": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6109
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5032": {
      "branch": 67,
      "fn": "Voting.winningCandidate",
      "offset": [
        6078,
        6128
      ],
      "op": "GT",
      "path": "0"
    },
    "5033": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6074,
        6272
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5034": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6074,
        6272
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13EA"
    },
    "5037": {
      "branch": 67,
      "fn": "Voting.winningCandidate",
      "offset": [
        6074,
        6272
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5038": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6185
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 38
    },
    "5039": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6186,
        6187
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5040": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5041": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5042": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5043": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "LT",
      "path": "0"
    },
    "5044": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13BF"
    },
    "5047": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5048": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13BF"
    },
    "5051": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "5054": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        6167,
        6188
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5055": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5056": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5058": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "MUL",
      "path": "0"
    },
    "5059": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5061": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "ADD",
      "path": "0"
    },
    "5062": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "ADD",
      "path": "0"
    },
    "5063": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6188
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5064": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6198
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "5066": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6198
      ],
      "op": "ADD",
      "path": "0"
    },
    "5067": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6167,
        6198
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5068": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6148,
        6198
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5069": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6148,
        6198
      ],
      "op": "POP",
      "path": "0"
    },
    "5070": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6254
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 39
    },
    "5071": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6255,
        6256
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5072": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5073": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5074": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5075": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "LT",
      "path": "0"
    },
    "5076": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13DF"
    },
    "5079": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5080": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13DF"
    },
    "5083": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1AE1"
    },
    "5086": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        6236,
        6257
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5087": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5088": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5090": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "MUL",
      "path": "0"
    },
    "5091": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5093": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "ADD",
      "path": "0"
    },
    "5094": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "ADD",
      "path": "0"
    },
    "5095": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6236,
        6257
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5096": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6216,
        6257
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5097": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6216,
        6257
      ],
      "op": "POP",
      "path": "0"
    },
    "5098": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6074,
        6272
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5099": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6055,
        6058
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 40
    },
    "5100": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6055,
        6058
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13F4"
    },
    "5103": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6055,
        6058
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5104": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6055,
        6058
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C4D"
    },
    "5107": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        6055,
        6058
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5108": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6055,
        6058
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5109": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6055,
        6058
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5110": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6055,
        6058
      ],
      "op": "POP",
      "path": "0"
    },
    "5111": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6055,
        6058
      ],
      "op": "POP",
      "path": "0"
    },
    "5112": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6004,
        6282
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x137F"
    },
    "5115": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6004,
        6282
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5116": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6004,
        6282
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5117": {
      "fn": "Voting.winningCandidate",
      "offset": [
        6004,
        6282
      ],
      "op": "POP",
      "path": "0"
    },
    "5118": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5836,
        6288
      ],
      "op": "POP",
      "path": "0"
    },
    "5119": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5836,
        6288
      ],
      "op": "POP",
      "path": "0"
    },
    "5120": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5121": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5122": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5740,
        6288
      ],
      "op": "POP",
      "path": "0"
    },
    "5123": {
      "fn": "Voting.winningCandidate",
      "jump": "o",
      "offset": [
        5740,
        6288
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5124": {
      "fn": "Voting.is_open",
      "offset": [
        7056,
        7247
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5125": {
      "fn": "Voting.is_open",
      "offset": [
        7095,
        7105
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5127": {
      "fn": "Voting.is_open",
      "offset": [
        7095,
        7105
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5128": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7132
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5130": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7132
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5131": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7132
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "5133": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7132
      ],
      "op": "AND",
      "path": "0"
    },
    "5134": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7132
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5136": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5137": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "GT",
      "path": "0"
    },
    "5138": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5139": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x141E"
    },
    "5142": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5143": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x141E"
    },
    "5146": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1950"
    },
    "5149": {
      "fn": "Voting.is_open",
      "jump": "i",
      "offset": [
        7120,
        7153
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5150": {
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5151": {
      "branch": 68,
      "fn": "Voting.is_open",
      "offset": [
        7120,
        7153
      ],
      "op": "EQ",
      "path": "0"
    },
    "5152": {
      "fn": "Voting.is_open",
      "offset": [
        7116,
        7241
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5153": {
      "fn": "Voting.is_open",
      "offset": [
        7116,
        7241
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x142A"
    },
    "5156": {
      "branch": 68,
      "fn": "Voting.is_open",
      "offset": [
        7116,
        7241
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5157": {
      "op": "POP"
    },
    "5158": {
      "fn": "Voting.is_open",
      "offset": [
        7176,
        7180
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 41,
      "value": "0x1"
    },
    "5160": {
      "fn": "Voting.is_open",
      "offset": [
        7176,
        7180
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5161": {
      "fn": "Voting.is_open",
      "jump": "o",
      "offset": [
        7056,
        7247
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5162": {
      "fn": "Voting.is_open",
      "offset": [
        7116,
        7241
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5163": {
      "op": "POP"
    },
    "5164": {
      "fn": "Voting.is_open",
      "offset": [
        7225,
        7230
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 42,
      "value": "0x0"
    },
    "5166": {
      "fn": "Voting.is_open",
      "offset": [
        7225,
        7230
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5167": {
      "fn": "Voting.is_open",
      "jump": "o",
      "offset": [
        7056,
        7247
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5168": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3694,
        4344
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5169": {
      "offset": [
        1774,
        1785
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5171": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1774,
        1785
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5172": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1774,
        1785
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "5175": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1774,
        1785
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5176": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1774,
        1785
      ],
      "op": "DIV",
      "path": "0"
    },
    "5177": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5181": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5183": {
      "op": "SHL"
    },
    "5184": {
      "op": "SUB"
    },
    "5185": {
      "offset": [
        1774,
        1785
      ],
      "op": "AND",
      "path": "0"
    },
    "5186": {
      "offset": [
        1760,
        1770
      ],
      "op": "CALLER",
      "path": "0"
    },
    "5187": {
      "offset": [
        1760,
        1785
      ],
      "op": "EQ",
      "path": "0"
    },
    "5188": {
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x145F"
    },
    "5191": {
      "offset": [
        1752,
        1813
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5192": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5194": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5195": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5199": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5201": {
      "op": "SHL"
    },
    "5202": {
      "offset": [
        1752,
        1813
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5203": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5204": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5206": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "ADD",
      "path": "0"
    },
    "5207": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "5210": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5211": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CA3"
    },
    "5214": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        1752,
        1813
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5215": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        1752,
        1813
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5216": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5218": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5220": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5222": {
      "op": "SHL"
    },
    "5223": {
      "op": "SUB"
    },
    "5224": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 43
    },
    "5225": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "AND",
      "path": "0"
    },
    "5226": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5228": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5229": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5230": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5231": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3884
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5233": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5235": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5236": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5238": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5239": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3891
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5240": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3909
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "5242": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3909
      ],
      "op": "ADD",
      "path": "0"
    },
    "5243": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3909
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5244": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3909
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "5247": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3909
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5248": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3909
      ],
      "op": "DIV",
      "path": "0"
    },
    "5249": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3909
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "5251": {
      "branch": 69,
      "fn": "Voting.giveRightToVote",
      "offset": [
        3878,
        3909
      ],
      "op": "AND",
      "path": "0"
    },
    "5252": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3877,
        3909
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5253": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3877,
        3909
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5254": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3877,
        3941
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14B1"
    },
    "5257": {
      "branch": 69,
      "fn": "Voting.giveRightToVote",
      "offset": [
        3877,
        3941
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5258": {
      "op": "POP"
    },
    "5259": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5261": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5263": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5265": {
      "op": "SHL"
    },
    "5266": {
      "op": "SUB"
    },
    "5267": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5268": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "AND",
      "path": "0"
    },
    "5269": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5271": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5272": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5273": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5274": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3920
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5276": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5278": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5279": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5281": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5282": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3927
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5283": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3941
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "5285": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3941
      ],
      "op": "ADD",
      "path": "0"
    },
    "5286": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3941
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5287": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3941
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "5291": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3941
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5292": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3941
      ],
      "op": "DIV",
      "path": "0"
    },
    "5293": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3941
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "5295": {
      "branch": 70,
      "fn": "Voting.giveRightToVote",
      "offset": [
        3914,
        3941
      ],
      "op": "AND",
      "path": "0"
    },
    "5296": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3913,
        3941
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5297": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3877,
        3941
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5298": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F7"
    },
    "5301": {
      "branch": 70,
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5302": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5304": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5305": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5309": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5311": {
      "op": "SHL"
    },
    "5312": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5313": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5314": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5316": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5318": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5319": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "ADD",
      "path": "0"
    },
    "5320": {
      "op": "MSTORE"
    },
    "5321": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "5323": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5325": {
      "op": "DUP3"
    },
    "5326": {
      "op": "ADD"
    },
    "5327": {
      "op": "MSTORE"
    },
    "5328": {
      "op": "PUSH23",
      "value": "0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959"
    },
    "5352": {
      "op": "PUSH1",
      "value": "0x4A"
    },
    "5354": {
      "op": "SHL"
    },
    "5355": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5357": {
      "op": "DUP3"
    },
    "5358": {
      "op": "ADD"
    },
    "5359": {
      "op": "MSTORE"
    },
    "5360": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5362": {
      "op": "ADD"
    },
    "5363": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "5366": {
      "op": "JUMP"
    },
    "5367": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3856,
        3990
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5370": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5372": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5374": {
      "op": "SHL"
    },
    "5375": {
      "op": "SUB"
    },
    "5376": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 44
    },
    "5377": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "AND",
      "path": "0"
    },
    "5378": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5380": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5381": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5382": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5383": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4015
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5385": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5387": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5388": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5390": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5391": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4022
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5392": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4030
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "5394": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4030
      ],
      "op": "ADD",
      "path": "0"
    },
    "5395": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4030
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5396": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4030
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "5398": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4009,
        4030
      ],
      "op": "AND",
      "path": "0"
    },
    "5399": {
      "branch": 71,
      "fn": "Voting.giveRightToVote",
      "offset": [
        4008,
        4030
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5400": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x155C"
    },
    "5403": {
      "branch": 71,
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5404": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5406": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5407": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5411": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5413": {
      "op": "SHL"
    },
    "5414": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5415": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5416": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5418": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "5420": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5421": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "ADD",
      "path": "0"
    },
    "5422": {
      "op": "MSTORE"
    },
    "5423": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "5425": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5427": {
      "op": "DUP3"
    },
    "5428": {
      "op": "ADD"
    },
    "5429": {
      "op": "MSTORE"
    },
    "5430": {
      "op": "PUSH22",
      "value": "0x566F7465722063616E20616C726561647920766F7465"
    },
    "5453": {
      "op": "PUSH1",
      "value": "0x50"
    },
    "5455": {
      "op": "SHL"
    },
    "5456": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5458": {
      "op": "DUP3"
    },
    "5459": {
      "op": "ADD"
    },
    "5460": {
      "op": "MSTORE"
    },
    "5461": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5463": {
      "op": "ADD"
    },
    "5464": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x45B"
    },
    "5467": {
      "op": "JUMP"
    },
    "5468": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4000,
        4057
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5469": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5471": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5473": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5475": {
      "op": "SHL"
    },
    "5476": {
      "op": "SUB"
    },
    "5477": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 45
    },
    "5478": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "AND",
      "path": "0"
    },
    "5479": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5481": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5482": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5483": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5484": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4091,
        4095
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5486": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5488": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5489": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5490": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5491": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5493": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5494": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5495": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4080
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5496": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4088
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "5498": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4088
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5499": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4088
      ],
      "op": "ADD",
      "path": "0"
    },
    "5500": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5501": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5502": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "5504": {
      "op": "NOT"
    },
    "5505": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "AND",
      "path": "0"
    },
    "5506": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5507": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5508": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "OR",
      "path": "0"
    },
    "5509": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5510": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5511": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4067,
        4095
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "5512": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 46
    },
    "5513": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5514": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1595"
    },
    "5517": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "5518": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "DUP6",
      "path": "0"
    },
    "5519": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "ADD",
      "path": "0"
    },
    "5520": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5521": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1618"
    },
    "5524": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        4105,
        4126
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5525": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5526": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4105,
        4126
      ],
      "op": "POP",
      "path": "0"
    },
    "5527": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4157,
        4175
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 47,
      "value": "0x159F"
    },
    "5530": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4170,
        4174
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5531": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4157,
        4169
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x526"
    },
    "5534": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        4157,
        4175
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5535": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4157,
        4175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5536": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5538": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5540": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5542": {
      "op": "SHL"
    },
    "5543": {
      "op": "SUB"
    },
    "5544": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP5",
      "path": "0"
    },
    "5545": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "AND",
      "path": "0"
    },
    "5546": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5548": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5549": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5550": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5551": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4142
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "5553": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "5555": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5556": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5557": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5558": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "5560": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5561": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5562": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "5563": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4154
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5564": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4154
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5565": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4154
      ],
      "op": "ADD",
      "path": "0"
    },
    "5566": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4175
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "5567": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5568": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4175
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "5569": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4175
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "5570": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4185,
        4216
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 48,
      "value": "0x2"
    },
    "5572": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4185,
        4216
      ],
      "op": "ADD",
      "path": "0"
    },
    "5573": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4185,
        4224
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5574": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4185,
        4224
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5575": {
      "op": "PUSH3",
      "value": "0xFFFF00"
    },
    "5579": {
      "op": "NOT"
    },
    "5580": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4234,
        4269
      ],
      "op": "AND",
      "path": "0",
      "statement": 49
    },
    "5581": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4234,
        4269
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5582": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4234,
        4269
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "5583": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 50
    },
    "5584": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "5585": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5586": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5587": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5588": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4294,
        4310
      ],
      "op": "PUSH7",
      "path": "0",
      "value": "0x38D7EA4C68000"
    },
    "5596": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4294,
        4310
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5597": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5598": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5599": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5600": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "DUP2",
      "path": "0"
    },
    "5601": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4294,
        4310
      ],
      "op": "DUP6",
      "path": "0"
    },
    "5602": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP9",
      "path": "0"
    },
    "5603": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4136,
        4149
      ],
      "op": "DUP4",
      "path": "0"
    },
    "5604": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "CALL",
      "path": "0"
    },
    "5605": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "5606": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "POP",
      "path": "0"
    },
    "5607": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "POP",
      "path": "0"
    },
    "5608": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "POP",
      "path": "0"
    },
    "5609": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "POP",
      "path": "0"
    },
    "5610": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5611": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5612": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "5613": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15FA"
    },
    "5616": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "5617": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "5618": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5620": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "DUP1",
      "path": "0"
    },
    "5621": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "5622": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "5623": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5625": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "REVERT",
      "path": "0"
    },
    "5626": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5627": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4279,
        4311
      ],
      "op": "POP",
      "path": "0"
    },
    "5628": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4336,
        4337
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 51,
      "value": "0x1"
    },
    "5630": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4332
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "5632": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4332
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "5634": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5635": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "DUP3",
      "path": "0"
    },
    "5636": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "5637": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x160E"
    },
    "5640": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5641": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5642": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B0D"
    },
    "5645": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        4321,
        4337
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5646": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "5647": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "5648": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "5649": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        4321,
        4337
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "5650": {
      "op": "POP"
    },
    "5651": {
      "op": "POP"
    },
    "5652": {
      "op": "POP"
    },
    "5653": {
      "op": "POP"
    },
    "5654": {
      "op": "POP"
    },
    "5655": {
      "fn": "Voting.giveRightToVote",
      "jump": "o",
      "offset": [
        3694,
        4344
      ],
      "op": "JUMP",
      "path": "0"
    },
    "5656": {
      "op": "JUMPDEST"
    },
    "5657": {
      "op": "DUP3"
    },
    "5658": {
      "op": "DUP1"
    },
    "5659": {
      "op": "SLOAD"
    },
    "5660": {
      "op": "PUSH2",
      "value": "0x1624"
    },
    "5663": {
      "op": "SWAP1"
    },
    "5664": {
      "op": "PUSH2",
      "value": "0x1C68"
    },
    "5667": {
      "jump": "i",
      "op": "JUMP"
    },
    "5668": {
      "op": "JUMPDEST"
    },
    "5669": {
      "op": "SWAP1"
    },
    "5670": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5672": {
      "op": "MSTORE"
    },
    "5673": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5675": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5677": {
      "op": "KECCAK256"
    },
    "5678": {
      "op": "SWAP1"
    },
    "5679": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5681": {
      "op": "ADD"
    },
    "5682": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5684": {
      "op": "SWAP1"
    },
    "5685": {
      "op": "DIV"
    },
    "5686": {
      "op": "DUP2"
    },
    "5687": {
      "op": "ADD"
    },
    "5688": {
      "op": "SWAP3"
    },
    "5689": {
      "op": "DUP3"
    },
    "5690": {
      "op": "PUSH2",
      "value": "0x1646"
    },
    "5693": {
      "op": "JUMPI"
    },
    "5694": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5696": {
      "op": "DUP6"
    },
    "5697": {
      "op": "SSTORE"
    },
    "5698": {
      "op": "PUSH2",
      "value": "0x168C"
    },
    "5701": {
      "op": "JUMP"
    },
    "5702": {
      "op": "JUMPDEST"
    },
    "5703": {
      "op": "DUP3"
    },
    "5704": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5706": {
      "op": "LT"
    },
    "5707": {
      "op": "PUSH2",
      "value": "0x165F"
    },
    "5710": {
      "op": "JUMPI"
    },
    "5711": {
      "op": "DUP1"
    },
    "5712": {
      "op": "MLOAD"
    },
    "5713": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "5715": {
      "op": "NOT"
    },
    "5716": {
      "op": "AND"
    },
    "5717": {
      "op": "DUP4"
    },
    "5718": {
      "op": "DUP1"
    },
    "5719": {
      "op": "ADD"
    },
    "5720": {
      "op": "OR"
    },
    "5721": {
      "op": "DUP6"
    },
    "5722": {
      "op": "SSTORE"
    },
    "5723": {
      "op": "PUSH2",
      "value": "0x168C"
    },
    "5726": {
      "op": "JUMP"
    },
    "5727": {
      "op": "JUMPDEST"
    },
    "5728": {
      "op": "DUP3"
    },
    "5729": {
      "op": "DUP1"
    },
    "5730": {
      "op": "ADD"
    },
    "5731": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5733": {
      "op": "ADD"
    },
    "5734": {
      "op": "DUP6"
    },
    "5735": {
      "op": "SSTORE"
    },
    "5736": {
      "op": "DUP3"
    },
    "5737": {
      "op": "ISZERO"
    },
    "5738": {
      "op": "PUSH2",
      "value": "0x168C"
    },
    "5741": {
      "op": "JUMPI"
    },
    "5742": {
      "op": "SWAP2"
    },
    "5743": {
      "op": "DUP3"
    },
    "5744": {
      "op": "ADD"
    },
    "5745": {
      "op": "JUMPDEST"
    },
    "5746": {
      "op": "DUP3"
    },
    "5747": {
      "op": "DUP2"
    },
    "5748": {
      "op": "GT"
    },
    "5749": {
      "op": "ISZERO"
    },
    "5750": {
      "op": "PUSH2",
      "value": "0x168C"
    },
    "5753": {
      "op": "JUMPI"
    },
    "5754": {
      "op": "DUP3"
    },
    "5755": {
      "op": "MLOAD"
    },
    "5756": {
      "op": "DUP3"
    },
    "5757": {
      "op": "SSTORE"
    },
    "5758": {
      "op": "SWAP2"
    },
    "5759": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5761": {
      "op": "ADD"
    },
    "5762": {
      "op": "SWAP2"
    },
    "5763": {
      "op": "SWAP1"
    },
    "5764": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5766": {
      "op": "ADD"
    },
    "5767": {
      "op": "SWAP1"
    },
    "5768": {
      "op": "PUSH2",
      "value": "0x1671"
    },
    "5771": {
      "op": "JUMP"
    },
    "5772": {
      "op": "JUMPDEST"
    },
    "5773": {
      "op": "POP"
    },
    "5774": {
      "op": "PUSH2",
      "value": "0x1698"
    },
    "5777": {
      "op": "SWAP3"
    },
    "5778": {
      "op": "SWAP2"
    },
    "5779": {
      "op": "POP"
    },
    "5780": {
      "op": "PUSH2",
      "value": "0x169C"
    },
    "5783": {
      "jump": "i",
      "op": "JUMP"
    },
    "5784": {
      "op": "JUMPDEST"
    },
    "5785": {
      "op": "POP"
    },
    "5786": {
      "op": "SWAP1"
    },
    "5787": {
      "jump": "o",
      "op": "JUMP"
    },
    "5788": {
      "op": "JUMPDEST"
    },
    "5789": {
      "op": "JUMPDEST"
    },
    "5790": {
      "op": "DUP1"
    },
    "5791": {
      "op": "DUP3"
    },
    "5792": {
      "op": "GT"
    },
    "5793": {
      "op": "ISZERO"
    },
    "5794": {
      "op": "PUSH2",
      "value": "0x1698"
    },
    "5797": {
      "op": "JUMPI"
    },
    "5798": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5800": {
      "op": "DUP2"
    },
    "5801": {
      "op": "SSTORE"
    },
    "5802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5804": {
      "op": "ADD"
    },
    "5805": {
      "op": "PUSH2",
      "value": "0x169D"
    },
    "5808": {
      "op": "JUMP"
    },
    "5809": {
      "op": "JUMPDEST"
    },
    "5810": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5812": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5814": {
      "op": "DUP3"
    },
    "5815": {
      "op": "DUP5"
    },
    "5816": {
      "op": "SUB"
    },
    "5817": {
      "op": "SLT"
    },
    "5818": {
      "op": "ISZERO"
    },
    "5819": {
      "op": "PUSH2",
      "value": "0x16C3"
    },
    "5822": {
      "op": "JUMPI"
    },
    "5823": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5825": {
      "op": "DUP1"
    },
    "5826": {
      "op": "REVERT"
    },
    "5827": {
      "op": "JUMPDEST"
    },
    "5828": {
      "op": "POP"
    },
    "5829": {
      "op": "CALLDATALOAD"
    },
    "5830": {
      "op": "SWAP2"
    },
    "5831": {
      "op": "SWAP1"
    },
    "5832": {
      "op": "POP"
    },
    "5833": {
      "jump": "o",
      "op": "JUMP"
    },
    "5834": {
      "op": "JUMPDEST"
    },
    "5835": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5840": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5842": {
      "op": "SHL"
    },
    "5843": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5845": {
      "op": "MSTORE"
    },
    "5846": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "5848": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5850": {
      "op": "MSTORE"
    },
    "5851": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5853": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5855": {
      "op": "REVERT"
    },
    "5856": {
      "op": "JUMPDEST"
    },
    "5857": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5859": {
      "op": "DUP3"
    },
    "5860": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5862": {
      "op": "DUP4"
    },
    "5863": {
      "op": "ADD"
    },
    "5864": {
      "op": "SLT"
    },
    "5865": {
      "op": "PUSH2",
      "value": "0x16F1"
    },
    "5868": {
      "op": "JUMPI"
    },
    "5869": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5871": {
      "op": "DUP1"
    },
    "5872": {
      "op": "REVERT"
    },
    "5873": {
      "op": "JUMPDEST"
    },
    "5874": {
      "op": "DUP2"
    },
    "5875": {
      "op": "CALLDATALOAD"
    },
    "5876": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5885": {
      "op": "DUP1"
    },
    "5886": {
      "op": "DUP3"
    },
    "5887": {
      "op": "GT"
    },
    "5888": {
      "op": "ISZERO"
    },
    "5889": {
      "op": "PUSH2",
      "value": "0x170C"
    },
    "5892": {
      "op": "JUMPI"
    },
    "5893": {
      "op": "PUSH2",
      "value": "0x170C"
    },
    "5896": {
      "op": "PUSH2",
      "value": "0x16CA"
    },
    "5899": {
      "jump": "i",
      "op": "JUMP"
    },
    "5900": {
      "op": "JUMPDEST"
    },
    "5901": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5903": {
      "op": "MLOAD"
    },
    "5904": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5906": {
      "op": "DUP4"
    },
    "5907": {
      "op": "ADD"
    },
    "5908": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5910": {
      "op": "NOT"
    },
    "5911": {
      "op": "SWAP1"
    },
    "5912": {
      "op": "DUP2"
    },
    "5913": {
      "op": "AND"
    },
    "5914": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "5916": {
      "op": "ADD"
    },
    "5917": {
      "op": "AND"
    },
    "5918": {
      "op": "DUP2"
    },
    "5919": {
      "op": "ADD"
    },
    "5920": {
      "op": "SWAP1"
    },
    "5921": {
      "op": "DUP3"
    },
    "5922": {
      "op": "DUP3"
    },
    "5923": {
      "op": "GT"
    },
    "5924": {
      "op": "DUP2"
    },
    "5925": {
      "op": "DUP4"
    },
    "5926": {
      "op": "LT"
    },
    "5927": {
      "op": "OR"
    },
    "5928": {
      "op": "ISZERO"
    },
    "5929": {
      "op": "PUSH2",
      "value": "0x1734"
    },
    "5932": {
      "op": "JUMPI"
    },
    "5933": {
      "op": "PUSH2",
      "value": "0x1734"
    },
    "5936": {
      "op": "PUSH2",
      "value": "0x16CA"
    },
    "5939": {
      "jump": "i",
      "op": "JUMP"
    },
    "5940": {
      "op": "JUMPDEST"
    },
    "5941": {
      "op": "DUP2"
    },
    "5942": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5944": {
      "op": "MSTORE"
    },
    "5945": {
      "op": "DUP4"
    },
    "5946": {
      "op": "DUP2"
    },
    "5947": {
      "op": "MSTORE"
    },
    "5948": {
      "op": "DUP7"
    },
    "5949": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5951": {
      "op": "DUP6"
    },
    "5952": {
      "op": "DUP9"
    },
    "5953": {
      "op": "ADD"
    },
    "5954": {
      "op": "ADD"
    },
    "5955": {
      "op": "GT"
    },
    "5956": {
      "op": "ISZERO"
    },
    "5957": {
      "op": "PUSH2",
      "value": "0x174D"
    },
    "5960": {
      "op": "JUMPI"
    },
    "5961": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5963": {
      "op": "DUP1"
    },
    "5964": {
      "op": "REVERT"
    },
    "5965": {
      "op": "JUMPDEST"
    },
    "5966": {
      "op": "DUP4"
    },
    "5967": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5969": {
      "op": "DUP8"
    },
    "5970": {
      "op": "ADD"
    },
    "5971": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5973": {
      "op": "DUP4"
    },
    "5974": {
      "op": "ADD"
    },
    "5975": {
      "op": "CALLDATACOPY"
    },
    "5976": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5978": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5980": {
      "op": "DUP6"
    },
    "5981": {
      "op": "DUP4"
    },
    "5982": {
      "op": "ADD"
    },
    "5983": {
      "op": "ADD"
    },
    "5984": {
      "op": "MSTORE"
    },
    "5985": {
      "op": "DUP1"
    },
    "5986": {
      "op": "SWAP5"
    },
    "5987": {
      "op": "POP"
    },
    "5988": {
      "op": "POP"
    },
    "5989": {
      "op": "POP"
    },
    "5990": {
      "op": "POP"
    },
    "5991": {
      "op": "POP"
    },
    "5992": {
      "op": "SWAP3"
    },
    "5993": {
      "op": "SWAP2"
    },
    "5994": {
      "op": "POP"
    },
    "5995": {
      "op": "POP"
    },
    "5996": {
      "jump": "o",
      "op": "JUMP"
    },
    "5997": {
      "op": "JUMPDEST"
    },
    "5998": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6000": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6002": {
      "op": "DUP3"
    },
    "6003": {
      "op": "DUP5"
    },
    "6004": {
      "op": "SUB"
    },
    "6005": {
      "op": "SLT"
    },
    "6006": {
      "op": "ISZERO"
    },
    "6007": {
      "op": "PUSH2",
      "value": "0x177F"
    },
    "6010": {
      "op": "JUMPI"
    },
    "6011": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6013": {
      "op": "DUP1"
    },
    "6014": {
      "op": "REVERT"
    },
    "6015": {
      "op": "JUMPDEST"
    },
    "6016": {
      "op": "DUP2"
    },
    "6017": {
      "op": "CALLDATALOAD"
    },
    "6018": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6027": {
      "op": "DUP2"
    },
    "6028": {
      "op": "GT"
    },
    "6029": {
      "op": "ISZERO"
    },
    "6030": {
      "op": "PUSH2",
      "value": "0x1796"
    },
    "6033": {
      "op": "JUMPI"
    },
    "6034": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6036": {
      "op": "DUP1"
    },
    "6037": {
      "op": "REVERT"
    },
    "6038": {
      "op": "JUMPDEST"
    },
    "6039": {
      "op": "PUSH2",
      "value": "0x17A2"
    },
    "6042": {
      "op": "DUP5"
    },
    "6043": {
      "op": "DUP3"
    },
    "6044": {
      "op": "DUP6"
    },
    "6045": {
      "op": "ADD"
    },
    "6046": {
      "op": "PUSH2",
      "value": "0x16E0"
    },
    "6049": {
      "jump": "i",
      "op": "JUMP"
    },
    "6050": {
      "op": "JUMPDEST"
    },
    "6051": {
      "op": "SWAP5"
    },
    "6052": {
      "op": "SWAP4"
    },
    "6053": {
      "op": "POP"
    },
    "6054": {
      "op": "POP"
    },
    "6055": {
      "op": "POP"
    },
    "6056": {
      "op": "POP"
    },
    "6057": {
      "jump": "o",
      "op": "JUMP"
    },
    "6058": {
      "op": "JUMPDEST"
    },
    "6059": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6061": {
      "op": "DUP2"
    },
    "6062": {
      "op": "MLOAD"
    },
    "6063": {
      "op": "DUP1"
    },
    "6064": {
      "op": "DUP5"
    },
    "6065": {
      "op": "MSTORE"
    },
    "6066": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6068": {
      "op": "JUMPDEST"
    },
    "6069": {
      "op": "DUP2"
    },
    "6070": {
      "op": "DUP2"
    },
    "6071": {
      "op": "LT"
    },
    "6072": {
      "op": "ISZERO"
    },
    "6073": {
      "op": "PUSH2",
      "value": "0x17D0"
    },
    "6076": {
      "op": "JUMPI"
    },
    "6077": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6079": {
      "op": "DUP2"
    },
    "6080": {
      "op": "DUP6"
    },
    "6081": {
      "op": "ADD"
    },
    "6082": {
      "op": "DUP2"
    },
    "6083": {
      "op": "ADD"
    },
    "6084": {
      "op": "MLOAD"
    },
    "6085": {
      "op": "DUP7"
    },
    "6086": {
      "op": "DUP4"
    },
    "6087": {
      "op": "ADD"
    },
    "6088": {
      "op": "DUP3"
    },
    "6089": {
      "op": "ADD"
    },
    "6090": {
      "op": "MSTORE"
    },
    "6091": {
      "op": "ADD"
    },
    "6092": {
      "op": "PUSH2",
      "value": "0x17B4"
    },
    "6095": {
      "op": "JUMP"
    },
    "6096": {
      "op": "JUMPDEST"
    },
    "6097": {
      "op": "DUP2"
    },
    "6098": {
      "op": "DUP2"
    },
    "6099": {
      "op": "GT"
    },
    "6100": {
      "op": "ISZERO"
    },
    "6101": {
      "op": "PUSH2",
      "value": "0x17E2"
    },
    "6104": {
      "op": "JUMPI"
    },
    "6105": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6107": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6109": {
      "op": "DUP4"
    },
    "6110": {
      "op": "DUP8"
    },
    "6111": {
      "op": "ADD"
    },
    "6112": {
      "op": "ADD"
    },
    "6113": {
      "op": "MSTORE"
    },
    "6114": {
      "op": "JUMPDEST"
    },
    "6115": {
      "op": "POP"
    },
    "6116": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6118": {
      "op": "ADD"
    },
    "6119": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6121": {
      "op": "NOT"
    },
    "6122": {
      "op": "AND"
    },
    "6123": {
      "op": "SWAP3"
    },
    "6124": {
      "op": "SWAP1"
    },
    "6125": {
      "op": "SWAP3"
    },
    "6126": {
      "op": "ADD"
    },
    "6127": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6129": {
      "op": "ADD"
    },
    "6130": {
      "op": "SWAP3"
    },
    "6131": {
      "op": "SWAP2"
    },
    "6132": {
      "op": "POP"
    },
    "6133": {
      "op": "POP"
    },
    "6134": {
      "jump": "o",
      "op": "JUMP"
    },
    "6135": {
      "op": "JUMPDEST"
    },
    "6136": {
      "op": "DUP6"
    },
    "6137": {
      "op": "DUP2"
    },
    "6138": {
      "op": "MSTORE"
    },
    "6139": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6141": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6143": {
      "op": "DUP3"
    },
    "6144": {
      "op": "ADD"
    },
    "6145": {
      "op": "MSTORE"
    },
    "6146": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6148": {
      "op": "PUSH2",
      "value": "0x1810"
    },
    "6151": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6153": {
      "op": "DUP4"
    },
    "6154": {
      "op": "ADD"
    },
    "6155": {
      "op": "DUP8"
    },
    "6156": {
      "op": "PUSH2",
      "value": "0x17AA"
    },
    "6159": {
      "jump": "i",
      "op": "JUMP"
    },
    "6160": {
      "op": "JUMPDEST"
    },
    "6161": {
      "op": "DUP3"
    },
    "6162": {
      "op": "DUP2"
    },
    "6163": {
      "op": "SUB"
    },
    "6164": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6166": {
      "op": "DUP5"
    },
    "6167": {
      "op": "ADD"
    },
    "6168": {
      "op": "MSTORE"
    },
    "6169": {
      "op": "PUSH2",
      "value": "0x1822"
    },
    "6172": {
      "op": "DUP2"
    },
    "6173": {
      "op": "DUP8"
    },
    "6174": {
      "op": "PUSH2",
      "value": "0x17AA"
    },
    "6177": {
      "jump": "i",
      "op": "JUMP"
    },
    "6178": {
      "op": "JUMPDEST"
    },
    "6179": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6181": {
      "op": "DUP5"
    },
    "6182": {
      "op": "ADD"
    },
    "6183": {
      "op": "SWAP6"
    },
    "6184": {
      "op": "SWAP1"
    },
    "6185": {
      "op": "SWAP6"
    },
    "6186": {
      "op": "MSTORE"
    },
    "6187": {
      "op": "POP"
    },
    "6188": {
      "op": "POP"
    },
    "6189": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6191": {
      "op": "ADD"
    },
    "6192": {
      "op": "MSTORE"
    },
    "6193": {
      "op": "SWAP4"
    },
    "6194": {
      "op": "SWAP3"
    },
    "6195": {
      "op": "POP"
    },
    "6196": {
      "op": "POP"
    },
    "6197": {
      "op": "POP"
    },
    "6198": {
      "jump": "o",
      "op": "JUMP"
    },
    "6199": {
      "op": "JUMPDEST"
    },
    "6200": {
      "op": "DUP1"
    },
    "6201": {
      "op": "MLOAD"
    },
    "6202": {
      "op": "DUP3"
    },
    "6203": {
      "op": "MSTORE"
    },
    "6204": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6206": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6208": {
      "op": "DUP3"
    },
    "6209": {
      "op": "ADD"
    },
    "6210": {
      "op": "MLOAD"
    },
    "6211": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6213": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6215": {
      "op": "DUP6"
    },
    "6216": {
      "op": "ADD"
    },
    "6217": {
      "op": "MSTORE"
    },
    "6218": {
      "op": "PUSH2",
      "value": "0x1856"
    },
    "6221": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6223": {
      "op": "DUP6"
    },
    "6224": {
      "op": "ADD"
    },
    "6225": {
      "op": "DUP3"
    },
    "6226": {
      "op": "PUSH2",
      "value": "0x17AA"
    },
    "6229": {
      "jump": "i",
      "op": "JUMP"
    },
    "6230": {
      "op": "JUMPDEST"
    },
    "6231": {
      "op": "SWAP1"
    },
    "6232": {
      "op": "POP"
    },
    "6233": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6235": {
      "op": "DUP4"
    },
    "6236": {
      "op": "ADD"
    },
    "6237": {
      "op": "MLOAD"
    },
    "6238": {
      "op": "DUP5"
    },
    "6239": {
      "op": "DUP3"
    },
    "6240": {
      "op": "SUB"
    },
    "6241": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6243": {
      "op": "DUP7"
    },
    "6244": {
      "op": "ADD"
    },
    "6245": {
      "op": "MSTORE"
    },
    "6246": {
      "op": "PUSH2",
      "value": "0x186F"
    },
    "6249": {
      "op": "DUP3"
    },
    "6250": {
      "op": "DUP3"
    },
    "6251": {
      "op": "PUSH2",
      "value": "0x17AA"
    },
    "6254": {
      "jump": "i",
      "op": "JUMP"
    },
    "6255": {
      "op": "JUMPDEST"
    },
    "6256": {
      "op": "SWAP2"
    },
    "6257": {
      "op": "POP"
    },
    "6258": {
      "op": "POP"
    },
    "6259": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6261": {
      "op": "DUP4"
    },
    "6262": {
      "op": "ADD"
    },
    "6263": {
      "op": "MLOAD"
    },
    "6264": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6266": {
      "op": "DUP6"
    },
    "6267": {
      "op": "ADD"
    },
    "6268": {
      "op": "MSTORE"
    },
    "6269": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6271": {
      "op": "DUP4"
    },
    "6272": {
      "op": "ADD"
    },
    "6273": {
      "op": "MLOAD"
    },
    "6274": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6276": {
      "op": "DUP6"
    },
    "6277": {
      "op": "ADD"
    },
    "6278": {
      "op": "MSTORE"
    },
    "6279": {
      "op": "DUP1"
    },
    "6280": {
      "op": "SWAP2"
    },
    "6281": {
      "op": "POP"
    },
    "6282": {
      "op": "POP"
    },
    "6283": {
      "op": "SWAP3"
    },
    "6284": {
      "op": "SWAP2"
    },
    "6285": {
      "op": "POP"
    },
    "6286": {
      "op": "POP"
    },
    "6287": {
      "jump": "o",
      "op": "JUMP"
    },
    "6288": {
      "op": "JUMPDEST"
    },
    "6289": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6291": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6293": {
      "op": "DUP1"
    },
    "6294": {
      "op": "DUP4"
    },
    "6295": {
      "op": "ADD"
    },
    "6296": {
      "op": "DUP2"
    },
    "6297": {
      "op": "DUP5"
    },
    "6298": {
      "op": "MSTORE"
    },
    "6299": {
      "op": "DUP1"
    },
    "6300": {
      "op": "DUP6"
    },
    "6301": {
      "op": "MLOAD"
    },
    "6302": {
      "op": "DUP1"
    },
    "6303": {
      "op": "DUP4"
    },
    "6304": {
      "op": "MSTORE"
    },
    "6305": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6307": {
      "op": "DUP7"
    },
    "6308": {
      "op": "ADD"
    },
    "6309": {
      "op": "SWAP2"
    },
    "6310": {
      "op": "POP"
    },
    "6311": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6313": {
      "op": "DUP2"
    },
    "6314": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6316": {
      "op": "SHL"
    },
    "6317": {
      "op": "DUP8"
    },
    "6318": {
      "op": "ADD"
    },
    "6319": {
      "op": "ADD"
    },
    "6320": {
      "op": "SWAP3"
    },
    "6321": {
      "op": "POP"
    },
    "6322": {
      "op": "DUP4"
    },
    "6323": {
      "op": "DUP8"
    },
    "6324": {
      "op": "ADD"
    },
    "6325": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6327": {
      "op": "JUMPDEST"
    },
    "6328": {
      "op": "DUP3"
    },
    "6329": {
      "op": "DUP2"
    },
    "6330": {
      "op": "LT"
    },
    "6331": {
      "op": "ISZERO"
    },
    "6332": {
      "op": "PUSH2",
      "value": "0x18E5"
    },
    "6335": {
      "op": "JUMPI"
    },
    "6336": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "6338": {
      "op": "NOT"
    },
    "6339": {
      "op": "DUP9"
    },
    "6340": {
      "op": "DUP7"
    },
    "6341": {
      "op": "SUB"
    },
    "6342": {
      "op": "ADD"
    },
    "6343": {
      "op": "DUP5"
    },
    "6344": {
      "op": "MSTORE"
    },
    "6345": {
      "op": "PUSH2",
      "value": "0x18D3"
    },
    "6348": {
      "op": "DUP6"
    },
    "6349": {
      "op": "DUP4"
    },
    "6350": {
      "op": "MLOAD"
    },
    "6351": {
      "op": "PUSH2",
      "value": "0x1837"
    },
    "6354": {
      "jump": "i",
      "op": "JUMP"
    },
    "6355": {
      "op": "JUMPDEST"
    },
    "6356": {
      "op": "SWAP5"
    },
    "6357": {
      "op": "POP"
    },
    "6358": {
      "op": "SWAP3"
    },
    "6359": {
      "op": "DUP6"
    },
    "6360": {
      "op": "ADD"
    },
    "6361": {
      "op": "SWAP3"
    },
    "6362": {
      "op": "SWAP1"
    },
    "6363": {
      "op": "DUP6"
    },
    "6364": {
      "op": "ADD"
    },
    "6365": {
      "op": "SWAP1"
    },
    "6366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6368": {
      "op": "ADD"
    },
    "6369": {
      "op": "PUSH2",
      "value": "0x18B7"
    },
    "6372": {
      "op": "JUMP"
    },
    "6373": {
      "op": "JUMPDEST"
    },
    "6374": {
      "op": "POP"
    },
    "6375": {
      "op": "SWAP3"
    },
    "6376": {
      "op": "SWAP8"
    },
    "6377": {
      "op": "SWAP7"
    },
    "6378": {
      "op": "POP"
    },
    "6379": {
      "op": "POP"
    },
    "6380": {
      "op": "POP"
    },
    "6381": {
      "op": "POP"
    },
    "6382": {
      "op": "POP"
    },
    "6383": {
      "op": "POP"
    },
    "6384": {
      "op": "POP"
    },
    "6385": {
      "jump": "o",
      "op": "JUMP"
    },
    "6386": {
      "op": "JUMPDEST"
    },
    "6387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6391": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6393": {
      "op": "SHL"
    },
    "6394": {
      "op": "SUB"
    },
    "6395": {
      "op": "DUP2"
    },
    "6396": {
      "op": "AND"
    },
    "6397": {
      "op": "DUP2"
    },
    "6398": {
      "op": "EQ"
    },
    "6399": {
      "op": "PUSH2",
      "value": "0x1907"
    },
    "6402": {
      "op": "JUMPI"
    },
    "6403": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6405": {
      "op": "DUP1"
    },
    "6406": {
      "op": "REVERT"
    },
    "6407": {
      "op": "JUMPDEST"
    },
    "6408": {
      "op": "POP"
    },
    "6409": {
      "jump": "o",
      "op": "JUMP"
    },
    "6410": {
      "op": "JUMPDEST"
    },
    "6411": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6413": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6415": {
      "op": "DUP3"
    },
    "6416": {
      "op": "DUP5"
    },
    "6417": {
      "op": "SUB"
    },
    "6418": {
      "op": "SLT"
    },
    "6419": {
      "op": "ISZERO"
    },
    "6420": {
      "op": "PUSH2",
      "value": "0x191C"
    },
    "6423": {
      "op": "JUMPI"
    },
    "6424": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6426": {
      "op": "DUP1"
    },
    "6427": {
      "op": "REVERT"
    },
    "6428": {
      "op": "JUMPDEST"
    },
    "6429": {
      "op": "DUP2"
    },
    "6430": {
      "op": "CALLDATALOAD"
    },
    "6431": {
      "op": "PUSH2",
      "value": "0x1927"
    },
    "6434": {
      "op": "DUP2"
    },
    "6435": {
      "op": "PUSH2",
      "value": "0x18F2"
    },
    "6438": {
      "jump": "i",
      "op": "JUMP"
    },
    "6439": {
      "op": "JUMPDEST"
    },
    "6440": {
      "op": "SWAP4"
    },
    "6441": {
      "op": "SWAP3"
    },
    "6442": {
      "op": "POP"
    },
    "6443": {
      "op": "POP"
    },
    "6444": {
      "op": "POP"
    },
    "6445": {
      "jump": "o",
      "op": "JUMP"
    },
    "6446": {
      "op": "JUMPDEST"
    },
    "6447": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6449": {
      "op": "DUP2"
    },
    "6450": {
      "op": "MSTORE"
    },
    "6451": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6453": {
      "op": "PUSH2",
      "value": "0x1941"
    },
    "6456": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6458": {
      "op": "DUP4"
    },
    "6459": {
      "op": "ADD"
    },
    "6460": {
      "op": "DUP6"
    },
    "6461": {
      "op": "PUSH2",
      "value": "0x17AA"
    },
    "6464": {
      "jump": "i",
      "op": "JUMP"
    },
    "6465": {
      "op": "JUMPDEST"
    },
    "6466": {
      "op": "SWAP1"
    },
    "6467": {
      "op": "POP"
    },
    "6468": {
      "op": "DUP3"
    },
    "6469": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6471": {
      "op": "DUP4"
    },
    "6472": {
      "op": "ADD"
    },
    "6473": {
      "op": "MSTORE"
    },
    "6474": {
      "op": "SWAP4"
    },
    "6475": {
      "op": "SWAP3"
    },
    "6476": {
      "op": "POP"
    },
    "6477": {
      "op": "POP"
    },
    "6478": {
      "op": "POP"
    },
    "6479": {
      "jump": "o",
      "op": "JUMP"
    },
    "6480": {
      "op": "JUMPDEST"
    },
    "6481": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6486": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6488": {
      "op": "SHL"
    },
    "6489": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6491": {
      "op": "MSTORE"
    },
    "6492": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "6494": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6496": {
      "op": "MSTORE"
    },
    "6497": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6499": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6501": {
      "op": "REVERT"
    },
    "6502": {
      "op": "JUMPDEST"
    },
    "6503": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6505": {
      "op": "DUP2"
    },
    "6506": {
      "op": "ADD"
    },
    "6507": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "6509": {
      "op": "DUP4"
    },
    "6510": {
      "op": "LT"
    },
    "6511": {
      "op": "PUSH2",
      "value": "0x1988"
    },
    "6514": {
      "op": "JUMPI"
    },
    "6515": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6520": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6522": {
      "op": "SHL"
    },
    "6523": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6525": {
      "op": "MSTORE"
    },
    "6526": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "6528": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6530": {
      "op": "MSTORE"
    },
    "6531": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6533": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6535": {
      "op": "REVERT"
    },
    "6536": {
      "op": "JUMPDEST"
    },
    "6537": {
      "op": "SWAP2"
    },
    "6538": {
      "op": "SWAP1"
    },
    "6539": {
      "op": "MSTORE"
    },
    "6540": {
      "op": "SWAP1"
    },
    "6541": {
      "jump": "o",
      "op": "JUMP"
    },
    "6542": {
      "op": "JUMPDEST"
    },
    "6543": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6545": {
      "op": "DUP2"
    },
    "6546": {
      "op": "MSTORE"
    },
    "6547": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6549": {
      "op": "PUSH2",
      "value": "0x19A1"
    },
    "6552": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6554": {
      "op": "DUP4"
    },
    "6555": {
      "op": "ADD"
    },
    "6556": {
      "op": "DUP9"
    },
    "6557": {
      "op": "PUSH2",
      "value": "0x17AA"
    },
    "6560": {
      "jump": "i",
      "op": "JUMP"
    },
    "6561": {
      "op": "JUMPDEST"
    },
    "6562": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6564": {
      "op": "DUP4"
    },
    "6565": {
      "op": "ADD"
    },
    "6566": {
      "op": "SWAP7"
    },
    "6567": {
      "op": "SWAP1"
    },
    "6568": {
      "op": "SWAP7"
    },
    "6569": {
      "op": "MSTORE"
    },
    "6570": {
      "op": "POP"
    },
    "6571": {
      "op": "SWAP3"
    },
    "6572": {
      "op": "ISZERO"
    },
    "6573": {
      "op": "ISZERO"
    },
    "6574": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6576": {
      "op": "DUP5"
    },
    "6577": {
      "op": "ADD"
    },
    "6578": {
      "op": "MSTORE"
    },
    "6579": {
      "op": "SWAP1"
    },
    "6580": {
      "op": "ISZERO"
    },
    "6581": {
      "op": "ISZERO"
    },
    "6582": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6584": {
      "op": "DUP4"
    },
    "6585": {
      "op": "ADD"
    },
    "6586": {
      "op": "MSTORE"
    },
    "6587": {
      "op": "ISZERO"
    },
    "6588": {
      "op": "ISZERO"
    },
    "6589": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6591": {
      "op": "SWAP1"
    },
    "6592": {
      "op": "SWAP2"
    },
    "6593": {
      "op": "ADD"
    },
    "6594": {
      "op": "MSTORE"
    },
    "6595": {
      "op": "SWAP2"
    },
    "6596": {
      "op": "SWAP1"
    },
    "6597": {
      "op": "POP"
    },
    "6598": {
      "jump": "o",
      "op": "JUMP"
    },
    "6599": {
      "op": "JUMPDEST"
    },
    "6600": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6602": {
      "op": "DUP2"
    },
    "6603": {
      "op": "MLOAD"
    },
    "6604": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6606": {
      "op": "DUP5"
    },
    "6607": {
      "op": "MSTORE"
    },
    "6608": {
      "op": "PUSH2",
      "value": "0x19DC"
    },
    "6611": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6613": {
      "op": "DUP6"
    },
    "6614": {
      "op": "ADD"
    },
    "6615": {
      "op": "DUP3"
    },
    "6616": {
      "op": "PUSH2",
      "value": "0x17AA"
    },
    "6619": {
      "jump": "i",
      "op": "JUMP"
    },
    "6620": {
      "op": "JUMPDEST"
    },
    "6621": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6623": {
      "op": "SWAP4"
    },
    "6624": {
      "op": "DUP5"
    },
    "6625": {
      "op": "ADD"
    },
    "6626": {
      "op": "MLOAD"
    },
    "6627": {
      "op": "SWAP5"
    },
    "6628": {
      "op": "SWAP1"
    },
    "6629": {
      "op": "SWAP4"
    },
    "6630": {
      "op": "ADD"
    },
    "6631": {
      "op": "SWAP4"
    },
    "6632": {
      "op": "SWAP1"
    },
    "6633": {
      "op": "SWAP4"
    },
    "6634": {
      "op": "MSTORE"
    },
    "6635": {
      "op": "POP"
    },
    "6636": {
      "op": "SWAP2"
    },
    "6637": {
      "op": "SWAP1"
    },
    "6638": {
      "op": "POP"
    },
    "6639": {
      "jump": "o",
      "op": "JUMP"
    },
    "6640": {
      "op": "JUMPDEST"
    },
    "6641": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6643": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6645": {
      "op": "DUP1"
    },
    "6646": {
      "op": "DUP4"
    },
    "6647": {
      "op": "ADD"
    },
    "6648": {
      "op": "DUP2"
    },
    "6649": {
      "op": "DUP5"
    },
    "6650": {
      "op": "MSTORE"
    },
    "6651": {
      "op": "DUP1"
    },
    "6652": {
      "op": "DUP6"
    },
    "6653": {
      "op": "MLOAD"
    },
    "6654": {
      "op": "DUP1"
    },
    "6655": {
      "op": "DUP4"
    },
    "6656": {
      "op": "MSTORE"
    },
    "6657": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6659": {
      "op": "DUP7"
    },
    "6660": {
      "op": "ADD"
    },
    "6661": {
      "op": "SWAP2"
    },
    "6662": {
      "op": "POP"
    },
    "6663": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6665": {
      "op": "DUP2"
    },
    "6666": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6668": {
      "op": "SHL"
    },
    "6669": {
      "op": "DUP8"
    },
    "6670": {
      "op": "ADD"
    },
    "6671": {
      "op": "ADD"
    },
    "6672": {
      "op": "SWAP3"
    },
    "6673": {
      "op": "POP"
    },
    "6674": {
      "op": "DUP4"
    },
    "6675": {
      "op": "DUP8"
    },
    "6676": {
      "op": "ADD"
    },
    "6677": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6679": {
      "op": "JUMPDEST"
    },
    "6680": {
      "op": "DUP3"
    },
    "6681": {
      "op": "DUP2"
    },
    "6682": {
      "op": "LT"
    },
    "6683": {
      "op": "ISZERO"
    },
    "6684": {
      "op": "PUSH2",
      "value": "0x18E5"
    },
    "6687": {
      "op": "JUMPI"
    },
    "6688": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "6690": {
      "op": "NOT"
    },
    "6691": {
      "op": "DUP9"
    },
    "6692": {
      "op": "DUP7"
    },
    "6693": {
      "op": "SUB"
    },
    "6694": {
      "op": "ADD"
    },
    "6695": {
      "op": "DUP5"
    },
    "6696": {
      "op": "MSTORE"
    },
    "6697": {
      "op": "PUSH2",
      "value": "0x1A33"
    },
    "6700": {
      "op": "DUP6"
    },
    "6701": {
      "op": "DUP4"
    },
    "6702": {
      "op": "MLOAD"
    },
    "6703": {
      "op": "PUSH2",
      "value": "0x19C7"
    },
    "6706": {
      "jump": "i",
      "op": "JUMP"
    },
    "6707": {
      "op": "JUMPDEST"
    },
    "6708": {
      "op": "SWAP5"
    },
    "6709": {
      "op": "POP"
    },
    "6710": {
      "op": "SWAP3"
    },
    "6711": {
      "op": "DUP6"
    },
    "6712": {
      "op": "ADD"
    },
    "6713": {
      "op": "SWAP3"
    },
    "6714": {
      "op": "SWAP1"
    },
    "6715": {
      "op": "DUP6"
    },
    "6716": {
      "op": "ADD"
    },
    "6717": {
      "op": "SWAP1"
    },
    "6718": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6720": {
      "op": "ADD"
    },
    "6721": {
      "op": "PUSH2",
      "value": "0x1A17"
    },
    "6724": {
      "op": "JUMP"
    },
    "6725": {
      "op": "JUMPDEST"
    },
    "6726": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6728": {
      "op": "DUP2"
    },
    "6729": {
      "op": "MSTORE"
    },
    "6730": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6732": {
      "op": "PUSH2",
      "value": "0x1927"
    },
    "6735": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6737": {
      "op": "DUP4"
    },
    "6738": {
      "op": "ADD"
    },
    "6739": {
      "op": "DUP5"
    },
    "6740": {
      "op": "PUSH2",
      "value": "0x19C7"
    },
    "6743": {
      "jump": "i",
      "op": "JUMP"
    },
    "6744": {
      "op": "JUMPDEST"
    },
    "6745": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6747": {
      "op": "DUP2"
    },
    "6748": {
      "op": "MSTORE"
    },
    "6749": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6751": {
      "op": "PUSH2",
      "value": "0x1927"
    },
    "6754": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6756": {
      "op": "DUP4"
    },
    "6757": {
      "op": "ADD"
    },
    "6758": {
      "op": "DUP5"
    },
    "6759": {
      "op": "PUSH2",
      "value": "0x1837"
    },
    "6762": {
      "jump": "i",
      "op": "JUMP"
    },
    "6763": {
      "op": "JUMPDEST"
    },
    "6764": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6766": {
      "op": "DUP1"
    },
    "6767": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6769": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6771": {
      "op": "DUP5"
    },
    "6772": {
      "op": "DUP7"
    },
    "6773": {
      "op": "SUB"
    },
    "6774": {
      "op": "SLT"
    },
    "6775": {
      "op": "ISZERO"
    },
    "6776": {
      "op": "PUSH2",
      "value": "0x1A80"
    },
    "6779": {
      "op": "JUMPI"
    },
    "6780": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6782": {
      "op": "DUP1"
    },
    "6783": {
      "op": "REVERT"
    },
    "6784": {
      "op": "JUMPDEST"
    },
    "6785": {
      "op": "DUP4"
    },
    "6786": {
      "op": "CALLDATALOAD"
    },
    "6787": {
      "op": "PUSH2",
      "value": "0x1A8B"
    },
    "6790": {
      "op": "DUP2"
    },
    "6791": {
      "op": "PUSH2",
      "value": "0x18F2"
    },
    "6794": {
      "jump": "i",
      "op": "JUMP"
    },
    "6795": {
      "op": "JUMPDEST"
    },
    "6796": {
      "op": "SWAP3"
    },
    "6797": {
      "op": "POP"
    },
    "6798": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6800": {
      "op": "DUP5"
    },
    "6801": {
      "op": "ADD"
    },
    "6802": {
      "op": "CALLDATALOAD"
    },
    "6803": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6812": {
      "op": "DUP1"
    },
    "6813": {
      "op": "DUP3"
    },
    "6814": {
      "op": "GT"
    },
    "6815": {
      "op": "ISZERO"
    },
    "6816": {
      "op": "PUSH2",
      "value": "0x1AA8"
    },
    "6819": {
      "op": "JUMPI"
    },
    "6820": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6822": {
      "op": "DUP1"
    },
    "6823": {
      "op": "REVERT"
    },
    "6824": {
      "op": "JUMPDEST"
    },
    "6825": {
      "op": "PUSH2",
      "value": "0x1AB4"
    },
    "6828": {
      "op": "DUP8"
    },
    "6829": {
      "op": "DUP4"
    },
    "6830": {
      "op": "DUP9"
    },
    "6831": {
      "op": "ADD"
    },
    "6832": {
      "op": "PUSH2",
      "value": "0x16E0"
    },
    "6835": {
      "jump": "i",
      "op": "JUMP"
    },
    "6836": {
      "op": "JUMPDEST"
    },
    "6837": {
      "op": "SWAP4"
    },
    "6838": {
      "op": "POP"
    },
    "6839": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6841": {
      "op": "DUP7"
    },
    "6842": {
      "op": "ADD"
    },
    "6843": {
      "op": "CALLDATALOAD"
    },
    "6844": {
      "op": "SWAP2"
    },
    "6845": {
      "op": "POP"
    },
    "6846": {
      "op": "DUP1"
    },
    "6847": {
      "op": "DUP3"
    },
    "6848": {
      "op": "GT"
    },
    "6849": {
      "op": "ISZERO"
    },
    "6850": {
      "op": "PUSH2",
      "value": "0x1ACA"
    },
    "6853": {
      "op": "JUMPI"
    },
    "6854": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6856": {
      "op": "DUP1"
    },
    "6857": {
      "op": "REVERT"
    },
    "6858": {
      "op": "JUMPDEST"
    },
    "6859": {
      "op": "POP"
    },
    "6860": {
      "op": "PUSH2",
      "value": "0x1AD7"
    },
    "6863": {
      "op": "DUP7"
    },
    "6864": {
      "op": "DUP3"
    },
    "6865": {
      "op": "DUP8"
    },
    "6866": {
      "op": "ADD"
    },
    "6867": {
      "op": "PUSH2",
      "value": "0x16E0"
    },
    "6870": {
      "jump": "i",
      "op": "JUMP"
    },
    "6871": {
      "op": "JUMPDEST"
    },
    "6872": {
      "op": "SWAP2"
    },
    "6873": {
      "op": "POP"
    },
    "6874": {
      "op": "POP"
    },
    "6875": {
      "op": "SWAP3"
    },
    "6876": {
      "op": "POP"
    },
    "6877": {
      "op": "SWAP3"
    },
    "6878": {
      "op": "POP"
    },
    "6879": {
      "op": "SWAP3"
    },
    "6880": {
      "jump": "o",
      "op": "JUMP"
    },
    "6881": {
      "op": "JUMPDEST"
    },
    "6882": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6887": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6889": {
      "op": "SHL"
    },
    "6890": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6892": {
      "op": "MSTORE"
    },
    "6893": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "6895": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6897": {
      "op": "MSTORE"
    },
    "6898": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6900": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6902": {
      "op": "REVERT"
    },
    "6903": {
      "op": "JUMPDEST"
    },
    "6904": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6909": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6911": {
      "op": "SHL"
    },
    "6912": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6914": {
      "op": "MSTORE"
    },
    "6915": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "6917": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6919": {
      "op": "MSTORE"
    },
    "6920": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6922": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6924": {
      "op": "REVERT"
    },
    "6925": {
      "op": "JUMPDEST"
    },
    "6926": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6928": {
      "op": "DUP3"
    },
    "6929": {
      "op": "NOT"
    },
    "6930": {
      "op": "DUP3"
    },
    "6931": {
      "op": "GT"
    },
    "6932": {
      "op": "ISZERO"
    },
    "6933": {
      "op": "PUSH2",
      "value": "0x1B20"
    },
    "6936": {
      "op": "JUMPI"
    },
    "6937": {
      "op": "PUSH2",
      "value": "0x1B20"
    },
    "6940": {
      "op": "PUSH2",
      "value": "0x1AF7"
    },
    "6943": {
      "jump": "i",
      "op": "JUMP"
    },
    "6944": {
      "op": "JUMPDEST"
    },
    "6945": {
      "op": "POP"
    },
    "6946": {
      "op": "ADD"
    },
    "6947": {
      "op": "SWAP1"
    },
    "6948": {
      "jump": "o",
      "op": "JUMP"
    },
    "6949": {
      "op": "JUMPDEST"
    },
    "6950": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6952": {
      "op": "DUP3"
    },
    "6953": {
      "op": "DUP3"
    },
    "6954": {
      "op": "LT"
    },
    "6955": {
      "op": "ISZERO"
    },
    "6956": {
      "op": "PUSH2",
      "value": "0x1B37"
    },
    "6959": {
      "op": "JUMPI"
    },
    "6960": {
      "op": "PUSH2",
      "value": "0x1B37"
    },
    "6963": {
      "op": "PUSH2",
      "value": "0x1AF7"
    },
    "6966": {
      "jump": "i",
      "op": "JUMP"
    },
    "6967": {
      "op": "JUMPDEST"
    },
    "6968": {
      "op": "POP"
    },
    "6969": {
      "op": "SUB"
    },
    "6970": {
      "op": "SWAP1"
    },
    "6971": {
      "jump": "o",
      "op": "JUMP"
    },
    "6972": {
      "op": "JUMPDEST"
    },
    "6973": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6975": {
      "op": "DUP2"
    },
    "6976": {
      "op": "DUP2"
    },
    "6977": {
      "op": "JUMPDEST"
    },
    "6978": {
      "op": "DUP1"
    },
    "6979": {
      "op": "DUP6"
    },
    "6980": {
      "op": "GT"
    },
    "6981": {
      "op": "ISZERO"
    },
    "6982": {
      "op": "PUSH2",
      "value": "0x1B77"
    },
    "6985": {
      "op": "JUMPI"
    },
    "6986": {
      "op": "DUP2"
    },
    "6987": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6989": {
      "op": "NOT"
    },
    "6990": {
      "op": "DIV"
    },
    "6991": {
      "op": "DUP3"
    },
    "6992": {
      "op": "GT"
    },
    "6993": {
      "op": "ISZERO"
    },
    "6994": {
      "op": "PUSH2",
      "value": "0x1B5D"
    },
    "6997": {
      "op": "JUMPI"
    },
    "6998": {
      "op": "PUSH2",
      "value": "0x1B5D"
    },
    "7001": {
      "op": "PUSH2",
      "value": "0x1AF7"
    },
    "7004": {
      "jump": "i",
      "op": "JUMP"
    },
    "7005": {
      "op": "JUMPDEST"
    },
    "7006": {
      "op": "DUP1"
    },
    "7007": {
      "op": "DUP6"
    },
    "7008": {
      "op": "AND"
    },
    "7009": {
      "op": "ISZERO"
    },
    "7010": {
      "op": "PUSH2",
      "value": "0x1B6A"
    },
    "7013": {
      "op": "JUMPI"
    },
    "7014": {
      "op": "SWAP2"
    },
    "7015": {
      "op": "DUP2"
    },
    "7016": {
      "op": "MUL"
    },
    "7017": {
      "op": "SWAP2"
    },
    "7018": {
      "op": "JUMPDEST"
    },
    "7019": {
      "op": "SWAP4"
    },
    "7020": {
      "op": "DUP5"
    },
    "7021": {
      "op": "SHR"
    },
    "7022": {
      "op": "SWAP4"
    },
    "7023": {
      "op": "SWAP1"
    },
    "7024": {
      "op": "DUP1"
    },
    "7025": {
      "op": "MUL"
    },
    "7026": {
      "op": "SWAP1"
    },
    "7027": {
      "op": "PUSH2",
      "value": "0x1B41"
    },
    "7030": {
      "op": "JUMP"
    },
    "7031": {
      "op": "JUMPDEST"
    },
    "7032": {
      "op": "POP"
    },
    "7033": {
      "op": "SWAP3"
    },
    "7034": {
      "op": "POP"
    },
    "7035": {
      "op": "SWAP3"
    },
    "7036": {
      "op": "SWAP1"
    },
    "7037": {
      "op": "POP"
    },
    "7038": {
      "jump": "o",
      "op": "JUMP"
    },
    "7039": {
      "op": "JUMPDEST"
    },
    "7040": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7042": {
      "op": "DUP3"
    },
    "7043": {
      "op": "PUSH2",
      "value": "0x1B8E"
    },
    "7046": {
      "op": "JUMPI"
    },
    "7047": {
      "op": "POP"
    },
    "7048": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7050": {
      "op": "PUSH2",
      "value": "0x1C1C"
    },
    "7053": {
      "op": "JUMP"
    },
    "7054": {
      "op": "JUMPDEST"
    },
    "7055": {
      "op": "DUP2"
    },
    "7056": {
      "op": "PUSH2",
      "value": "0x1B9B"
    },
    "7059": {
      "op": "JUMPI"
    },
    "7060": {
      "op": "POP"
    },
    "7061": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7063": {
      "op": "PUSH2",
      "value": "0x1C1C"
    },
    "7066": {
      "op": "JUMP"
    },
    "7067": {
      "op": "JUMPDEST"
    },
    "7068": {
      "op": "DUP2"
    },
    "7069": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7071": {
      "op": "DUP2"
    },
    "7072": {
      "op": "EQ"
    },
    "7073": {
      "op": "PUSH2",
      "value": "0x1BB1"
    },
    "7076": {
      "op": "JUMPI"
    },
    "7077": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "7079": {
      "op": "DUP2"
    },
    "7080": {
      "op": "EQ"
    },
    "7081": {
      "op": "PUSH2",
      "value": "0x1BBB"
    },
    "7084": {
      "op": "JUMPI"
    },
    "7085": {
      "op": "PUSH2",
      "value": "0x1BD7"
    },
    "7088": {
      "op": "JUMP"
    },
    "7089": {
      "op": "JUMPDEST"
    },
    "7090": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7092": {
      "op": "SWAP2"
    },
    "7093": {
      "op": "POP"
    },
    "7094": {
      "op": "POP"
    },
    "7095": {
      "op": "PUSH2",
      "value": "0x1C1C"
    },
    "7098": {
      "op": "JUMP"
    },
    "7099": {
      "op": "JUMPDEST"
    },
    "7100": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "7102": {
      "op": "DUP5"
    },
    "7103": {
      "op": "GT"
    },
    "7104": {
      "op": "ISZERO"
    },
    "7105": {
      "op": "PUSH2",
      "value": "0x1BCC"
    },
    "7108": {
      "op": "JUMPI"
    },
    "7109": {
      "op": "PUSH2",
      "value": "0x1BCC"
    },
    "7112": {
      "op": "PUSH2",
      "value": "0x1AF7"
    },
    "7115": {
      "jump": "i",
      "op": "JUMP"
    },
    "7116": {
      "op": "JUMPDEST"
    },
    "7117": {
      "op": "POP"
    },
    "7118": {
      "op": "POP"
    },
    "7119": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7121": {
      "op": "DUP3"
    },
    "7122": {
      "op": "SHL"
    },
    "7123": {
      "op": "PUSH2",
      "value": "0x1C1C"
    },
    "7126": {
      "op": "JUMP"
    },
    "7127": {
      "op": "JUMPDEST"
    },
    "7128": {
      "op": "POP"
    },
    "7129": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7131": {
      "op": "DUP4"
    },
    "7132": {
      "op": "LT"
    },
    "7133": {
      "op": "PUSH2",
      "value": "0x133"
    },
    "7136": {
      "op": "DUP4"
    },
    "7137": {
      "op": "LT"
    },
    "7138": {
      "op": "AND"
    },
    "7139": {
      "op": "PUSH1",
      "value": "0x4E"
    },
    "7141": {
      "op": "DUP5"
    },
    "7142": {
      "op": "LT"
    },
    "7143": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "7145": {
      "op": "DUP5"
    },
    "7146": {
      "op": "LT"
    },
    "7147": {
      "op": "AND"
    },
    "7148": {
      "op": "OR"
    },
    "7149": {
      "op": "ISZERO"
    },
    "7150": {
      "op": "PUSH2",
      "value": "0x1BFA"
    },
    "7153": {
      "op": "JUMPI"
    },
    "7154": {
      "op": "POP"
    },
    "7155": {
      "op": "DUP2"
    },
    "7156": {
      "op": "DUP2"
    },
    "7157": {
      "op": "EXP"
    },
    "7158": {
      "op": "PUSH2",
      "value": "0x1C1C"
    },
    "7161": {
      "op": "JUMP"
    },
    "7162": {
      "op": "JUMPDEST"
    },
    "7163": {
      "op": "PUSH2",
      "value": "0x1C04"
    },
    "7166": {
      "op": "DUP4"
    },
    "7167": {
      "op": "DUP4"
    },
    "7168": {
      "op": "PUSH2",
      "value": "0x1B3C"
    },
    "7171": {
      "jump": "i",
      "op": "JUMP"
    },
    "7172": {
      "op": "JUMPDEST"
    },
    "7173": {
      "op": "DUP1"
    },
    "7174": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7176": {
      "op": "NOT"
    },
    "7177": {
      "op": "DIV"
    },
    "7178": {
      "op": "DUP3"
    },
    "7179": {
      "op": "GT"
    },
    "7180": {
      "op": "ISZERO"
    },
    "7181": {
      "op": "PUSH2",
      "value": "0x1C18"
    },
    "7184": {
      "op": "JUMPI"
    },
    "7185": {
      "op": "PUSH2",
      "value": "0x1C18"
    },
    "7188": {
      "op": "PUSH2",
      "value": "0x1AF7"
    },
    "7191": {
      "jump": "i",
      "op": "JUMP"
    },
    "7192": {
      "op": "JUMPDEST"
    },
    "7193": {
      "op": "MUL"
    },
    "7194": {
      "op": "SWAP1"
    },
    "7195": {
      "op": "POP"
    },
    "7196": {
      "op": "JUMPDEST"
    },
    "7197": {
      "op": "SWAP3"
    },
    "7198": {
      "op": "SWAP2"
    },
    "7199": {
      "op": "POP"
    },
    "7200": {
      "op": "POP"
    },
    "7201": {
      "jump": "o",
      "op": "JUMP"
    },
    "7202": {
      "op": "JUMPDEST"
    },
    "7203": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7205": {
      "op": "PUSH2",
      "value": "0x1927"
    },
    "7208": {
      "op": "DUP4"
    },
    "7209": {
      "op": "DUP4"
    },
    "7210": {
      "op": "PUSH2",
      "value": "0x1B7F"
    },
    "7213": {
      "jump": "i",
      "op": "JUMP"
    },
    "7214": {
      "op": "JUMPDEST"
    },
    "7215": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7217": {
      "op": "DUP2"
    },
    "7218": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7220": {
      "op": "NOT"
    },
    "7221": {
      "op": "DIV"
    },
    "7222": {
      "op": "DUP4"
    },
    "7223": {
      "op": "GT"
    },
    "7224": {
      "op": "DUP3"
    },
    "7225": {
      "op": "ISZERO"
    },
    "7226": {
      "op": "ISZERO"
    },
    "7227": {
      "op": "AND"
    },
    "7228": {
      "op": "ISZERO"
    },
    "7229": {
      "op": "PUSH2",
      "value": "0x1C48"
    },
    "7232": {
      "op": "JUMPI"
    },
    "7233": {
      "op": "PUSH2",
      "value": "0x1C48"
    },
    "7236": {
      "op": "PUSH2",
      "value": "0x1AF7"
    },
    "7239": {
      "jump": "i",
      "op": "JUMP"
    },
    "7240": {
      "op": "JUMPDEST"
    },
    "7241": {
      "op": "POP"
    },
    "7242": {
      "op": "MUL"
    },
    "7243": {
      "op": "SWAP1"
    },
    "7244": {
      "jump": "o",
      "op": "JUMP"
    },
    "7245": {
      "op": "JUMPDEST"
    },
    "7246": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7248": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7250": {
      "op": "NOT"
    },
    "7251": {
      "op": "DUP3"
    },
    "7252": {
      "op": "EQ"
    },
    "7253": {
      "op": "ISZERO"
    },
    "7254": {
      "op": "PUSH2",
      "value": "0x1C61"
    },
    "7257": {
      "op": "JUMPI"
    },
    "7258": {
      "op": "PUSH2",
      "value": "0x1C61"
    },
    "7261": {
      "op": "PUSH2",
      "value": "0x1AF7"
    },
    "7264": {
      "jump": "i",
      "op": "JUMP"
    },
    "7265": {
      "op": "JUMPDEST"
    },
    "7266": {
      "op": "POP"
    },
    "7267": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7269": {
      "op": "ADD"
    },
    "7270": {
      "op": "SWAP1"
    },
    "7271": {
      "jump": "o",
      "op": "JUMP"
    },
    "7272": {
      "op": "JUMPDEST"
    },
    "7273": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7275": {
      "op": "DUP2"
    },
    "7276": {
      "op": "DUP2"
    },
    "7277": {
      "op": "SHR"
    },
    "7278": {
      "op": "SWAP1"
    },
    "7279": {
      "op": "DUP3"
    },
    "7280": {
      "op": "AND"
    },
    "7281": {
      "op": "DUP1"
    },
    "7282": {
      "op": "PUSH2",
      "value": "0x1C7C"
    },
    "7285": {
      "op": "JUMPI"
    },
    "7286": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "7288": {
      "op": "DUP3"
    },
    "7289": {
      "op": "AND"
    },
    "7290": {
      "op": "SWAP2"
    },
    "7291": {
      "op": "POP"
    },
    "7292": {
      "op": "JUMPDEST"
    },
    "7293": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7295": {
      "op": "DUP3"
    },
    "7296": {
      "op": "LT"
    },
    "7297": {
      "op": "DUP2"
    },
    "7298": {
      "op": "EQ"
    },
    "7299": {
      "op": "ISZERO"
    },
    "7300": {
      "op": "PUSH2",
      "value": "0x1C9D"
    },
    "7303": {
      "op": "JUMPI"
    },
    "7304": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "7309": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7311": {
      "op": "SHL"
    },
    "7312": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7314": {
      "op": "MSTORE"
    },
    "7315": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "7317": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "7319": {
      "op": "MSTORE"
    },
    "7320": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "7322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7324": {
      "op": "REVERT"
    },
    "7325": {
      "op": "JUMPDEST"
    },
    "7326": {
      "op": "POP"
    },
    "7327": {
      "op": "SWAP2"
    },
    "7328": {
      "op": "SWAP1"
    },
    "7329": {
      "op": "POP"
    },
    "7330": {
      "jump": "o",
      "op": "JUMP"
    },
    "7331": {
      "op": "JUMPDEST"
    },
    "7332": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7334": {
      "op": "DUP1"
    },
    "7335": {
      "op": "DUP3"
    },
    "7336": {
      "op": "MSTORE"
    },
    "7337": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "7339": {
      "op": "SWAP1"
    },
    "7340": {
      "op": "DUP3"
    },
    "7341": {
      "op": "ADD"
    },
    "7342": {
      "op": "MSTORE"
    },
    "7343": {
      "op": "PUSH32",
      "value": "0x6F6E6C79206F776E65722063616E207573652074686973000000000000000000"
    },
    "7376": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7378": {
      "op": "DUP3"
    },
    "7379": {
      "op": "ADD"
    },
    "7380": {
      "op": "MSTORE"
    },
    "7381": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7383": {
      "op": "ADD"
    },
    "7384": {
      "op": "SWAP1"
    },
    "7385": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "227b0a93d1521aaa366174bb7b86cdbbd2cd02cc",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\npragma abicoder v2;\n\ncontract Voting {\n    struct Voter {\n        string id;\n        uint256 area;\n        bool canVote;\n        bool votedForCandidate;\n        bool votedForParty;\n    }\n\n    struct Party {\n        string name;\n        uint256 voteCount;\n    }\n\n    struct Candidate {\n        uint256 id;\n        string name;\n        string party;\n        uint256 area;\n        uint256 voteCount;\n    }\n\n    enum VOTING_STATE {\n        OPEN,\n        CLOSED\n    }\n\n    VOTING_STATE public voting_state;\n\n    address public chairperson;\n    mapping(address => Voter) public voters;\n    \n    Candidate[] public candidates;\n    Party[] public parties;\n    uint256 public party_vote_count=0;\n    uint256 public candidate_vote_count=0;\n    uint256 public voter_count = 0;\n    \n\n\n\n\n    constructor(\n        string[4][] memory candidateNamesParty,\n        string[] memory partyNames\n    ) payable {\n        chairperson = msg.sender;\n        voters[chairperson].canVote = true;\n        for (uint256 i = 0; i < candidateNamesParty.length; i++) {\n            uint area = stringToUint(candidateNamesParty[i][3]);\n            uint id = stringToUint(candidateNamesParty[i][0]);\n            \n            candidates.push(\n                Candidate({\n                    id: id,\n                    name: candidateNamesParty[i][1],\n                    party: candidateNamesParty[i][2],\n                    area: area,\n                    voteCount: 0\n                })\n            );\n        }\n        for (uint256 i = 0; i < partyNames.length; i++) {\n            parties.push(Party({name: partyNames[i], voteCount: 0}));\n        }\n        voter_count += 1;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == chairperson, \"only owner can use this\");\n        _;\n    }\n\n    function stringToUint(string memory numString)\n        public\n        pure\n        returns (uint256)\n    {\n        uint256 val = 0;\n        bytes memory stringBytes = bytes(numString);\n        for (uint256 i = 0; i < stringBytes.length; i++) {\n            uint256 exp = stringBytes.length - i;\n            bytes1 ival = stringBytes[i];\n            uint8 uval = uint8(ival);\n            uint256 jval = uval - uint256(0x30);\n\n            val += (uint256(jval) * (10**(exp - 1)));\n        }\n        return val;\n    }\n\n    \n    function getCandidates(uint area)public view returns(Candidate[] memory) {\n        uint totalCandidates = candidates.length;\n        require(totalCandidates > 0, \"No candidates registered\");\n\n        uint numCandidatesOnArea;\n        for (uint256 i = 0; i < totalCandidates; i++) {\n            if(candidates[i].area == area){\n                numCandidatesOnArea +=1;\n            }\n        }\n        require(numCandidatesOnArea > 0, \"No candidates found\");\n        uint x =0;\n        // string[] memory candidates_to_return = new string[](numCandidatesOnArea);\n        Candidate[] memory candidates_to_return = new Candidate[](numCandidatesOnArea);\n        for (uint256 i = 0; i < totalCandidates; i++) {\n            if(candidates[i].area == area){\n                candidates_to_return[x] = candidates[i];\n                x+=1;\n            }\n        }\n        \n        return candidates_to_return;\n    }\n    // function getCandidates(uint256 area) public view returns (Candidate[] memory temp ) {\n    //     uint x = 0;\n    //     for (uint256 i=0; i<candidates.length; i++){\n    //         if (candidates[i].area == area) {\n    //             temp[x] = candidates[i];\n    //             x+=1;\n    //         }\n    //     }\n    // }\n\n    function getParties() public view returns (Party[] memory) {\n        return parties;\n    }\n\n    function giveRightToVote(\n        address payable voter,\n        string memory id,\n        string memory area\n        \n    )onlyOwner external {\n        \n        require(\n            !voters[voter].votedForCandidate || !voters[voter].votedForParty,\n            \"The voter already voted\"\n        );\n        require(!voters[voter].canVote, \"Voter can already vote\");\n        voters[voter].canVote = true;\n        voters[voter].id = id;\n        voters[voter].area = stringToUint(area);\n        voters[voter].votedForCandidate = false;\n        voters[voter].votedForParty = false;\n        voter.transfer(1000000000000000);\n        voter_count += 1;\n    }\n\n    function removeRightToVote(address voter) onlyOwner external {\n        \n        require(\n            !voters[voter].votedForCandidate || !voters[voter].votedForParty,\n            \"The voter already voted\"\n        );\n        require(voters[voter].canVote, \"Voter doesn't have right to vote\");\n        voters[voter].canVote = false;\n        voter_count -= 1;\n    }\n\n    function voteCandidate(uint256 candidateId) external {\n        Voter storage sender = voters[msg.sender];\n        uint id;\n        require(sender.canVote, \"Has no right to vote\");\n        require(!sender.votedForCandidate, \"already voted for candidate\");\n        for (uint256 i=0; i<candidates.length; i++){\n            if (candidates[i].id == candidateId) {\n                id = i;\n                break;\n            }\n        }\n        require(\n            sender.area == candidates[id].area,\n            \"cannot vote candidate in this area\"\n        );\n        candidates[id].voteCount += 1;\n        candidate_vote_count +=1;\n        sender.votedForCandidate = true;\n    }\n\n    function voteParty(uint256 party) external {\n        Voter storage sender = voters[msg.sender];\n        require(sender.canVote, \"Has no right to vote\");\n        require(!sender.votedForParty, \"already voted for party\");\n        parties[party].voteCount += 1;\n        party_vote_count += 1;\n        sender.votedForCandidate = true;\n    }\n\n    function winningCandidate(uint256 area) public view returns (Candidate memory winningCandidate_){\n        Candidate[] memory candidates_in_area = getCandidates(area);\n        uint256 winningVoteCount = 0;\n        winningCandidate_ = candidates_in_area[0];\n        for (uint256 i = 0; i < candidates_in_area.length; i++) {\n            if (candidates_in_area[i].voteCount > winningVoteCount) {\n                winningVoteCount = candidates_in_area[i].voteCount;\n                winningCandidate_ = candidates_in_area[i];\n            }\n        }\n    }\n\n    function winningParty() public view returns (Party memory  winningParty_) {\n        uint256 winningVoteCount = 0;\n        winningParty_ = parties[0];\n        for (uint256 i = 0; i < parties.length; i++) {\n            if (parties[i].voteCount > winningVoteCount) {\n                winningVoteCount = parties[i].voteCount;\n                winningParty_ = parties[i];\n            }\n        }\n    }\n\n    function fund() public payable {}\n\n    function get_balance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function startElection() public onlyOwner {\n        require(\n            voting_state == VOTING_STATE.CLOSED,\n            \"Can't start a new lottery yet!\"\n        );\n        voting_state = VOTING_STATE.OPEN;\n    }\n\n    function is_open() public view returns(bool state){\n        if (voting_state == VOTING_STATE.OPEN) {\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n}\n\n",
  "sourceMap": "89:7161:0:-:0;;;752:1;720:33;;795:1;759:37;;831:1;802:30;;847:868;;;;;;;;;;;;;;;;;;:::i;:::-;967:11;:24;;;981:10;967:24;;-1:-1:-1;;;;;;967:24:0;;;;;;;;;;1008:11;-1:-1:-1;;;;;1008:11:0;1001:19;;967:11;1001:19;;;;;;;:27;;:34;;-1:-1:-1;;1001:34:0;;;;;;1045:500;1069:19;:26;1065:1;:30;1045:500;;;1116:9;1128:39;1141:19;1161:1;1141:22;;;;;;;;:::i;:::-;;;;;;;1164:1;1141:25;;;;;;;:::i;:::-;;;;;1128:12;:39::i;:::-;1116:51;;1181:7;1191:39;1204:19;1224:1;1204:22;;;;;;;;:::i;:::-;;;;;;;1227:1;1204:25;;;;;;;:::i;1191:39::-;1181:49;;1257:10;1290:230;;;;;;;;1326:2;1290:230;;;;1356:19;1376:1;1356:22;;;;;;;;:::i;:::-;;;;;;;1379:1;1356:25;;;;;;;:::i;:::-;;;;;1290:230;;;;1410:19;1430:1;1410:22;;;;;;;;:::i;:::-;;;;;;;1433:1;1410:25;;;;;;;:::i;:::-;;;;;;;;;;1290:230;;;;;;;;-1:-1:-1;1290:230:0;;;;;;;1257:277;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1257:277:0;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;1102:443;;1097:3;;;;;:::i;:::-;;;;1045:500;;;;1559:9;1554:129;1578:10;:17;1574:1;:21;1554:129;;;1616:7;1629:42;;;;;;;;1642:10;1653:1;1642:13;;;;;;;;:::i;:::-;;;;;;;;;;;;1629:42;;1668:1;1629:42;;;;;;1616:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;1597:3;;;;;:::i;:::-;;;;1554:129;;;;1707:1;1692:11;;:16;;;;;;;:::i;:::-;;;;-1:-1:-1;89:7161:0;;-1:-1:-1;;;89:7161:0;1837:513;1929:7;;2010:9;1929:7;2030:294;2054:11;:18;2050:1;:22;2030:294;;;2093:11;2128:1;2107:11;:18;:22;;;;:::i;:::-;2093:36;;2143:11;2157;2169:1;2157:14;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;2157:14:0;;2185:10;2238:20;2253:4;2157:14;2238:20;:::i;:::-;2223:35;-1:-1:-1;2303:7:0;2309:1;2303:3;:7;:::i;:::-;2298:13;;:2;:13;:::i;:::-;2281:31;;2289:4;2281:31;:::i;:::-;2273:40;;;;:::i;:::-;;;2079:245;;;;2074:3;;;;;:::i;:::-;;;;2030:294;;;-1:-1:-1;2340:3:0;;1837:513;-1:-1:-1;;;1837:513:0:o;89:7161::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;89:7161:0;;;-1:-1:-1;89:7161:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:1;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:252;218:2;212:9;260:3;248:16;;-1:-1:-1;;;;;279:34:1;;315:22;;;276:62;273:88;;;341:18;;:::i;:::-;377:2;370:22;146:252;:::o;403:275::-;474:2;468:9;539:2;520:13;;-1:-1:-1;;516:27:1;504:40;;-1:-1:-1;;;;;559:34:1;;595:22;;;556:62;553:88;;;621:18;;:::i;:::-;657:2;650:22;403:275;;-1:-1:-1;403:275:1:o;683:188::-;748:4;-1:-1:-1;;;;;770:30:1;;767:56;;;803:18;;:::i;:::-;-1:-1:-1;848:1:1;844:14;860:4;840:25;;683:188::o;876:695::-;930:5;983:3;976:4;968:6;964:17;960:27;950:55;;1001:1;998;991:12;950:55;1024:13;;-1:-1:-1;;;;;1049:26:1;;1046:52;;;1078:18;;:::i;:::-;1117:4;1145:53;1188:2;1169:13;;-1:-1:-1;;1165:27:1;1161:36;;1145:53;:::i;:::-;1223:2;1214:7;1207:19;1267:3;1262:2;1257;1249:6;1245:15;1241:24;1238:33;1235:53;;;1284:1;1281;1274:12;1235:53;1306:1;1316:134;1330:2;1327:1;1324:9;1316:134;;;1419:14;;;1415:23;;1409:30;1387:15;;;1383:24;;1376:64;1341:10;;1316:134;;;1468:2;1465:1;1462:9;1459:81;;;1528:1;1523:2;1518;1509:7;1505:16;1501:25;1494:36;1459:81;-1:-1:-1;1558:7:1;876:695;-1:-1:-1;;;;;876:695:1:o;1576:901::-;1640:5;1693:3;1686:4;1678:6;1674:17;1670:27;1660:55;;1711:1;1708;1701:12;1660:55;1740:6;1734:13;1766:4;1790:65;1806:48;1851:2;1806:48;:::i;:::-;1790:65;:::i;:::-;1889:15;;;1975:1;1971:10;;;;1959:23;;1955:32;;;1920:12;;;;1999:15;;;1996:35;;;2027:1;2024;2017:12;1996:35;2063:2;2055:6;2051:15;2075:373;2091:6;2086:3;2083:15;2075:373;;;2164:10;;-1:-1:-1;;;;;2190:35:1;;2187:125;;;2266:1;2295:2;2291;2284:14;2187:125;2337:68;2401:3;2396:2;2382:11;2374:6;2370:24;2366:33;2337:68;:::i;:::-;2325:81;;-1:-1:-1;2426:12:1;;;;2108;;2075:373;;;-1:-1:-1;2466:5:1;1576:901;-1:-1:-1;;;;;;1576:901:1:o;2482:1900::-;2654:6;2662;2715:2;2703:9;2694:7;2690:23;2686:32;2683:52;;;2731:1;2728;2721:12;2683:52;2758:16;;-1:-1:-1;;;;;2823:14:1;;;2820:34;;;2850:1;2847;2840:12;2820:34;2888:6;2877:9;2873:22;2863:32;;2933:7;2926:4;2922:2;2918:13;2914:27;2904:55;;2955:1;2952;2945:12;2904:55;2984:2;2978:9;3007:65;3023:48;3068:2;3023:48;:::i;3007:65::-;3094:3;3118:2;3113:3;3106:15;3146:4;3141:3;3137:14;3130:21;;3199:4;3193:2;3190:1;3186:10;3182:2;3178:19;3174:30;3160:44;;3227:7;3219:6;3216:19;3213:39;;;3248:1;3245;3238:12;3213:39;3280:4;3276:2;3272:13;3294:869;3310:6;3305:3;3302:15;3294:869;;;3391:3;3385:10;3427:2;3414:11;3411:19;3408:39;;;3443:1;3440;3433:12;3408:39;3470:20;;3525:2;3517:11;;3513:25;-1:-1:-1;3503:53:1;;3552:1;3549;3542:12;3503:53;3582:22;;:::i;:::-;3630:5;3668:7;3662:3;3658:2;3654:12;3651:25;3648:45;;;3689:1;3686;3679:12;3648:45;3727:4;3723:2;3719:13;3745:343;3771:3;3767:2;3763:12;3756:5;3753:23;3745:343;;;3864:5;3858:12;3908:2;3893:13;3890:21;3887:41;;;3924:1;3921;3914:12;3887:41;3959:72;4023:7;4016:4;4000:13;3996:2;3992:22;3988:33;3959:72;:::i;:::-;3945:87;;-1:-1:-1;4069:4:1;4058:16;;;;3788;3745:343;;;-1:-1:-1;4101:18:1;;-1:-1:-1;;4148:4:1;4139:14;;;;3327;3294:869;;;-1:-1:-1;4233:4:1;4218:20;;4212:27;4182:5;;-1:-1:-1;4212:27:1;-1:-1:-1;;;4251:16:1;;;4248:36;;;4280:1;4277;4270:12;4248:36;;4303:73;4368:7;4357:8;4346:9;4342:24;4303:73;:::i;:::-;4293:83;;;2482:1900;;;;;:::o;4387:127::-;4448:10;4443:3;4439:20;4436:1;4429:31;4479:4;4476:1;4469:15;4503:4;4500:1;4493:15;4519:127;4580:10;4575:3;4571:20;4568:1;4561:31;4611:4;4608:1;4601:15;4635:4;4632:1;4625:15;4651:135;4690:3;-1:-1:-1;;4711:17:1;;4708:43;;;4731:18;;:::i;:::-;-1:-1:-1;4778:1:1;4767:13;;4651:135::o;4791:128::-;4831:3;4862:1;4858:6;4855:1;4852:13;4849:39;;;4868:18;;:::i;:::-;-1:-1:-1;4904:9:1;;4791:128::o;4924:125::-;4964:4;4992:1;4989;4986:8;4983:34;;;4997:18;;:::i;:::-;-1:-1:-1;5034:9:1;;4924:125::o;5054:422::-;5143:1;5186:5;5143:1;5200:270;5221:7;5211:8;5208:21;5200:270;;;5280:4;5276:1;5272:6;5268:17;5262:4;5259:27;5256:53;;;5289:18;;:::i;:::-;5339:7;5329:8;5325:22;5322:55;;;5359:16;;;;5322:55;5438:22;;;;5398:15;;;;5200:270;;;5204:3;5054:422;;;;;:::o;5481:806::-;5530:5;5560:8;5550:80;;-1:-1:-1;5601:1:1;5615:5;;5550:80;5649:4;5639:76;;-1:-1:-1;5686:1:1;5700:5;;5639:76;5731:4;5749:1;5744:59;;;;5817:1;5812:130;;;;5724:218;;5744:59;5774:1;5765:10;;5788:5;;;5812:130;5849:3;5839:8;5836:17;5833:43;;;5856:18;;:::i;:::-;-1:-1:-1;;5912:1:1;5898:16;;5927:5;;5724:218;;6026:2;6016:8;6013:16;6007:3;6001:4;5998:13;5994:36;5988:2;5978:8;5975:16;5970:2;5964:4;5961:12;5957:35;5954:77;5951:159;;;-1:-1:-1;6063:19:1;;;6095:5;;5951:159;6142:34;6167:8;6161:4;6142:34;:::i;:::-;6212:6;6208:1;6204:6;6200:19;6191:7;6188:32;6185:58;;;6223:18;;:::i;:::-;6261:20;;-1:-1:-1;5481:806:1;;;;;:::o;6292:131::-;6352:5;6381:36;6408:8;6402:4;6381:36;:::i;:::-;6372:45;6292:131;-1:-1:-1;;;6292:131:1:o;6428:168::-;6468:7;6534:1;6530;6526:6;6522:14;6519:1;6516:21;6511:1;6504:9;6497:17;6493:45;6490:71;;;6541:18;;:::i;:::-;-1:-1:-1;6581:9:1;;6428:168::o;6601:380::-;6680:1;6676:12;;;;6723;;;6744:61;;6798:4;6790:6;6786:17;6776:27;;6744:61;6851:2;6843:6;6840:14;6820:18;6817:38;6814:161;;;6897:10;6892:3;6888:20;6885:1;6878:31;6932:4;6929:1;6922:15;6960:4;6957:1;6950:15;6814:161;;6601:380;;;:::o;:::-;89:7161:0;;;;;;",
  "sourcePath": "contracts/Voting.sol",
  "type": "contract"
}