{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[3][]",
          "name": "candidateNamesParty",
          "type": "string[3][]"
        },
        {
          "internalType": "string[]",
          "name": "partyNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string[3][]",
          "name": "candidateNamesParty",
          "type": "string[3][]"
        }
      ],
      "name": "addCandidates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "party",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "party",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "area",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Party[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "area",
          "type": "string"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "parties",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "removeRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "numString",
          "type": "string"
        }
      ],
      "name": "stringToUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "candidate",
          "type": "uint256"
        }
      ],
      "name": "voteCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "party",
          "type": "uint256"
        }
      ],
      "name": "voteParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canVote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "votedForCandidate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "votedForParty",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voters_count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningCandidate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningParty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningParty_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Voting.sol"
  },
  "ast": {
    "absolutePath": "contracts/Voting.sol",
    "exportedSymbols": {
      "Voting": [
        626
      ]
    },
    "id": 627,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:31:0"
      },
      {
        "id": 2,
        "literals": [
          "abicoder",
          "v2"
        ],
        "nodeType": "PragmaDirective",
        "src": "68:19:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Voting",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 626,
        "linearizedBaseContracts": [
          626
        ],
        "name": "Voting",
        "nameLocation": "98:6:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Voting.Voter",
            "id": 13,
            "members": [
              {
                "constant": false,
                "id": 4,
                "mutability": "mutable",
                "name": "id",
                "nameLocation": "141:2:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "134:9:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 3,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "134:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 6,
                "mutability": "mutable",
                "name": "area",
                "nameLocation": "161:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "153:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 5,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "153:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 8,
                "mutability": "mutable",
                "name": "canVote",
                "nameLocation": "180:7:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "175:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 7,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "175:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 10,
                "mutability": "mutable",
                "name": "votedForCandidate",
                "nameLocation": "202:17:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "197:22:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 9,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "197:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 12,
                "mutability": "mutable",
                "name": "votedForParty",
                "nameLocation": "234:13:0",
                "nodeType": "VariableDeclaration",
                "scope": 13,
                "src": "229:18:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 11,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "229:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Voter",
            "nameLocation": "118:5:0",
            "nodeType": "StructDefinition",
            "scope": 626,
            "src": "111:143:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Party",
            "id": 18,
            "members": [
              {
                "constant": false,
                "id": 15,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "290:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 18,
                "src": "283:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 14,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "283:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 17,
                "mutability": "mutable",
                "name": "voteCount",
                "nameLocation": "312:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 18,
                "src": "304:17:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "304:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Party",
            "nameLocation": "267:5:0",
            "nodeType": "StructDefinition",
            "scope": 626,
            "src": "260:68:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Candidate",
            "id": 27,
            "members": [
              {
                "constant": false,
                "id": 20,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "368:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 27,
                "src": "361:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 19,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "361:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 22,
                "mutability": "mutable",
                "name": "party",
                "nameLocation": "389:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 27,
                "src": "382:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 21,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "382:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 24,
                "mutability": "mutable",
                "name": "area",
                "nameLocation": "412:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 27,
                "src": "404:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 23,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "404:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 26,
                "mutability": "mutable",
                "name": "voteCount",
                "nameLocation": "434:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 27,
                "src": "426:17:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 25,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "426:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nameLocation": "341:9:0",
            "nodeType": "StructDefinition",
            "scope": 626,
            "src": "334:116:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2e4176cf",
            "id": 29,
            "mutability": "mutable",
            "name": "chairperson",
            "nameLocation": "471:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 626,
            "src": "456:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 28,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "456:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "a3ec138d",
            "id": 34,
            "mutability": "mutable",
            "name": "voters",
            "nameLocation": "521:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 626,
            "src": "488:39:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
              "typeString": "mapping(address => struct Voting.Voter)"
            },
            "typeName": {
              "id": 33,
              "keyType": {
                "id": 30,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "496:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "488:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                "typeString": "mapping(address => struct Voting.Voter)"
              },
              "valueType": {
                "id": 32,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 31,
                  "name": "Voter",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 13,
                  "src": "507:5:0"
                },
                "referencedDeclaration": 13,
                "src": "507:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                  "typeString": "struct Voting.Voter"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 37,
            "mutability": "mutable",
            "name": "voter_count",
            "nameLocation": "541:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 626,
            "src": "533:23:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 35,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "533:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 36,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "555:1:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "3477ee2e",
            "id": 41,
            "mutability": "mutable",
            "name": "candidates",
            "nameLocation": "581:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 626,
            "src": "562:29:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
              "typeString": "struct Voting.Candidate[]"
            },
            "typeName": {
              "baseType": {
                "id": 39,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 38,
                  "name": "Candidate",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27,
                  "src": "562:9:0"
                },
                "referencedDeclaration": 27,
                "src": "562:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$27_storage_ptr",
                  "typeString": "struct Voting.Candidate"
                }
              },
              "id": 40,
              "nodeType": "ArrayTypeName",
              "src": "562:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr",
                "typeString": "struct Voting.Candidate[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "70651a18",
            "id": 45,
            "mutability": "mutable",
            "name": "parties",
            "nameLocation": "612:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 626,
            "src": "597:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
              "typeString": "struct Voting.Party[]"
            },
            "typeName": {
              "baseType": {
                "id": 43,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 42,
                  "name": "Party",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 18,
                  "src": "597:5:0"
                },
                "referencedDeclaration": 18,
                "src": "597:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Party_$18_storage_ptr",
                  "typeString": "struct Voting.Party"
                }
              },
              "id": 44,
              "nodeType": "ArrayTypeName",
              "src": "597:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr",
                "typeString": "struct Voting.Party[]"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 134,
              "nodeType": "Block",
              "src": "736:624:0",
              "statements": [
                {
                  "expression": {
                    "id": 59,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 56,
                      "name": "chairperson",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29,
                      "src": "746:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 57,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "760:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 58,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "760:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "746:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 60,
                  "nodeType": "ExpressionStatement",
                  "src": "746:24:0"
                },
                {
                  "expression": {
                    "id": 66,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 61,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "780:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 63,
                        "indexExpression": {
                          "id": 62,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "787:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "780:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 64,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "780:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 65,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "810:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "780:34:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 67,
                  "nodeType": "ExpressionStatement",
                  "src": "780:34:0"
                },
                {
                  "body": {
                    "id": 104,
                    "nodeType": "Block",
                    "src": "881:309:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 83,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 50,
                                      "src": "966:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[3] memory[] memory"
                                      }
                                    },
                                    "id": 85,
                                    "indexExpression": {
                                      "id": 84,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 69,
                                      "src": "986:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "966:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                      "typeString": "string memory[3] memory"
                                    }
                                  },
                                  "id": 87,
                                  "indexExpression": {
                                    "hexValue": "30",
                                    "id": 86,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "989:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "966:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 88,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 50,
                                      "src": "1020:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[3] memory[] memory"
                                      }
                                    },
                                    "id": 90,
                                    "indexExpression": {
                                      "id": 89,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 69,
                                      "src": "1040:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1020:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                      "typeString": "string memory[3] memory"
                                    }
                                  },
                                  "id": 92,
                                  "indexExpression": {
                                    "hexValue": "31",
                                    "id": 91,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1043:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1020:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "baseExpression": {
                                        "baseExpression": {
                                          "id": 94,
                                          "name": "candidateNamesParty",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 50,
                                          "src": "1086:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                            "typeString": "string memory[3] memory[] memory"
                                          }
                                        },
                                        "id": 96,
                                        "indexExpression": {
                                          "id": 95,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 69,
                                          "src": "1106:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "1086:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                          "typeString": "string memory[3] memory"
                                        }
                                      },
                                      "id": 98,
                                      "indexExpression": {
                                        "hexValue": "32",
                                        "id": 97,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1109:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "1086:25:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    ],
                                    "id": 93,
                                    "name": "stringToUint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 214,
                                    "src": "1073:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                                      "typeString": "function (string memory) pure returns (uint256)"
                                    }
                                  },
                                  "id": 99,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1073:39:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 100,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1145:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 82,
                                "name": "Candidate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 27,
                                "src": "928:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Candidate_$27_storage_ptr_$",
                                  "typeString": "type(struct Voting.Candidate storage pointer)"
                                }
                              },
                              "id": 101,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "party",
                                "area",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "928:237:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$27_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Candidate_$27_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            ],
                            "expression": {
                              "id": 79,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "895:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 81,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "895:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr_$_t_struct$_Candidate_$27_storage_$returns$__$bound_to$_t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Candidate storage ref[] storage pointer,struct Voting.Candidate storage ref)"
                            }
                          },
                          "id": 102,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "895:284:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 103,
                        "nodeType": "ExpressionStatement",
                        "src": "895:284:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 75,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 72,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 69,
                      "src": "844:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 73,
                        "name": "candidateNamesParty",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50,
                        "src": "848:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[3] memory[] memory"
                        }
                      },
                      "id": 74,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "848:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "844:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 105,
                  "initializationExpression": {
                    "assignments": [
                      69
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 69,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "837:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 105,
                        "src": "829:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "829:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 71,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 70,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "841:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "829:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 77,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "876:3:0",
                      "subExpression": {
                        "id": 76,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69,
                        "src": "876:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 78,
                    "nodeType": "ExpressionStatement",
                    "src": "876:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "824:366:0"
                },
                {
                  "body": {
                    "id": 128,
                    "nodeType": "Block",
                    "src": "1247:81:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 121,
                                    "name": "partyNames",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 53,
                                    "src": "1287:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 123,
                                  "indexExpression": {
                                    "id": 122,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 107,
                                    "src": "1298:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1287:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 124,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1313:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 120,
                                "name": "Party",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 18,
                                "src": "1274:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Party_$18_storage_ptr_$",
                                  "typeString": "type(struct Voting.Party storage pointer)"
                                }
                              },
                              "id": 125,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "1274:42:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                                "typeString": "struct Voting.Party memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Party_$18_memory_ptr",
                                "typeString": "struct Voting.Party memory"
                              }
                            ],
                            "expression": {
                              "id": 117,
                              "name": "parties",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 45,
                              "src": "1261:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                "typeString": "struct Voting.Party storage ref[] storage ref"
                              }
                            },
                            "id": 119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1261:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr_$_t_struct$_Party_$18_storage_$returns$__$bound_to$_t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Party storage ref[] storage pointer,struct Voting.Party storage ref)"
                            }
                          },
                          "id": 126,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1261:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 127,
                        "nodeType": "ExpressionStatement",
                        "src": "1261:56:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 113,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 110,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 107,
                      "src": "1219:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 111,
                        "name": "partyNames",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 53,
                        "src": "1223:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        }
                      },
                      "id": 112,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1223:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1219:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 129,
                  "initializationExpression": {
                    "assignments": [
                      107
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 107,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1212:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 129,
                        "src": "1204:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 106,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1204:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 109,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 108,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1216:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1204:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 115,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1242:3:0",
                      "subExpression": {
                        "id": 114,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 107,
                        "src": "1242:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 116,
                    "nodeType": "ExpressionStatement",
                    "src": "1242:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1199:129:0"
                },
                {
                  "expression": {
                    "id": 132,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 130,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "1337:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 131,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1352:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1337:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 133,
                  "nodeType": "ExpressionStatement",
                  "src": "1337:16:0"
                }
              ]
            },
            "id": 135,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 54,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50,
                  "mutability": "mutable",
                  "name": "candidateNamesParty",
                  "nameLocation": "666:19:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 135,
                  "src": "647:38:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[3][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 46,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "647:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "id": 48,
                      "length": {
                        "hexValue": "33",
                        "id": 47,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "654:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "nodeType": "ArrayTypeName",
                      "src": "647:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$3_storage_ptr",
                        "typeString": "string[3]"
                      }
                    },
                    "id": 49,
                    "nodeType": "ArrayTypeName",
                    "src": "647:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_string_storage_$3_storage_$dyn_storage_ptr",
                      "typeString": "string[3][]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 53,
                  "mutability": "mutable",
                  "name": "partyNames",
                  "nameLocation": "711:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 135,
                  "src": "695:26:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 51,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "695:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 52,
                    "nodeType": "ArrayTypeName",
                    "src": "695:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "637:90:0"
            },
            "returnParameters": {
              "id": 55,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "736:0:0"
            },
            "scope": 626,
            "src": "626:734:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 213,
              "nodeType": "Block",
              "src": "1471:408:0",
              "statements": [
                {
                  "assignments": [
                    143
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 143,
                      "mutability": "mutable",
                      "name": "val",
                      "nameLocation": "1489:3:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "1481:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 142,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1481:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 145,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 144,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1495:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1481:15:0"
                },
                {
                  "assignments": [
                    147
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 147,
                      "mutability": "mutable",
                      "name": "stringBytes",
                      "nameLocation": "1519:11:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "1506:24:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 146,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1506:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 152,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 150,
                        "name": "numString",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 137,
                        "src": "1539:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 149,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "1533:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                        "typeString": "type(bytes storage pointer)"
                      },
                      "typeName": {
                        "id": 148,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1533:5:0",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 151,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1533:16:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1506:43:0"
                },
                {
                  "body": {
                    "id": 209,
                    "nodeType": "Block",
                    "src": "1608:245:0",
                    "statements": [
                      {
                        "assignments": [
                          165
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 165,
                            "mutability": "mutable",
                            "name": "exp",
                            "nameLocation": "1630:3:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "1622:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 164,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1622:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 170,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 169,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 166,
                              "name": "stringBytes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 147,
                              "src": "1636:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 167,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "1636:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 168,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 154,
                            "src": "1657:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1636:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1622:36:0"
                      },
                      {
                        "assignments": [
                          172
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 172,
                            "mutability": "mutable",
                            "name": "ival",
                            "nameLocation": "1679:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "1672:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            },
                            "typeName": {
                              "id": 171,
                              "name": "bytes1",
                              "nodeType": "ElementaryTypeName",
                              "src": "1672:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 176,
                        "initialValue": {
                          "baseExpression": {
                            "id": 173,
                            "name": "stringBytes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 147,
                            "src": "1686:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 175,
                          "indexExpression": {
                            "id": 174,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 154,
                            "src": "1698:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1686:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1672:28:0"
                      },
                      {
                        "assignments": [
                          178
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 178,
                            "mutability": "mutable",
                            "name": "uval",
                            "nameLocation": "1720:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "1714:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 177,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "1714:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 183,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 181,
                              "name": "ival",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 172,
                              "src": "1733:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes1",
                                "typeString": "bytes1"
                              }
                            ],
                            "id": 180,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1727:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint8_$",
                              "typeString": "type(uint8)"
                            },
                            "typeName": {
                              "id": 179,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "1727:5:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 182,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1727:11:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1714:24:0"
                      },
                      {
                        "assignments": [
                          185
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 185,
                            "mutability": "mutable",
                            "name": "jval",
                            "nameLocation": "1760:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 209,
                            "src": "1752:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 184,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1752:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 192,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 191,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 186,
                            "name": "uval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 178,
                            "src": "1767:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30783330",
                                "id": 189,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1782:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_48_by_1",
                                  "typeString": "int_const 48"
                                },
                                "value": "0x30"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_48_by_1",
                                  "typeString": "int_const 48"
                                }
                              ],
                              "id": 188,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1774:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 187,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "1774:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 190,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1774:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1767:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1752:35:0"
                      },
                      {
                        "expression": {
                          "id": 207,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 193,
                            "name": "val",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 143,
                            "src": "1802:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 205,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 196,
                                      "name": "jval",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 185,
                                      "src": "1818:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 195,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1810:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 194,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1810:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 197,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1810:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 203,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 198,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1827:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 201,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 199,
                                              "name": "exp",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 165,
                                              "src": "1832:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "-",
                                            "rightExpression": {
                                              "hexValue": "31",
                                              "id": 200,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "1838:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_1_by_1",
                                                "typeString": "int_const 1"
                                              },
                                              "value": "1"
                                            },
                                            "src": "1832:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 202,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "1831:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "1827:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 204,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "1826:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1810:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 206,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "1809:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1802:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 208,
                        "nodeType": "ExpressionStatement",
                        "src": "1802:40:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 160,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 157,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 154,
                      "src": "1579:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 158,
                        "name": "stringBytes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 147,
                        "src": "1583:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 159,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1583:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1579:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 210,
                  "initializationExpression": {
                    "assignments": [
                      154
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 154,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1572:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 210,
                        "src": "1564:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 153,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1564:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 156,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 155,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1576:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1564:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 162,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1603:3:0",
                      "subExpression": {
                        "id": 161,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 154,
                        "src": "1603:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 163,
                    "nodeType": "ExpressionStatement",
                    "src": "1603:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1559:294:0"
                },
                {
                  "expression": {
                    "id": 211,
                    "name": "val",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 143,
                    "src": "1869:3:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 141,
                  "id": 212,
                  "nodeType": "Return",
                  "src": "1862:10:0"
                }
              ]
            },
            "functionSelector": "1bd95155",
            "id": 214,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "stringToUint",
            "nameLocation": "1375:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 138,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 137,
                  "mutability": "mutable",
                  "name": "numString",
                  "nameLocation": "1402:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 214,
                  "src": "1388:23:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 136,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1388:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1387:25:0"
            },
            "returnParameters": {
              "id": 141,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 140,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 214,
                  "src": "1458:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 139,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1458:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1457:9:0"
            },
            "scope": 626,
            "src": "1366:513:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 268,
              "nodeType": "Block",
              "src": "1957:504:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 223,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1988:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1988:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 225,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "2002:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1988:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c792063686169726d616e2063616e20676976652074686520726967687420746f20766f7465",
                        "id": 227,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2027:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_22e888be005b4f3499904ad360d236f8e3ef070266079c125e0e78db5100ebf5",
                          "typeString": "literal_string \"Only chairman can give the right to vote\""
                        },
                        "value": "Only chairman can give the right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_22e888be005b4f3499904ad360d236f8e3ef070266079c125e0e78db5100ebf5",
                          "typeString": "literal_string \"Only chairman can give the right to vote\""
                        }
                      ],
                      "id": 222,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1967:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1967:112:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 229,
                  "nodeType": "ExpressionStatement",
                  "src": "1967:112:0"
                },
                {
                  "body": {
                    "id": 266,
                    "nodeType": "Block",
                    "src": "2146:309:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 245,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 219,
                                      "src": "2231:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[3] memory[] memory"
                                      }
                                    },
                                    "id": 247,
                                    "indexExpression": {
                                      "id": 246,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 231,
                                      "src": "2251:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2231:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                      "typeString": "string memory[3] memory"
                                    }
                                  },
                                  "id": 249,
                                  "indexExpression": {
                                    "hexValue": "30",
                                    "id": 248,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2254:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2231:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "baseExpression": {
                                      "id": 250,
                                      "name": "candidateNamesParty",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 219,
                                      "src": "2285:19:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "string memory[3] memory[] memory"
                                      }
                                    },
                                    "id": 252,
                                    "indexExpression": {
                                      "id": 251,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 231,
                                      "src": "2305:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2285:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                      "typeString": "string memory[3] memory"
                                    }
                                  },
                                  "id": 254,
                                  "indexExpression": {
                                    "hexValue": "31",
                                    "id": 253,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2308:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2285:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "baseExpression": {
                                        "baseExpression": {
                                          "id": 256,
                                          "name": "candidateNamesParty",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 219,
                                          "src": "2351:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                                            "typeString": "string memory[3] memory[] memory"
                                          }
                                        },
                                        "id": 258,
                                        "indexExpression": {
                                          "id": 257,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 231,
                                          "src": "2371:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "2351:22:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_string_memory_ptr_$3_memory_ptr",
                                          "typeString": "string memory[3] memory"
                                        }
                                      },
                                      "id": 260,
                                      "indexExpression": {
                                        "hexValue": "32",
                                        "id": 259,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2374:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "2351:25:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_string_memory_ptr",
                                        "typeString": "string memory"
                                      }
                                    ],
                                    "id": 255,
                                    "name": "stringToUint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 214,
                                    "src": "2338:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                                      "typeString": "function (string memory) pure returns (uint256)"
                                    }
                                  },
                                  "id": 261,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2338:39:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 262,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2410:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 244,
                                "name": "Candidate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 27,
                                "src": "2193:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Candidate_$27_storage_ptr_$",
                                  "typeString": "type(struct Voting.Candidate storage pointer)"
                                }
                              },
                              "id": 263,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "party",
                                "area",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "2193:237:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$27_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Candidate_$27_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            ],
                            "expression": {
                              "id": 241,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "2160:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 243,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "2160:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr_$_t_struct$_Candidate_$27_storage_$returns$__$bound_to$_t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Candidate storage ref[] storage pointer,struct Voting.Candidate storage ref)"
                            }
                          },
                          "id": 264,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2160:284:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 265,
                        "nodeType": "ExpressionStatement",
                        "src": "2160:284:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 234,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 231,
                      "src": "2109:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 235,
                        "name": "candidateNamesParty",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 219,
                        "src": "2113:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[3] memory[] memory"
                        }
                      },
                      "id": 236,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2113:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2109:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 267,
                  "initializationExpression": {
                    "assignments": [
                      231
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 231,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "2102:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 267,
                        "src": "2094:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 230,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2094:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 233,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 232,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2106:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "2094:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 239,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "2141:3:0",
                      "subExpression": {
                        "id": 238,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 231,
                        "src": "2141:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 240,
                    "nodeType": "ExpressionStatement",
                    "src": "2141:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "2089:366:0"
                }
              ]
            },
            "functionSelector": "9f6680a8",
            "id": 269,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addCandidates",
            "nameLocation": "1894:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 220,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 219,
                  "mutability": "mutable",
                  "name": "candidateNamesParty",
                  "nameLocation": "1927:19:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 269,
                  "src": "1908:38:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_array$_t_string_memory_ptr_$3_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[3][]"
                  },
                  "typeName": {
                    "baseType": {
                      "baseType": {
                        "id": 215,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1908:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "id": 217,
                      "length": {
                        "hexValue": "33",
                        "id": 216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1915:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_3_by_1",
                          "typeString": "int_const 3"
                        },
                        "value": "3"
                      },
                      "nodeType": "ArrayTypeName",
                      "src": "1908:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_string_storage_$3_storage_ptr",
                        "typeString": "string[3]"
                      }
                    },
                    "id": 218,
                    "nodeType": "ArrayTypeName",
                    "src": "1908:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_array$_t_string_storage_$3_storage_$dyn_storage_ptr",
                      "typeString": "string[3][]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1907:40:0"
            },
            "returnParameters": {
              "id": 221,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1957:0:0"
            },
            "scope": 626,
            "src": "1885:576:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 278,
              "nodeType": "Block",
              "src": "2533:34:0",
              "statements": [
                {
                  "expression": {
                    "id": 276,
                    "name": "candidates",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 41,
                    "src": "2550:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                      "typeString": "struct Voting.Candidate storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 275,
                  "id": 277,
                  "nodeType": "Return",
                  "src": "2543:17:0"
                }
              ]
            },
            "functionSelector": "06a49fce",
            "id": 279,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCandidates",
            "nameLocation": "2476:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 270,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2489:2:0"
            },
            "returnParameters": {
              "id": 275,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 274,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 279,
                  "src": "2513:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Candidate_$27_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Candidate[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 272,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 271,
                        "name": "Candidate",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 27,
                        "src": "2513:9:0"
                      },
                      "referencedDeclaration": 27,
                      "src": "2513:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$27_storage_ptr",
                        "typeString": "struct Voting.Candidate"
                      }
                    },
                    "id": 273,
                    "nodeType": "ArrayTypeName",
                    "src": "2513:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Candidate[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2512:20:0"
            },
            "scope": 626,
            "src": "2467:100:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 288,
              "nodeType": "Block",
              "src": "2632:31:0",
              "statements": [
                {
                  "expression": {
                    "id": 286,
                    "name": "parties",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 45,
                    "src": "2649:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                      "typeString": "struct Voting.Party storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 285,
                  "id": 287,
                  "nodeType": "Return",
                  "src": "2642:14:0"
                }
              ]
            },
            "functionSelector": "a8311aa8",
            "id": 289,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getParties",
            "nameLocation": "2582:10:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 280,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2592:2:0"
            },
            "returnParameters": {
              "id": 285,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 284,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "2616:14:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Party_$18_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Party[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 282,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 281,
                        "name": "Party",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 18,
                        "src": "2616:5:0"
                      },
                      "referencedDeclaration": 18,
                      "src": "2616:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Party_$18_storage_ptr",
                        "typeString": "struct Voting.Party"
                      }
                    },
                    "id": 283,
                    "nodeType": "ArrayTypeName",
                    "src": "2616:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Party[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2615:16:0"
            },
            "scope": 626,
            "src": "2573:90:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 377,
              "nodeType": "Block",
              "src": "2794:619:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 302,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 299,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2825:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 300,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2825:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 301,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "2839:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2825:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c792063686169726d616e2063616e20676976652074686520726967687420746f20766f7465",
                        "id": 303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2864:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_22e888be005b4f3499904ad360d236f8e3ef070266079c125e0e78db5100ebf5",
                          "typeString": "literal_string \"Only chairman can give the right to vote\""
                        },
                        "value": "Only chairman can give the right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_22e888be005b4f3499904ad360d236f8e3ef070266079c125e0e78db5100ebf5",
                          "typeString": "literal_string \"Only chairman can give the right to vote\""
                        }
                      ],
                      "id": 298,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2804:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 304,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2804:112:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 305,
                  "nodeType": "ExpressionStatement",
                  "src": "2804:112:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 317,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "2947:32:0",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 307,
                                "name": "voters",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "2948:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 309,
                              "indexExpression": {
                                "id": 308,
                                "name": "voter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 291,
                                "src": "2955:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2948:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 310,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "votedForCandidate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 10,
                            "src": "2948:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "id": 316,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "2983:28:0",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 312,
                                "name": "voters",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "2984:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 314,
                              "indexExpression": {
                                "id": 313,
                                "name": "voter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 291,
                                "src": "2991:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2984:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 315,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "votedForParty",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12,
                            "src": "2984:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2947:64:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520766f74657220616c726561647920766f746564",
                        "id": 318,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3025:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        },
                        "value": "The voter already voted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        }
                      ],
                      "id": 306,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2926:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 319,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2926:134:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 320,
                  "nodeType": "ExpressionStatement",
                  "src": "2926:134:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 326,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "3078:22:0",
                        "subExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 322,
                              "name": "voters",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 34,
                              "src": "3079:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                "typeString": "mapping(address => struct Voting.Voter storage ref)"
                              }
                            },
                            "id": 324,
                            "indexExpression": {
                              "id": 323,
                              "name": "voter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 291,
                              "src": "3086:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3079:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage",
                              "typeString": "struct Voting.Voter storage ref"
                            }
                          },
                          "id": 325,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "canVote",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 8,
                          "src": "3079:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "566f7465722063616e20616c726561647920766f7465",
                        "id": 327,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3102:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6582ac717cacb908d0fddafdc6182c53d1640512810fcb2c05e7c52b38369db7",
                          "typeString": "literal_string \"Voter can already vote\""
                        },
                        "value": "Voter can already vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6582ac717cacb908d0fddafdc6182c53d1640512810fcb2c05e7c52b38369db7",
                          "typeString": "literal_string \"Voter can already vote\""
                        }
                      ],
                      "id": 321,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3070:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 328,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3070:57:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 329,
                  "nodeType": "ExpressionStatement",
                  "src": "3070:57:0"
                },
                {
                  "expression": {
                    "id": 335,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 330,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3137:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 332,
                        "indexExpression": {
                          "id": 331,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3144:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3137:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 333,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "3137:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 334,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3161:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "3137:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 336,
                  "nodeType": "ExpressionStatement",
                  "src": "3137:28:0"
                },
                {
                  "expression": {
                    "id": 342,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 337,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3175:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 339,
                        "indexExpression": {
                          "id": 338,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3182:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3175:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 340,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "id",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4,
                      "src": "3175:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 341,
                      "name": "id",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 293,
                      "src": "3194:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "3175:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 343,
                  "nodeType": "ExpressionStatement",
                  "src": "3175:21:0"
                },
                {
                  "expression": {
                    "id": 351,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 344,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3206:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 346,
                        "indexExpression": {
                          "id": 345,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3213:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3206:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 347,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "area",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6,
                      "src": "3206:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 349,
                          "name": "area",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 295,
                          "src": "3240:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        ],
                        "id": 348,
                        "name": "stringToUint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "3227:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
                          "typeString": "function (string memory) pure returns (uint256)"
                        }
                      },
                      "id": 350,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3227:18:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3206:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 352,
                  "nodeType": "ExpressionStatement",
                  "src": "3206:39:0"
                },
                {
                  "expression": {
                    "id": 358,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 353,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3255:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 355,
                        "indexExpression": {
                          "id": 354,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3262:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3255:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 356,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votedForCandidate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10,
                      "src": "3255:31:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 357,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3289:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3255:39:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 359,
                  "nodeType": "ExpressionStatement",
                  "src": "3255:39:0"
                },
                {
                  "expression": {
                    "id": 365,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 360,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3304:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 362,
                        "indexExpression": {
                          "id": 361,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3311:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3304:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 363,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votedForParty",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 12,
                      "src": "3304:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 364,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3334:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3304:35:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 366,
                  "nodeType": "ExpressionStatement",
                  "src": "3304:35:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "313030303030303030303030303030",
                        "id": 370,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3364:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000000000000_by_1",
                          "typeString": "int_const 100000000000000"
                        },
                        "value": "100000000000000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_100000000000000_by_1",
                          "typeString": "int_const 100000000000000"
                        }
                      ],
                      "expression": {
                        "id": 367,
                        "name": "voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 291,
                        "src": "3349:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 369,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "3349:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 371,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3349:31:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 372,
                  "nodeType": "ExpressionStatement",
                  "src": "3349:31:0"
                },
                {
                  "expression": {
                    "id": 375,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 373,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "3390:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 374,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3405:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "3390:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 376,
                  "nodeType": "ExpressionStatement",
                  "src": "3390:16:0"
                }
              ]
            },
            "functionSelector": "f972c1c4",
            "id": 378,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "giveRightToVote",
            "nameLocation": "2678:15:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 291,
                  "mutability": "mutable",
                  "name": "voter",
                  "nameLocation": "2719:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 378,
                  "src": "2703:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 290,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2703:15:0",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 293,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "2748:2:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 378,
                  "src": "2734:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 292,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2734:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 295,
                  "mutability": "mutable",
                  "name": "area",
                  "nameLocation": "2774:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 378,
                  "src": "2760:18:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 294,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2760:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2693:91:0"
            },
            "returnParameters": {
              "id": 297,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2794:0:0"
            },
            "scope": 626,
            "src": "2669:744:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 425,
              "nodeType": "Block",
              "src": "3470:419:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 387,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 384,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3501:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "3501:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 386,
                          "name": "chairperson",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "3515:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3501:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c792063686169726d616e2063616e20676976652064656e6f756e636520726967687420746f20766f7465",
                        "id": 388,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3540:47:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_28e8435bf76fe9acc33cdb755c5bd33466a7368ff7b6abdde97cc6c89a8f8aea",
                          "typeString": "literal_string \"Only chairman can give denounce right to vote\""
                        },
                        "value": "Only chairman can give denounce right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_28e8435bf76fe9acc33cdb755c5bd33466a7368ff7b6abdde97cc6c89a8f8aea",
                          "typeString": "literal_string \"Only chairman can give denounce right to vote\""
                        }
                      ],
                      "id": 383,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3480:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3480:117:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 390,
                  "nodeType": "ExpressionStatement",
                  "src": "3480:117:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 402,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 396,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "3628:32:0",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 392,
                                "name": "voters",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "3629:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 394,
                              "indexExpression": {
                                "id": 393,
                                "name": "voter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 380,
                                "src": "3636:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3629:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 395,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "votedForCandidate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 10,
                            "src": "3629:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "id": 401,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "3664:28:0",
                          "subExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 397,
                                "name": "voters",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "3665:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                                  "typeString": "mapping(address => struct Voting.Voter storage ref)"
                                }
                              },
                              "id": 399,
                              "indexExpression": {
                                "id": 398,
                                "name": "voter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 380,
                                "src": "3672:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3665:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Voter_$13_storage",
                                "typeString": "struct Voting.Voter storage ref"
                              }
                            },
                            "id": 400,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "votedForParty",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 12,
                            "src": "3665:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3628:64:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520766f74657220616c726561647920766f746564",
                        "id": 403,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3706:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        },
                        "value": "The voter already voted"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_33a5c3098a641a199d2f11c6fb6477ffe28e5db5bb08ce0d5c60c00f5f2bac5b",
                          "typeString": "literal_string \"The voter already voted\""
                        }
                      ],
                      "id": 391,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3607:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 404,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3607:134:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 405,
                  "nodeType": "ExpressionStatement",
                  "src": "3607:134:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 407,
                            "name": "voters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 34,
                            "src": "3759:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                              "typeString": "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          "id": 409,
                          "indexExpression": {
                            "id": 408,
                            "name": "voter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 380,
                            "src": "3766:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3759:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage",
                            "typeString": "struct Voting.Voter storage ref"
                          }
                        },
                        "id": 410,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "3759:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "566f74657220646f65736e2774206861766520726967687420746f20766f7465",
                        "id": 411,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3782:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_71f8867ec7a526d1564968c50073693657ec877af00314443880e63ee9f37a01",
                          "typeString": "literal_string \"Voter doesn't have right to vote\""
                        },
                        "value": "Voter doesn't have right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_71f8867ec7a526d1564968c50073693657ec877af00314443880e63ee9f37a01",
                          "typeString": "literal_string \"Voter doesn't have right to vote\""
                        }
                      ],
                      "id": 406,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3751:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 412,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3751:66:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 413,
                  "nodeType": "ExpressionStatement",
                  "src": "3751:66:0"
                },
                {
                  "expression": {
                    "id": 419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 414,
                          "name": "voters",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 34,
                          "src": "3827:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                            "typeString": "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        "id": 416,
                        "indexExpression": {
                          "id": 415,
                          "name": "voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 380,
                          "src": "3834:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3827:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage",
                          "typeString": "struct Voting.Voter storage ref"
                        }
                      },
                      "id": 417,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "canVote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "3827:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 418,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3851:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "3827:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 420,
                  "nodeType": "ExpressionStatement",
                  "src": "3827:29:0"
                },
                {
                  "expression": {
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 421,
                      "name": "voter_count",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "3866:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 422,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3881:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "3866:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "3866:16:0"
                }
              ]
            },
            "functionSelector": "685a9dd8",
            "id": 426,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "removeRightToVote",
            "nameLocation": "3428:17:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 380,
                  "mutability": "mutable",
                  "name": "voter",
                  "nameLocation": "3454:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "3446:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 379,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3446:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3445:15:0"
            },
            "returnParameters": {
              "id": 382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3470:0:0"
            },
            "scope": 626,
            "src": "3419:470:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 476,
              "nodeType": "Block",
              "src": "3946:409:0",
              "statements": [
                {
                  "assignments": [
                    433
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 433,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "3970:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 476,
                      "src": "3956:20:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                        "typeString": "struct Voting.Voter"
                      },
                      "typeName": {
                        "id": 432,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 431,
                          "name": "Voter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 13,
                          "src": "3956:5:0"
                        },
                        "referencedDeclaration": 13,
                        "src": "3956:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 438,
                  "initialValue": {
                    "baseExpression": {
                      "id": 434,
                      "name": "voters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34,
                      "src": "3979:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                        "typeString": "mapping(address => struct Voting.Voter storage ref)"
                      }
                    },
                    "id": 437,
                    "indexExpression": {
                      "expression": {
                        "id": 435,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "3986:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 436,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "3986:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3979:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$13_storage",
                      "typeString": "struct Voting.Voter storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3956:41:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 440,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 433,
                          "src": "4015:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                            "typeString": "struct Voting.Voter storage pointer"
                          }
                        },
                        "id": 441,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "4015:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "486173206e6f20726967687420746f20766f7465",
                        "id": 442,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4031:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        },
                        "value": "Has no right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        }
                      ],
                      "id": 439,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4007:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 443,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4007:47:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 444,
                  "nodeType": "ExpressionStatement",
                  "src": "4007:47:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 448,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "4072:25:0",
                        "subExpression": {
                          "expression": {
                            "id": 446,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 433,
                            "src": "4073:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                              "typeString": "struct Voting.Voter storage pointer"
                            }
                          },
                          "id": 447,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "votedForCandidate",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 10,
                          "src": "4073:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920766f74656420666f722063616e646964617465",
                        "id": 449,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4099:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2acc0d30fb5ddb55cfba372d0e3a2c100522729d330fb7287fd1b66506e9915f",
                          "typeString": "literal_string \"already voted for candidate\""
                        },
                        "value": "already voted for candidate"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2acc0d30fb5ddb55cfba372d0e3a2c100522729d330fb7287fd1b66506e9915f",
                          "typeString": "literal_string \"already voted for candidate\""
                        }
                      ],
                      "id": 445,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4064:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 450,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4064:65:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 451,
                  "nodeType": "ExpressionStatement",
                  "src": "4064:65:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 459,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 453,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 433,
                            "src": "4160:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                              "typeString": "struct Voting.Voter storage pointer"
                            }
                          },
                          "id": 454,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "area",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 6,
                          "src": "4160:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 455,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41,
                              "src": "4175:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 457,
                            "indexExpression": {
                              "id": 456,
                              "name": "candidate",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 428,
                              "src": "4186:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4175:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Candidate_$27_storage",
                              "typeString": "struct Voting.Candidate storage ref"
                            }
                          },
                          "id": 458,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "area",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 24,
                          "src": "4175:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4160:41:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "63616e6e6f7420766f74652063616e64696461746520696e20746869732061726561",
                        "id": 460,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4215:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_10b35c958a026ea23c020728842dd9fa65b199afc0f8fa68e1b7d3c691bb87ad",
                          "typeString": "literal_string \"cannot vote candidate in this area\""
                        },
                        "value": "cannot vote candidate in this area"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_10b35c958a026ea23c020728842dd9fa65b199afc0f8fa68e1b7d3c691bb87ad",
                          "typeString": "literal_string \"cannot vote candidate in this area\""
                        }
                      ],
                      "id": 452,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4139:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4139:122:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 462,
                  "nodeType": "ExpressionStatement",
                  "src": "4139:122:0"
                },
                {
                  "expression": {
                    "id": 468,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 463,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41,
                          "src": "4271:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                            "typeString": "struct Voting.Candidate storage ref[] storage ref"
                          }
                        },
                        "id": 465,
                        "indexExpression": {
                          "id": 464,
                          "name": "candidate",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 428,
                          "src": "4282:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4271:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$27_storage",
                          "typeString": "struct Voting.Candidate storage ref"
                        }
                      },
                      "id": 466,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 26,
                      "src": "4271:31:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 467,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4306:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4271:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 469,
                  "nodeType": "ExpressionStatement",
                  "src": "4271:36:0"
                },
                {
                  "expression": {
                    "id": 474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 470,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 433,
                        "src": "4317:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter storage pointer"
                        }
                      },
                      "id": 472,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votedForCandidate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10,
                      "src": "4317:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 473,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4344:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4317:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 475,
                  "nodeType": "ExpressionStatement",
                  "src": "4317:31:0"
                }
              ]
            },
            "functionSelector": "8c08a4dc",
            "id": 477,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voteCandidate",
            "nameLocation": "3904:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 429,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 428,
                  "mutability": "mutable",
                  "name": "candidate",
                  "nameLocation": "3926:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 477,
                  "src": "3918:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 427,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3918:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3917:19:0"
            },
            "returnParameters": {
              "id": 430,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3946:0:0"
            },
            "scope": 626,
            "src": "3895:460:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 516,
              "nodeType": "Block",
              "src": "4404:262:0",
              "statements": [
                {
                  "assignments": [
                    484
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 484,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "4428:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 516,
                      "src": "4414:20:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                        "typeString": "struct Voting.Voter"
                      },
                      "typeName": {
                        "id": 483,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 482,
                          "name": "Voter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 13,
                          "src": "4414:5:0"
                        },
                        "referencedDeclaration": 13,
                        "src": "4414:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 489,
                  "initialValue": {
                    "baseExpression": {
                      "id": 485,
                      "name": "voters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34,
                      "src": "4437:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$13_storage_$",
                        "typeString": "mapping(address => struct Voting.Voter storage ref)"
                      }
                    },
                    "id": 488,
                    "indexExpression": {
                      "expression": {
                        "id": 486,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4444:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 487,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4444:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4437:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$13_storage",
                      "typeString": "struct Voting.Voter storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4414:41:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 491,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 484,
                          "src": "4473:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                            "typeString": "struct Voting.Voter storage pointer"
                          }
                        },
                        "id": 492,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "canVote",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 8,
                        "src": "4473:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "486173206e6f20726967687420746f20766f7465",
                        "id": 493,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4489:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        },
                        "value": "Has no right to vote"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0dc527e8fa9b76c996eb5eda9ddb749b21540f5509781b94e1e37f7027e7f50e",
                          "typeString": "literal_string \"Has no right to vote\""
                        }
                      ],
                      "id": 490,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4465:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4465:47:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 495,
                  "nodeType": "ExpressionStatement",
                  "src": "4465:47:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 499,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "4530:21:0",
                        "subExpression": {
                          "expression": {
                            "id": 497,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 484,
                            "src": "4531:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                              "typeString": "struct Voting.Voter storage pointer"
                            }
                          },
                          "id": 498,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "votedForParty",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 12,
                          "src": "4531:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "616c726561647920766f74656420666f72207061727479",
                        "id": 500,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4553:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3fa65f686974a9b4178cc1bad10771e42e98ac4b1ba42a0c415211e737a438ae",
                          "typeString": "literal_string \"already voted for party\""
                        },
                        "value": "already voted for party"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3fa65f686974a9b4178cc1bad10771e42e98ac4b1ba42a0c415211e737a438ae",
                          "typeString": "literal_string \"already voted for party\""
                        }
                      ],
                      "id": 496,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4522:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4522:57:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 502,
                  "nodeType": "ExpressionStatement",
                  "src": "4522:57:0"
                },
                {
                  "expression": {
                    "id": 508,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 503,
                          "name": "parties",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 45,
                          "src": "4589:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                            "typeString": "struct Voting.Party storage ref[] storage ref"
                          }
                        },
                        "id": 505,
                        "indexExpression": {
                          "id": 504,
                          "name": "party",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 479,
                          "src": "4597:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4589:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Party_$18_storage",
                          "typeString": "struct Voting.Party storage ref"
                        }
                      },
                      "id": 506,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17,
                      "src": "4589:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 507,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4617:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "4589:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 509,
                  "nodeType": "ExpressionStatement",
                  "src": "4589:29:0"
                },
                {
                  "expression": {
                    "id": 514,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 510,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 484,
                        "src": "4628:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$13_storage_ptr",
                          "typeString": "struct Voting.Voter storage pointer"
                        }
                      },
                      "id": 512,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votedForCandidate",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10,
                      "src": "4628:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 513,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4655:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "4628:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 515,
                  "nodeType": "ExpressionStatement",
                  "src": "4628:31:0"
                }
              ]
            },
            "functionSelector": "04cee9b3",
            "id": 517,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voteParty",
            "nameLocation": "4370:9:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 480,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 479,
                  "mutability": "mutable",
                  "name": "party",
                  "nameLocation": "4388:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 517,
                  "src": "4380:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 478,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4380:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4379:15:0"
            },
            "returnParameters": {
              "id": 481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4404:0:0"
            },
            "scope": 626,
            "src": "4361:305:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 558,
              "nodeType": "Block",
              "src": "4776:288:0",
              "statements": [
                {
                  "assignments": [
                    523
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 523,
                      "mutability": "mutable",
                      "name": "winningVoteCount",
                      "nameLocation": "4794:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 558,
                      "src": "4786:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 522,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4786:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 525,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 524,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4813:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4786:28:0"
                },
                {
                  "body": {
                    "id": 556,
                    "nodeType": "Block",
                    "src": "4872:186:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 542,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 537,
                                "name": "candidates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 41,
                                "src": "4890:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                  "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                }
                              },
                              "id": 539,
                              "indexExpression": {
                                "id": 538,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 527,
                                "src": "4901:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4890:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$27_storage",
                                "typeString": "struct Voting.Candidate storage ref"
                              }
                            },
                            "id": 540,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voteCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 26,
                            "src": "4890:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 541,
                            "name": "winningVoteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 523,
                            "src": "4916:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4890:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 555,
                        "nodeType": "IfStatement",
                        "src": "4886:162:0",
                        "trueBody": {
                          "id": 554,
                          "nodeType": "Block",
                          "src": "4934:114:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 548,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 543,
                                  "name": "winningVoteCount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 523,
                                  "src": "4952:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 544,
                                      "name": "candidates",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 41,
                                      "src": "4971:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                                        "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                      }
                                    },
                                    "id": 546,
                                    "indexExpression": {
                                      "id": 545,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 527,
                                      "src": "4982:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4971:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Candidate_$27_storage",
                                      "typeString": "struct Voting.Candidate storage ref"
                                    }
                                  },
                                  "id": 547,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "voteCount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 26,
                                  "src": "4971:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4952:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 549,
                              "nodeType": "ExpressionStatement",
                              "src": "4952:42:0"
                            },
                            {
                              "expression": {
                                "id": 552,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 550,
                                  "name": "winningCandidate_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 520,
                                  "src": "5012:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 551,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 527,
                                  "src": "5032:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5012:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 553,
                              "nodeType": "ExpressionStatement",
                              "src": "5012:21:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 533,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 530,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 527,
                      "src": "4844:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 531,
                        "name": "candidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "4848:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$27_storage_$dyn_storage",
                          "typeString": "struct Voting.Candidate storage ref[] storage ref"
                        }
                      },
                      "id": 532,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "4848:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4844:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 557,
                  "initializationExpression": {
                    "assignments": [
                      527
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 527,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "4837:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 557,
                        "src": "4829:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 526,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4829:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 529,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 528,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4841:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "4829:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 535,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "4867:3:0",
                      "subExpression": {
                        "id": 534,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 527,
                        "src": "4867:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 536,
                    "nodeType": "ExpressionStatement",
                    "src": "4867:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "4824:234:0"
                }
              ]
            },
            "functionSelector": "d28178d7",
            "id": 559,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "winningCandidate",
            "nameLocation": "4681:16:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 518,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4697:2:0"
            },
            "returnParameters": {
              "id": 521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 520,
                  "mutability": "mutable",
                  "name": "winningCandidate_",
                  "nameLocation": "4753:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "4745:25:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 519,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4745:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4744:27:0"
            },
            "scope": 626,
            "src": "4672:392:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 600,
              "nodeType": "Block",
              "src": "5138:275:0",
              "statements": [
                {
                  "assignments": [
                    565
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 565,
                      "mutability": "mutable",
                      "name": "winningVoteCount",
                      "nameLocation": "5156:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 600,
                      "src": "5148:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 564,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5148:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 567,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 566,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5175:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5148:28:0"
                },
                {
                  "body": {
                    "id": 598,
                    "nodeType": "Block",
                    "src": "5231:176:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 584,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 579,
                                "name": "parties",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 45,
                                "src": "5249:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                  "typeString": "struct Voting.Party storage ref[] storage ref"
                                }
                              },
                              "id": 581,
                              "indexExpression": {
                                "id": 580,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 569,
                                "src": "5257:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5249:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Party_$18_storage",
                                "typeString": "struct Voting.Party storage ref"
                              }
                            },
                            "id": 582,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voteCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17,
                            "src": "5249:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 583,
                            "name": "winningVoteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 565,
                            "src": "5272:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5249:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 597,
                        "nodeType": "IfStatement",
                        "src": "5245:152:0",
                        "trueBody": {
                          "id": 596,
                          "nodeType": "Block",
                          "src": "5290:107:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 590,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 585,
                                  "name": "winningVoteCount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 565,
                                  "src": "5308:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 586,
                                      "name": "parties",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 45,
                                      "src": "5327:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                                        "typeString": "struct Voting.Party storage ref[] storage ref"
                                      }
                                    },
                                    "id": 588,
                                    "indexExpression": {
                                      "id": 587,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 569,
                                      "src": "5335:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5327:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Party_$18_storage",
                                      "typeString": "struct Voting.Party storage ref"
                                    }
                                  },
                                  "id": 589,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "voteCount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 17,
                                  "src": "5327:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5308:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 591,
                              "nodeType": "ExpressionStatement",
                              "src": "5308:39:0"
                            },
                            {
                              "expression": {
                                "id": 594,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 592,
                                  "name": "winningParty_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 562,
                                  "src": "5365:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 593,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 569,
                                  "src": "5381:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5365:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 595,
                              "nodeType": "ExpressionStatement",
                              "src": "5365:17:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 575,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 572,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 569,
                      "src": "5206:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 573,
                        "name": "parties",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45,
                        "src": "5210:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Party_$18_storage_$dyn_storage",
                          "typeString": "struct Voting.Party storage ref[] storage ref"
                        }
                      },
                      "id": 574,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "5210:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5206:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 599,
                  "initializationExpression": {
                    "assignments": [
                      569
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 569,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "5199:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 599,
                        "src": "5191:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 568,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5191:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 571,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 570,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5203:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "5191:13:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 577,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "5226:3:0",
                      "subExpression": {
                        "id": 576,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 569,
                        "src": "5226:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 578,
                    "nodeType": "ExpressionStatement",
                    "src": "5226:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "5186:221:0"
                }
              ]
            },
            "functionSelector": "ae315fe4",
            "id": 601,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "winningParty",
            "nameLocation": "5079:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 560,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5091:2:0"
            },
            "returnParameters": {
              "id": 563,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 562,
                  "mutability": "mutable",
                  "name": "winningParty_",
                  "nameLocation": "5123:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 601,
                  "src": "5115:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 561,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5115:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5114:23:0"
            },
            "scope": 626,
            "src": "5070:343:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 608,
              "nodeType": "Block",
              "src": "5473:35:0",
              "statements": [
                {
                  "expression": {
                    "id": 606,
                    "name": "voter_count",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 37,
                    "src": "5490:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 605,
                  "id": 607,
                  "nodeType": "Return",
                  "src": "5483:18:0"
                }
              ]
            },
            "functionSelector": "40dec728",
            "id": 609,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voters_count",
            "nameLocation": "5428:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 602,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5440:2:0"
            },
            "returnParameters": {
              "id": 605,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 604,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 609,
                  "src": "5464:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 603,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5464:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5463:9:0"
            },
            "scope": 626,
            "src": "5419:89:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 612,
              "nodeType": "Block",
              "src": "5545:2:0",
              "statements": []
            },
            "functionSelector": "b60d4288",
            "id": 613,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fund",
            "nameLocation": "5523:4:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 610,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5527:2:0"
            },
            "returnParameters": {
              "id": 611,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5545:0:0"
            },
            "scope": 626,
            "src": "5514:33:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 624,
              "nodeType": "Block",
              "src": "5606:45:0",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 620,
                          "name": "this",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -28,
                          "src": "5631:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Voting_$626",
                            "typeString": "contract Voting"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_Voting_$626",
                            "typeString": "contract Voting"
                          }
                        ],
                        "id": 619,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "5623:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 618,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5623:7:0",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 621,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5623:13:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "src": "5623:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 617,
                  "id": 623,
                  "nodeType": "Return",
                  "src": "5616:28:0"
                }
              ]
            },
            "functionSelector": "c1cfb99a",
            "id": 625,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "get_balance",
            "nameLocation": "5562:11:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 614,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5573:2:0"
            },
            "returnParameters": {
              "id": 617,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 616,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 625,
                  "src": "5597:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 615,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5597:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5596:9:0"
            },
            "scope": 626,
            "src": "5553:98:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 627,
        "src": "89:5564:0",
        "usedErrors": []
      }
    ],
    "src": "36:5618:0"
  },
  "bytecode": "",
  "bytecodeSha1": "a515288d9a20324d6d81953aa489e7b9d5566536",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "Voting",
  "coverageMap": {
    "branches": {
      "0": {
        "Voting.addCandidates": {
          "48": [
            1988,
            2013,
            true
          ]
        },
        "Voting.giveRightToVote": {
          "51": [
            2825,
            2850,
            true
          ],
          "52": [
            2948,
            2979,
            true
          ],
          "53": [
            2984,
            3011,
            true
          ],
          "54": [
            3078,
            3100,
            true
          ]
        },
        "Voting.removeRightToVote": {
          "41": [
            3501,
            3526,
            true
          ],
          "42": [
            3629,
            3660,
            true
          ],
          "43": [
            3665,
            3692,
            true
          ],
          "44": [
            3759,
            3780,
            true
          ]
        },
        "Voting.voteCandidate": {
          "45": [
            4015,
            4029,
            true
          ],
          "46": [
            4072,
            4097,
            true
          ],
          "47": [
            4160,
            4201,
            true
          ]
        },
        "Voting.voteParty": {
          "39": [
            4473,
            4487,
            true
          ],
          "40": [
            4530,
            4551,
            true
          ]
        },
        "Voting.winningCandidate": {
          "50": [
            4890,
            4932,
            false
          ]
        },
        "Voting.winningParty": {
          "49": [
            5249,
            5288,
            false
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Voting.addCandidates": {
          "19": [
            1967,
            2079
          ],
          "20": [
            2160,
            2444
          ],
          "21": [
            2141,
            2144
          ]
        },
        "Voting.getCandidates": {
          "6": [
            2543,
            2560
          ]
        },
        "Voting.getParties": {
          "22": [
            2642,
            2656
          ]
        },
        "Voting.get_balance": {
          "1": [
            5616,
            5644
          ]
        },
        "Voting.giveRightToVote": {
          "29": [
            2804,
            2916
          ],
          "30": [
            2926,
            3060
          ],
          "31": [
            3070,
            3127
          ],
          "32": [
            3137,
            3165
          ],
          "33": [
            3175,
            3196
          ],
          "34": [
            3206,
            3245
          ],
          "35": [
            3255,
            3294
          ],
          "36": [
            3304,
            3339
          ],
          "37": [
            3349,
            3380
          ],
          "38": [
            3390,
            3406
          ]
        },
        "Voting.removeRightToVote": {
          "10": [
            3480,
            3597
          ],
          "11": [
            3607,
            3741
          ],
          "12": [
            3751,
            3817
          ],
          "13": [
            3827,
            3856
          ],
          "14": [
            3866,
            3882
          ]
        },
        "Voting.stringToUint": {
          "7": [
            1802,
            1842
          ],
          "8": [
            1603,
            1606
          ],
          "9": [
            1862,
            1872
          ]
        },
        "Voting.voteCandidate": {
          "15": [
            4007,
            4054
          ],
          "16": [
            4064,
            4129
          ],
          "17": [
            4139,
            4261
          ],
          "18": [
            4271,
            4307
          ]
        },
        "Voting.voteParty": {
          "2": [
            4465,
            4512
          ],
          "3": [
            4522,
            4579
          ],
          "4": [
            4589,
            4618
          ],
          "5": [
            4628,
            4659
          ]
        },
        "Voting.voters_count": {
          "0": [
            5483,
            5501
          ]
        },
        "Voting.winningCandidate": {
          "26": [
            4952,
            4994
          ],
          "27": [
            5012,
            5033
          ],
          "28": [
            4867,
            4870
          ]
        },
        "Voting.winningParty": {
          "23": [
            5308,
            5347
          ],
          "24": [
            5365,
            5382
          ],
          "25": [
            5226,
            5229
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "6080604052600436106100fe5760003560e01c80638c08a4dc11610095578063ae315fe411610064578063ae315fe4146102dc578063b60d428814610123578063c1cfb99a146102f1578063d28178d714610304578063f972c1c41461031957600080fd5b80638c08a4dc146102495780639f6680a814610269578063a3ec138d14610289578063a8311aa8146102ba57600080fd5b80633477ee2e116100d15780633477ee2e146101b657806340dec728146101e6578063685a9dd8146101fb57806370651a181461021b57600080fd5b806304cee9b31461010357806306a49fce146101255780631bd95155146101505780632e4176cf1461017e575b600080fd5b34801561010f57600080fd5b5061012361011e366004611228565b610339565b005b34801561013157600080fd5b5061013a610440565b604051610147919061128e565b60405180910390f35b34801561015c57600080fd5b5061017061016b366004611409565b6105d7565b604051908152602001610147565b34801561018a57600080fd5b5060005461019e906001600160a01b031681565b6040516001600160a01b039091168152602001610147565b3480156101c257600080fd5b506101d66101d1366004611228565b61067b565b6040516101479493929190611446565b3480156101f257600080fd5b50600254610170565b34801561020757600080fd5b50610123610216366004611497565b6107cb565b34801561022757600080fd5b5061023b610236366004611228565b61097e565b6040516101479291906114bb565b34801561025557600080fd5b50610123610264366004611228565b610a3a565b34801561027557600080fd5b506101236102843660046114dd565b610ba5565b34801561029557600080fd5b506102a96102a4366004611497565b610d07565b6040516101479594939291906115f4565b3480156102c657600080fd5b506102cf610dc6565b604051610147919061162d565b3480156102e857600080fd5b50610170610eb8565b3480156102fd57600080fd5b5047610170565b34801561031057600080fd5b50610170610f35565b34801561032557600080fd5b50610123610334366004611695565b610fad565b336000908152600160205260409020600281015460ff166103985760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b60448201526064015b60405180910390fd5b600281015462010000900460ff16156103f35760405162461bcd60e51b815260206004820152601760248201527f616c726561647920766f74656420666f72207061727479000000000000000000604482015260640161038f565b6001600483815481106104085761040861170b565b906000526020600020906002020160010160008282546104289190611737565b9091555050600201805461ff00191661010017905550565b60606003805480602002602001604051908101604052809291908181526020016000905b828210156105ce57838290600052602060002090600402016040518060800160405290816000820180546104979061174f565b80601f01602080910402602001604051908101604052809291908181526020018280546104c39061174f565b80156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b505050505081526020016001820180546105299061174f565b80601f01602080910402602001604051908101604052809291908181526020018280546105559061174f565b80156105a25780601f10610577576101008083540402835291602001916105a2565b820191906000526020600020905b81548152906001019060200180831161058557829003601f168201915b505050505081526020016002820154815260200160038201548152505081526020019060010190610464565b50505050905090565b60008082815b81518110156106725760008183516105f5919061178a565b9050600083838151811061060b5761060b61170b565b01602001516001600160f81b03198116915060f81c600061062d60308361178a565b905061063a60018561178a565b61064590600a611887565b61064f9082611893565b6106599088611737565b965050505050808061066a906118b2565b9150506105dd565b50909392505050565b6003818154811061068b57600080fd5b90600052602060002090600402016000915090508060000180546106ae9061174f565b80601f01602080910402602001604051908101604052809291908181526020018280546106da9061174f565b80156107275780601f106106fc57610100808354040283529160200191610727565b820191906000526020600020905b81548152906001019060200180831161070a57829003601f168201915b50505050509080600101805461073c9061174f565b80601f01602080910402602001604051908101604052809291908181526020018280546107689061174f565b80156107b55780601f1061078a576101008083540402835291602001916107b5565b820191906000526020600020905b81548152906001019060200180831161079857829003601f168201915b5050505050908060020154908060030154905084565b6000546001600160a01b0316331461083b5760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c792063686169726d616e2063616e20676976652064656e6f756e63652060448201526c726967687420746f20766f746560981b606482015260840161038f565b6001600160a01b038116600090815260016020526040902060020154610100900460ff16158061088d57506001600160a01b03811660009081526001602052604090206002015462010000900460ff16155b6108d35760405162461bcd60e51b8152602060048201526017602482015276151a19481d9bdd195c88185b1c9958591e481d9bdd1959604a1b604482015260640161038f565b6001600160a01b03811660009081526001602052604090206002015460ff1661093e5760405162461bcd60e51b815260206004820181905260248201527f566f74657220646f65736e2774206861766520726967687420746f20766f7465604482015260640161038f565b6001600160a01b038116600090815260016020819052604082206002908101805460ff1916905580549192909161097690849061178a565b909155505050565b6004818154811061098e57600080fd5b90600052602060002090600202016000915090508060000180546109b19061174f565b80601f01602080910402602001604051908101604052809291908181526020018280546109dd9061174f565b8015610a2a5780601f106109ff57610100808354040283529160200191610a2a565b820191906000526020600020905b815481529060010190602001808311610a0d57829003601f168201915b5050505050908060010154905082565b336000908152600160205260409020600281015460ff16610a945760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b604482015260640161038f565b6002810154610100900460ff1615610aee5760405162461bcd60e51b815260206004820152601b60248201527f616c726561647920766f74656420666f722063616e6469646174650000000000604482015260640161038f565b60038281548110610b0157610b0161170b565b906000526020600020906004020160020154816001015414610b705760405162461bcd60e51b815260206004820152602260248201527f63616e6e6f7420766f74652063616e64696461746520696e2074686973206172604482015261656160f01b606482015260840161038f565b600160038381548110610b8557610b8561170b565b906000526020600020906004020160030160008282546104289190611737565b6000546001600160a01b03163314610bcf5760405162461bcd60e51b815260040161038f906118cd565b60005b8151811015610d035760036040518060800160405280848481518110610bfa57610bfa61170b565b6020026020010151600060038110610c1457610c1461170b565b60200201518152602001848481518110610c3057610c3061170b565b6020026020010151600160038110610c4a57610c4a61170b565b60200201518152602001610c8d858581518110610c6957610c6961170b565b6020026020010151600260038110610c8357610c8361170b565b60200201516105d7565b815260006020918201819052835460018101855593815281902082518051939460040290910192610cc1928492019061118f565b506020828101518051610cda926001850192019061118f565b506040820151600282015560609091015160039091015580610cfb816118b2565b915050610bd2565b5050565b600160205260009081526040902080548190610d229061174f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4e9061174f565b8015610d9b5780601f10610d7057610100808354040283529160200191610d9b565b820191906000526020600020905b815481529060010190602001808311610d7e57829003601f168201915b50505050600183015460029093015491929160ff808216925061010082048116916201000090041685565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156105ce5783829060005260206000209060020201604051806040016040529081600082018054610e1d9061174f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e499061174f565b8015610e965780601f10610e6b57610100808354040283529160200191610e96565b820191906000526020600020905b815481529060010190602001808311610e7957829003601f168201915b5050505050815260200160018201548152505081526020019060010190610dea565b600080805b600454811015610f30578160048281548110610edb57610edb61170b565b9060005260206000209060020201600101541115610f1e5760048181548110610f0657610f0661170b565b90600052602060002090600202016001015491508092505b80610f28816118b2565b915050610ebd565b505090565b600080805b600354811015610f30578160038281548110610f5857610f5861170b565b9060005260206000209060040201600301541115610f9b5760038181548110610f8357610f8361170b565b90600052602060002090600402016003015491508092505b80610fa5816118b2565b915050610f3a565b6000546001600160a01b03163314610fd75760405162461bcd60e51b815260040161038f906118cd565b6001600160a01b038316600090815260016020526040902060020154610100900460ff16158061102957506001600160a01b03831660009081526001602052604090206002015462010000900460ff16155b61106f5760405162461bcd60e51b8152602060048201526017602482015276151a19481d9bdd195c88185b1c9958591e481d9bdd1959604a1b604482015260640161038f565b6001600160a01b03831660009081526001602052604090206002015460ff16156110d45760405162461bcd60e51b8152602060048201526016602482015275566f7465722063616e20616c726561647920766f746560501b604482015260640161038f565b6001600160a01b038316600090815260016020818152604090922060028101805460ff1916909217909155835161110d9285019061118f565b50611117816105d7565b6001600160a01b038416600081815260016020819052604080832091820194909455600201805462ffff00191690559151909190655af3107a40009082818181858883f19350505050158015611171573d6000803e3d6000fd5b506001600260008282546111859190611737565b9091555050505050565b82805461119b9061174f565b90600052602060002090601f0160209004810192826111bd5760008555611203565b82601f106111d657805160ff1916838001178555611203565b82800160010185558215611203579182015b828111156112035782518255916020019190600101906111e8565b5061120f929150611213565b5090565b5b8082111561120f5760008155600101611214565b60006020828403121561123a57600080fd5b5035919050565b6000815180845260005b818110156112675760208185018101518683018201520161124b565b81811115611279576000602083870101525b50601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561131b57603f198984030185528151608081518186526112db82870182611241565b915050888201518582038a8701526112f38282611241565b838a0151878b01526060938401519390960192909252505093860193908601906001016112b5565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561136257611362611329565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561139157611391611329565b604052919050565b600082601f8301126113aa57600080fd5b813567ffffffffffffffff8111156113c4576113c4611329565b6113d7601f8201601f1916602001611368565b8181528460208386010111156113ec57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561141b57600080fd5b813567ffffffffffffffff81111561143257600080fd5b61143e84828501611399565b949350505050565b6080815260006114596080830187611241565b828103602084015261146b8187611241565b604084019590955250506060015292915050565b6001600160a01b038116811461149457600080fd5b50565b6000602082840312156114a957600080fd5b81356114b48161147f565b9392505050565b6040815260006114ce6040830185611241565b90508260208301529392505050565b600060208083850312156114f057600080fd5b67ffffffffffffffff808435111561150757600080fd5b8335840185601f82011261151a57600080fd5b80358281111561152c5761152c611329565b8060051b61153b858201611368565b918252828101850191858101908984111561155557600080fd5b86850192505b838310156115e757858335111561157157600080fd5b823585018a603f82011261158457600080fd5b61158c61133f565b80608083018d81111561159e57600080fd5b8a84015b818110156115d4578a813511156115b857600080fd5b6115c78f8d8335880101611399565b8452928b01928b016115a2565b505084525050918601919086019061155b565b9998505050505050505050565b60a08152600061160760a0830188611241565b602083019690965250921515604084015290151560608301521515608090910152919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561131b57888303603f190185528151805187855261167888860182611241565b918901519489019490945294870194925090860190600101611654565b6000806000606084860312156116aa57600080fd5b83356116b58161147f565b9250602084013567ffffffffffffffff808211156116d257600080fd5b6116de87838801611399565b935060408601359150808211156116f457600080fd5b5061170186828701611399565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561174a5761174a611721565b500190565b600181811c9082168061176357607f821691505b6020821081141561178457634e487b7160e01b600052602260045260246000fd5b50919050565b60008282101561179c5761179c611721565b500390565b600181815b808511156117dc5781600019048211156117c2576117c2611721565b808516156117cf57918102915b93841c93908002906117a6565b509250929050565b6000826117f357506001611881565b8161180057506000611881565b816001811461181657600281146118205761183c565b6001915050611881565b60ff84111561183157611831611721565b50506001821b611881565b5060208310610133831016604e8410600b841016171561185f575081810a611881565b61186983836117a1565b806000190482111561187d5761187d611721565b0290505b92915050565b60006114b483836117e4565b60008160001904831182151516156118ad576118ad611721565b500290565b60006000198214156118c6576118c6611721565b5060010190565b60208082526028908201527f4f6e6c792063686169726d616e2063616e20676976652074686520726967687460408201526720746f20766f746560c01b60608201526080019056fea26469706673582212201eb62a0c6eef37ed36f34e33d9a36a833f9fa78394239be365552cc988ddc55564736f6c634300080c0033",
  "deployedSourceMap": "89:5564:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4361:305;;;;;;;;;;-1:-1:-1;4361:305:0;;;;;:::i;:::-;;:::i;:::-;;2467:100;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1366:513;;;;;;;;;;-1:-1:-1;1366:513:0;;;;;:::i;:::-;;:::i;:::-;;;3706:25:1;;;3694:2;3679:18;1366:513:0;3560:177:1;456:26:0;;;;;;;;;;-1:-1:-1;456:26:0;;;;-1:-1:-1;;;;;456:26:0;;;;;;-1:-1:-1;;;;;3906:32:1;;;3888:51;;3876:2;3861:18;456:26:0;3742:203:1;562:29:0;;;;;;;;;;-1:-1:-1;562:29:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;5419:89::-;;;;;;;;;;-1:-1:-1;5490:11:0;;5419:89;;3419:470;;;;;;;;;;-1:-1:-1;3419:470:0;;;;;:::i;:::-;;:::i;597:22::-;;;;;;;;;;-1:-1:-1;597:22:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;3895:460::-;;;;;;;;;;-1:-1:-1;3895:460:0;;;;;:::i;:::-;;:::i;1885:576::-;;;;;;;;;;-1:-1:-1;1885:576:0;;;;;:::i;:::-;;:::i;488:39::-;;;;;;;;;;-1:-1:-1;488:39:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;2573:90::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;5070:343::-;;;;;;;;;;;;;:::i;5553:98::-;;;;;;;;;;-1:-1:-1;5623:21:0;5553:98;;4672:392;;;;;;;;;;;;;:::i;2669:744::-;;;;;;;;;;-1:-1:-1;2669:744:0;;;;;:::i;:::-;;:::i;4361:305::-;4444:10;4414:20;4437:18;;;:6;:18;;;;;4473:14;;;;;;4465:47;;;;-1:-1:-1;;;4465:47:0;;9299:2:1;4465:47:0;;;9281:21:1;9338:2;9318:18;;;9311:30;-1:-1:-1;;;9357:18:1;;;9350:50;9417:18;;4465:47:0;;;;;;;;;4531:20;;;;;;;;;4530:21;4522:57;;;;-1:-1:-1;;;4522:57:0;;9648:2:1;4522:57:0;;;9630:21:1;9687:2;9667:18;;;9660:30;9726:25;9706:18;;;9699:53;9769:18;;4522:57:0;9446:347:1;4522:57:0;4617:1;4589:7;4597:5;4589:14;;;;;;;;:::i;:::-;;;;;;;;;;;:24;;;:29;;;;;;;:::i;:::-;;;;-1:-1:-1;;4628:24:0;;:31;;-1:-1:-1;;4628:31:0;;;;;-1:-1:-1;4361:305:0:o;2467:100::-;2513:18;2550:10;2543:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2467:100;:::o;1366:513::-;1458:7;;1539:9;1458:7;1559:294;1583:11;:18;1579:1;:22;1559:294;;;1622:11;1657:1;1636:11;:18;:22;;;;:::i;:::-;1622:36;;1672:11;1686;1698:1;1686:14;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;1686:14:0;;;-1:-1:-1;1686:14:0;;1714:10;1767:20;1782:4;1686:14;1767:20;:::i;:::-;1752:35;-1:-1:-1;1832:7:0;1838:1;1832:3;:7;:::i;:::-;1827:13;;:2;:13;:::i;:::-;1810:31;;1818:4;1810:31;:::i;:::-;1802:40;;;;:::i;:::-;;;1608:245;;;;1603:3;;;;;:::i;:::-;;;;1559:294;;;-1:-1:-1;1869:3:0;;1366:513;-1:-1:-1;;;1366:513:0:o;562:29::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3419:470::-;3515:11;;-1:-1:-1;;;;;3515:11:0;3501:10;:25;3480:117;;;;-1:-1:-1;;;3480:117:0;;12599:2:1;3480:117:0;;;12581:21:1;12638:2;12618:18;;;12611:30;12677:34;12657:18;;;12650:62;-1:-1:-1;;;12728:18:1;;;12721:43;12781:19;;3480:117:0;12397:409:1;3480:117:0;-1:-1:-1;;;;;3629:13:0;;;;;;:6;:13;;;;;:31;;;;;;;;3628:32;;:64;;-1:-1:-1;;;;;;3665:13:0;;;;;;:6;:13;;;;;:27;;;;;;;;3664:28;3628:64;3607:134;;;;-1:-1:-1;;;3607:134:0;;13013:2:1;3607:134:0;;;12995:21:1;13052:2;13032:18;;;13025:30;-1:-1:-1;;;13071:18:1;;;13064:53;13134:18;;3607:134:0;12811:347:1;3607:134:0;-1:-1:-1;;;;;3759:13:0;;;;;;:6;:13;;;;;:21;;;;;3751:66;;;;-1:-1:-1;;;3751:66:0;;13365:2:1;3751:66:0;;;13347:21:1;;;13384:18;;;13377:30;13443:34;13423:18;;;13416:62;13495:18;;3751:66:0;13163:356:1;3751:66:0;-1:-1:-1;;;;;3827:13:0;;3851:5;3827:13;;;:6;:13;;;;;;;:21;;;;:29;;-1:-1:-1;;3827:29:0;;;3866:16;;3827:6;;:21;;3866:16;;3827:6;;3866:16;:::i;:::-;;;;-1:-1:-1;;;3419:470:0:o;597:22::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3895:460::-;3986:10;3956:20;3979:18;;;:6;:18;;;;;4015:14;;;;;;4007:47;;;;-1:-1:-1;;;4007:47:0;;9299:2:1;4007:47:0;;;9281:21:1;9338:2;9318:18;;;9311:30;-1:-1:-1;;;9357:18:1;;;9350:50;9417:18;;4007:47:0;9097:344:1;4007:47:0;4073:24;;;;;;;;;4072:25;4064:65;;;;-1:-1:-1;;;4064:65:0;;13726:2:1;4064:65:0;;;13708:21:1;13765:2;13745:18;;;13738:30;13804:29;13784:18;;;13777:57;13851:18;;4064:65:0;13524:351:1;4064:65:0;4175:10;4186:9;4175:21;;;;;;;;:::i;:::-;;;;;;;;;;;:26;;;4160:6;:11;;;:41;4139:122;;;;-1:-1:-1;;;4139:122:0;;14082:2:1;4139:122:0;;;14064:21:1;14121:2;14101:18;;;14094:30;14160:34;14140:18;;;14133:62;-1:-1:-1;;;14211:18:1;;;14204:32;14253:19;;4139:122:0;13880:398:1;4139:122:0;4306:1;4271:10;4282:9;4271:21;;;;;;;;:::i;:::-;;;;;;;;;;;:31;;;:36;;;;;;;:::i;1885:576::-;2002:11;;-1:-1:-1;;;;;2002:11:0;1988:10;:25;1967:112;;;;-1:-1:-1;;;1967:112:0;;;;;;;:::i;:::-;2094:9;2089:366;2113:19;:26;2109:1;:30;2089:366;;;2160:10;2193:237;;;;;;;;2231:19;2251:1;2231:22;;;;;;;;:::i;:::-;;;;;;;2254:1;2231:25;;;;;;;:::i;:::-;;;;;2193:237;;;;2285:19;2305:1;2285:22;;;;;;;;:::i;:::-;;;;;;;2308:1;2285:25;;;;;;;:::i;:::-;;;;;2193:237;;;;2338:39;2351:19;2371:1;2351:22;;;;;;;;:::i;:::-;;;;;;;2374:1;2351:25;;;;;;;:::i;:::-;;;;;2338:12;:39::i;:::-;2193:237;;2410:1;2193:237;;;;;;;2160:284;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2160:284:0;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2160:284:0;;;;;;;;;;;;;;;;;;2141:3;;;;:::i;:::-;;;;2089:366;;;;1885:576;:::o;488:39::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;488:39:0;;;;;;;;;;;;;;;;;-1:-1:-1;488:39:0;;;;;;;;;;;:::o;2573:90::-;2616:14;2649:7;2642:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5070:343;5115:21;;;5186:221;5210:7;:14;5206:18;;5186:221;;;5272:16;5249:7;5257:1;5249:10;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;:39;5245:152;;;5327:7;5335:1;5327:10;;;;;;;;:::i;:::-;;;;;;;;;;;:20;;;5308:39;;5381:1;5365:17;;5245:152;5226:3;;;;:::i;:::-;;;;5186:221;;;;5138:275;5070:343;:::o;4672:392::-;4745:25;;;4824:234;4848:10;:17;4844:21;;4824:234;;;4916:16;4890:10;4901:1;4890:13;;;;;;;;:::i;:::-;;;;;;;;;;;:23;;;:42;4886:162;;;4971:10;4982:1;4971:13;;;;;;;;:::i;:::-;;;;;;;;;;;:23;;;4952:42;;5032:1;5012:21;;4886:162;4867:3;;;;:::i;:::-;;;;4824:234;;2669:744;2839:11;;-1:-1:-1;;;;;2839:11:0;2825:10;:25;2804:112;;;;-1:-1:-1;;;2804:112:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2948:13:0;;;;;;:6;:13;;;;;:31;;;;;;;;2947:32;;:64;;-1:-1:-1;;;;;;2984:13:0;;;;;;:6;:13;;;;;:27;;;;;;;;2983:28;2947:64;2926:134;;;;-1:-1:-1;;;2926:134:0;;13013:2:1;2926:134:0;;;12995:21:1;13052:2;13032:18;;;13025:30;-1:-1:-1;;;13071:18:1;;;13064:53;13134:18;;2926:134:0;12811:347:1;2926:134:0;-1:-1:-1;;;;;3079:13:0;;;;;;:6;:13;;;;;:21;;;;;3078:22;3070:57;;;;-1:-1:-1;;;3070:57:0;;14894:2:1;3070:57:0;;;14876:21:1;14933:2;14913:18;;;14906:30;-1:-1:-1;;;14952:18:1;;;14945:52;15014:18;;3070:57:0;14692:346:1;3070:57:0;-1:-1:-1;;;;;3137:13:0;;;;;;3161:4;3137:13;;;;;;;;:21;;;:28;;-1:-1:-1;;3137:28:0;;;;;;;3175:21;;;;;;;;:::i;:::-;;3227:18;3240:4;3227:12;:18::i;:::-;-1:-1:-1;;;;;3206:13:0;;;;;;:6;:13;;;;;;;;:18;;;:39;;;;3255:31;;:39;;-1:-1:-1;;3304:35:0;;;3349:31;;3206:13;;;3364:15;;3206:13;3349:31;3206:13;3349:31;3364:15;3206:13;;3349:31;;;;;;;;;;;;;;;;;;;;3405:1;3390:11;;:16;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;2669:744:0:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:180:1;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;199:472::-;241:3;279:5;273:12;306:6;301:3;294:19;331:1;341:162;355:6;352:1;349:13;341:162;;;417:4;473:13;;;469:22;;463:29;445:11;;;441:20;;434:59;370:12;341:162;;;521:6;518:1;515:13;512:87;;;587:1;580:4;571:6;566:3;562:16;558:27;551:38;512:87;-1:-1:-1;653:2:1;632:15;-1:-1:-1;;628:29:1;619:39;;;;660:4;615:50;;199:472;-1:-1:-1;;199:472:1:o;676:1348::-;868:4;897:2;937;926:9;922:18;967:2;956:9;949:21;990:6;1025;1019:13;1056:6;1048;1041:22;1082:2;1072:12;;1115:2;1104:9;1100:18;1093:25;;1177:2;1167:6;1164:1;1160:14;1149:9;1145:30;1141:39;1215:2;1207:6;1203:15;1236:1;1246:749;1260:6;1257:1;1254:13;1246:749;;;1353:2;1349:7;1337:9;1329:6;1325:22;1321:36;1316:3;1309:49;1387:6;1381:13;1417:4;1460:2;1454:9;1491:2;1483:6;1476:18;1521:48;1565:2;1557:6;1553:15;1539:12;1521:48;:::i;:::-;1507:62;;;1618:2;1614;1610:11;1604:18;1671:6;1663;1659:19;1654:2;1646:6;1642:15;1635:44;1706:41;1740:6;1724:14;1706:41;:::i;:::-;1790:11;;;1784:18;1767:15;;;1760:43;1826:4;1873:11;;;1867:18;1850:15;;;;1843:43;;;;-1:-1:-1;;1973:12:1;;;;1938:15;;;;1282:1;1275:9;1246:749;;;-1:-1:-1;2012:6:1;;676:1348;-1:-1:-1;;;;;;;;676:1348:1:o;2029:127::-;2090:10;2085:3;2081:20;2078:1;2071:31;2121:4;2118:1;2111:15;2145:4;2142:1;2135:15;2161:251;2233:2;2227:9;2275:2;2263:15;;2308:18;2293:34;;2329:22;;;2290:62;2287:88;;;2355:18;;:::i;:::-;2391:2;2384:22;2161:251;:::o;2417:275::-;2488:2;2482:9;2553:2;2534:13;;-1:-1:-1;;2530:27:1;2518:40;;2588:18;2573:34;;2609:22;;;2570:62;2567:88;;;2635:18;;:::i;:::-;2671:2;2664:22;2417:275;;-1:-1:-1;2417:275:1:o;2697:531::-;2740:5;2793:3;2786:4;2778:6;2774:17;2770:27;2760:55;;2811:1;2808;2801:12;2760:55;2847:6;2834:20;2873:18;2869:2;2866:26;2863:52;;;2895:18;;:::i;:::-;2939:55;2982:2;2963:13;;-1:-1:-1;;2959:27:1;2988:4;2955:38;2939:55;:::i;:::-;3019:2;3010:7;3003:19;3065:3;3058:4;3053:2;3045:6;3041:15;3037:26;3034:35;3031:55;;;3082:1;3079;3072:12;3031:55;3147:2;3140:4;3132:6;3128:17;3121:4;3112:7;3108:18;3095:55;3195:1;3170:16;;;3188:4;3166:27;3159:38;;;;3174:7;2697:531;-1:-1:-1;;;2697:531:1:o;3233:322::-;3302:6;3355:2;3343:9;3334:7;3330:23;3326:32;3323:52;;;3371:1;3368;3361:12;3323:52;3411:9;3398:23;3444:18;3436:6;3433:30;3430:50;;;3476:1;3473;3466:12;3430:50;3499;3541:7;3532:6;3521:9;3517:22;3499:50;:::i;:::-;3489:60;3233:322;-1:-1:-1;;;;3233:322:1:o;3950:527::-;4203:3;4192:9;4185:22;4166:4;4230:46;4271:3;4260:9;4256:19;4248:6;4230:46;:::i;:::-;4324:9;4316:6;4312:22;4307:2;4296:9;4292:18;4285:50;4352:33;4378:6;4370;4352:33;:::i;:::-;4416:2;4401:18;;4394:34;;;;-1:-1:-1;;4459:2:1;4444:18;4437:34;4344:41;3950:527;-1:-1:-1;;3950:527:1:o;4482:131::-;-1:-1:-1;;;;;4557:31:1;;4547:42;;4537:70;;4603:1;4600;4593:12;4537:70;4482:131;:::o;4618:247::-;4677:6;4730:2;4718:9;4709:7;4705:23;4701:32;4698:52;;;4746:1;4743;4736:12;4698:52;4785:9;4772:23;4804:31;4829:5;4804:31;:::i;:::-;4854:5;4618:247;-1:-1:-1;;;4618:247:1:o;4870:291::-;5047:2;5036:9;5029:21;5010:4;5067:45;5108:2;5097:9;5093:18;5085:6;5067:45;:::i;:::-;5059:53;;5148:6;5143:2;5132:9;5128:18;5121:34;4870:291;;;;;:::o;5166:1636::-;5283:6;5314:2;5357;5345:9;5336:7;5332:23;5328:32;5325:52;;;5373:1;5370;5363:12;5325:52;5396:18;5454:2;5442:9;5429:23;5426:31;5423:51;;;5470:1;5467;5460:12;5423:51;5521:9;5508:23;5497:9;5493:39;5570:7;5563:4;5559:2;5555:13;5551:27;5541:55;;5592:1;5589;5582:12;5541:55;5628:2;5615:16;5650:2;5646;5643:10;5640:36;;;5656:18;;:::i;:::-;5702:2;5699:1;5695:10;5725:28;5749:2;5745;5741:11;5725:28;:::i;:::-;5787:15;;;5857:11;;;5853:20;;;5818:12;;;;5885:19;;;5882:39;;;5917:1;5914;5907:12;5882:39;5949:2;5945;5941:11;5930:22;;5961:811;5977:6;5972:3;5969:15;5961:811;;;6056:2;6050:3;6037:17;6034:25;6031:45;;;6072:1;6069;6062:12;6031:45;6120:3;6107:17;6103:2;6099:26;6165:7;6160:2;6156;6152:11;6148:25;6138:53;;6187:1;6184;6177:12;6138:53;6217:22;;:::i;:::-;6265:5;6307:3;6303:2;6299:12;6340:7;6330:8;6327:21;6324:41;;;6361:1;6358;6351:12;6324:41;6399:2;6395;6391:11;6415:284;6433:8;6426:5;6423:19;6415:284;;;6528:2;6520:5;6507:19;6504:27;6501:47;;;6544:1;6541;6534:12;6501:47;6579:65;6636:7;6631:2;6622:5;6609:19;6605:2;6601:28;6597:37;6579:65;:::i;:::-;6565:80;;6671:14;;;;6454;;6415:284;;;-1:-1:-1;;6712:18:1;;-1:-1:-1;;5994:12:1;;;;6750;;;;5961:811;;;6791:5;5166:1636;-1:-1:-1;;;;;;;;;5166:1636:1:o;6807:537::-;7050:3;7039:9;7032:22;7013:4;7071:46;7112:3;7101:9;7097:19;7089:6;7071:46;:::i;:::-;7148:2;7133:18;;7126:34;;;;-1:-1:-1;7203:14:1;;7196:22;7191:2;7176:18;;7169:50;7262:14;;7255:22;7250:2;7235:18;;7228:50;7322:14;7315:22;7309:3;7294:19;;;7287:51;7063:54;6807:537;-1:-1:-1;6807:537:1:o;7349:1052::-;7533:4;7562:2;7602;7591:9;7587:18;7632:2;7621:9;7614:21;7655:6;7690;7684:13;7721:6;7713;7706:22;7747:2;7737:12;;7780:2;7769:9;7765:18;7758:25;;7842:2;7832:6;7829:1;7825:14;7814:9;7810:30;7806:39;7880:2;7872:6;7868:15;7901:1;7911:461;7925:6;7922:1;7919:13;7911:461;;;7990:22;;;-1:-1:-1;;7986:36:1;7974:49;;8046:13;;8092:9;;8114:18;;;8159:48;8191:15;;;8092:9;8159:48;:::i;:::-;8250:11;;;8244:18;8227:15;;;8220:43;;;;8350:12;;;;8145:62;-1:-1:-1;8315:15:1;;;;7947:1;7940:9;7911:461;;8406:686;8511:6;8519;8527;8580:2;8568:9;8559:7;8555:23;8551:32;8548:52;;;8596:1;8593;8586:12;8548:52;8635:9;8622:23;8654:31;8679:5;8654:31;:::i;:::-;8704:5;-1:-1:-1;8760:2:1;8745:18;;8732:32;8783:18;8813:14;;;8810:34;;;8840:1;8837;8830:12;8810:34;8863:50;8905:7;8896:6;8885:9;8881:22;8863:50;:::i;:::-;8853:60;;8966:2;8955:9;8951:18;8938:32;8922:48;;8995:2;8985:8;8982:16;8979:36;;;9011:1;9008;9001:12;8979:36;;9034:52;9078:7;9067:8;9056:9;9052:24;9034:52;:::i;:::-;9024:62;;;8406:686;;;;;:::o;9798:127::-;9859:10;9854:3;9850:20;9847:1;9840:31;9890:4;9887:1;9880:15;9914:4;9911:1;9904:15;9930:127;9991:10;9986:3;9982:20;9979:1;9972:31;10022:4;10019:1;10012:15;10046:4;10043:1;10036:15;10062:128;10102:3;10133:1;10129:6;10126:1;10123:13;10120:39;;;10139:18;;:::i;:::-;-1:-1:-1;10175:9:1;;10062:128::o;10195:380::-;10274:1;10270:12;;;;10317;;;10338:61;;10392:4;10384:6;10380:17;10370:27;;10338:61;10445:2;10437:6;10434:14;10414:18;10411:38;10408:161;;;10491:10;10486:3;10482:20;10479:1;10472:31;10526:4;10523:1;10516:15;10554:4;10551:1;10544:15;10408:161;;10195:380;;;:::o;10580:125::-;10620:4;10648:1;10645;10642:8;10639:34;;;10653:18;;:::i;:::-;-1:-1:-1;10690:9:1;;10580:125::o;10710:422::-;10799:1;10842:5;10799:1;10856:270;10877:7;10867:8;10864:21;10856:270;;;10936:4;10932:1;10928:6;10924:17;10918:4;10915:27;10912:53;;;10945:18;;:::i;:::-;10995:7;10985:8;10981:22;10978:55;;;11015:16;;;;10978:55;11094:22;;;;11054:15;;;;10856:270;;;10860:3;10710:422;;;;;:::o;11137:806::-;11186:5;11216:8;11206:80;;-1:-1:-1;11257:1:1;11271:5;;11206:80;11305:4;11295:76;;-1:-1:-1;11342:1:1;11356:5;;11295:76;11387:4;11405:1;11400:59;;;;11473:1;11468:130;;;;11380:218;;11400:59;11430:1;11421:10;;11444:5;;;11468:130;11505:3;11495:8;11492:17;11489:43;;;11512:18;;:::i;:::-;-1:-1:-1;;11568:1:1;11554:16;;11583:5;;11380:218;;11682:2;11672:8;11669:16;11663:3;11657:4;11654:13;11650:36;11644:2;11634:8;11631:16;11626:2;11620:4;11617:12;11613:35;11610:77;11607:159;;;-1:-1:-1;11719:19:1;;;11751:5;;11607:159;11798:34;11823:8;11817:4;11798:34;:::i;:::-;11868:6;11864:1;11860:6;11856:19;11847:7;11844:32;11841:58;;;11879:18;;:::i;:::-;11917:20;;-1:-1:-1;11137:806:1;;;;;:::o;11948:131::-;12008:5;12037:36;12064:8;12058:4;12037:36;:::i;12084:168::-;12124:7;12190:1;12186;12182:6;12178:14;12175:1;12172:21;12167:1;12160:9;12153:17;12149:45;12146:71;;;12197:18;;:::i;:::-;-1:-1:-1;12237:9:1;;12084:168::o;12257:135::-;12296:3;-1:-1:-1;;12317:17:1;;12314:43;;;12337:18;;:::i;:::-;-1:-1:-1;12384:1:1;12373:13;;12257:135::o;14283:404::-;14485:2;14467:21;;;14524:2;14504:18;;;14497:30;14563:34;14558:2;14543:18;;14536:62;-1:-1:-1;;;14629:2:1;14614:18;;14607:38;14677:3;14662:19;;14283:404::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    89,
    5653
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xFE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C08A4DC GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xAE315FE4 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xAE315FE4 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0xB60D4288 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xC1CFB99A EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0xD28178D7 EQ PUSH2 0x304 JUMPI DUP1 PUSH4 0xF972C1C4 EQ PUSH2 0x319 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C08A4DC EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x9F6680A8 EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xA8311AA8 EQ PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3477EE2E GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x3477EE2E EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x40DEC728 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0x685A9DD8 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x70651A18 EQ PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4CEE9B3 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x6A49FCE EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x1BD95155 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x2E4176CF EQ PUSH2 0x17E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x1228 JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13A PUSH2 0x440 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP2 SWAP1 PUSH2 0x128E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x170 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0x1409 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x147 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x19E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x147 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D6 PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1228 JUMP JUMPDEST PUSH2 0x67B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1446 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x170 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x216 CALLDATASIZE PUSH1 0x4 PUSH2 0x1497 JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23B PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x1228 JUMP JUMPDEST PUSH2 0x97E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP3 SWAP2 SWAP1 PUSH2 0x14BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x264 CALLDATASIZE PUSH1 0x4 PUSH2 0x1228 JUMP JUMPDEST PUSH2 0xA3A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x284 CALLDATASIZE PUSH1 0x4 PUSH2 0x14DD JUMP JUMPDEST PUSH2 0xBA5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A9 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1497 JUMP JUMPDEST PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x15F4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CF PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x147 SWAP2 SWAP1 PUSH2 0x162D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x170 PUSH2 0xEB8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE PUSH2 0x170 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x170 PUSH2 0xF35 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 PUSH2 0x334 CALLDATASIZE PUSH1 0x4 PUSH2 0x1695 JUMP JUMPDEST PUSH2 0xFAD JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x398 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x486173206E6F20726967687420746F20766F7465 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x3F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616C726561647920766F74656420666F72207061727479000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x408 JUMPI PUSH2 0x408 PUSH2 0x170B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x428 SWAP2 SWAP1 PUSH2 0x1737 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x5CE JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x497 SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4C3 SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x510 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4E5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x510 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4F3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x529 SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x555 SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5A2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x577 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5A2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x585 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x464 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x672 JUMPI PUSH1 0x0 DUP2 DUP4 MLOAD PUSH2 0x5F5 SWAP2 SWAP1 PUSH2 0x178A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x60B JUMPI PUSH2 0x60B PUSH2 0x170B JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 AND SWAP2 POP PUSH1 0xF8 SHR PUSH1 0x0 PUSH2 0x62D PUSH1 0x30 DUP4 PUSH2 0x178A JUMP JUMPDEST SWAP1 POP PUSH2 0x63A PUSH1 0x1 DUP6 PUSH2 0x178A JUMP JUMPDEST PUSH2 0x645 SWAP1 PUSH1 0xA PUSH2 0x1887 JUMP JUMPDEST PUSH2 0x64F SWAP1 DUP3 PUSH2 0x1893 JUMP JUMPDEST PUSH2 0x659 SWAP1 DUP9 PUSH2 0x1737 JUMP JUMPDEST SWAP7 POP POP POP POP POP DUP1 DUP1 PUSH2 0x66A SWAP1 PUSH2 0x18B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5DD JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x68B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x6AE SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6DA SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x727 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6FC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x727 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x70A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x73C SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x768 SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7B5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x78A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7B5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x798 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x83B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063686169726D616E2063616E20676976652064656E6F756E636520 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x726967687420746F20766F7465 PUSH1 0x98 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x88D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959 PUSH1 0x4A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x93E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F74657220646F65736E2774206861766520726967687420746F20766F7465 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x2 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x976 SWAP1 DUP5 SWAP1 PUSH2 0x178A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x98E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x9B1 SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9DD SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA2A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9FF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA2A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA0D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xA94 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x486173206E6F20726967687420746F20766F7465 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xAEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x616C726561647920766F74656420666F722063616E6469646174650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xB01 JUMPI PUSH2 0xB01 PUSH2 0x170B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x2 ADD SLOAD DUP2 PUSH1 0x1 ADD SLOAD EQ PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F7420766F74652063616E64696461746520696E2074686973206172 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6561 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xB85 JUMPI PUSH2 0xB85 PUSH2 0x170B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x428 SWAP2 SWAP1 PUSH2 0x1737 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38F SWAP1 PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xD03 JUMPI PUSH1 0x3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xBFA JUMPI PUSH2 0xBFA PUSH2 0x170B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x3 DUP2 LT PUSH2 0xC14 JUMPI PUSH2 0xC14 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC30 JUMPI PUSH2 0xC30 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x3 DUP2 LT PUSH2 0xC4A JUMPI PUSH2 0xC4A PUSH2 0x170B JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC8D DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC69 JUMPI PUSH2 0xC69 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x2 PUSH1 0x3 DUP2 LT PUSH2 0xC83 JUMPI PUSH2 0xC83 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x5D7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP4 SLOAD PUSH1 0x1 DUP2 ADD DUP6 SSTORE SWAP4 DUP2 MSTORE DUP2 SWAP1 KECCAK256 DUP3 MLOAD DUP1 MLOAD SWAP4 SWAP5 PUSH1 0x4 MUL SWAP1 SWAP2 ADD SWAP3 PUSH2 0xCC1 SWAP3 DUP5 SWAP3 ADD SWAP1 PUSH2 0x118F JUMP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD MLOAD DUP1 MLOAD PUSH2 0xCDA SWAP3 PUSH1 0x1 DUP6 ADD SWAP3 ADD SWAP1 PUSH2 0x118F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE DUP1 PUSH2 0xCFB DUP2 PUSH2 0x18B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBD2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0xD22 SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD4E SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD9B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD70 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD9B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD7E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x2 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP3 POP PUSH2 0x100 DUP3 DIV DUP2 AND SWAP2 PUSH3 0x10000 SWAP1 DIV AND DUP6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x5CE JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0xE1D SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE49 SWAP1 PUSH2 0x174F JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE96 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE6B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE96 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE79 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xDEA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x4 SLOAD DUP2 LT ISZERO PUSH2 0xF30 JUMPI DUP2 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xEDB JUMPI PUSH2 0xEDB PUSH2 0x170B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0xF1E JUMPI PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xF06 JUMPI PUSH2 0xF06 PUSH2 0x170B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP DUP1 SWAP3 POP JUMPDEST DUP1 PUSH2 0xF28 DUP2 PUSH2 0x18B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xEBD JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0xF30 JUMPI DUP2 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xF58 JUMPI PUSH2 0xF58 PUSH2 0x170B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0xF9B JUMPI PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xF83 JUMPI PUSH2 0xF83 PUSH2 0x170B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD SWAP2 POP DUP1 SWAP3 POP JUMPDEST DUP1 PUSH2 0xFA5 DUP2 PUSH2 0x18B2 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF3A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFD7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38F SWAP1 PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x1029 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x106F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959 PUSH1 0x4A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x10D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x566F7465722063616E20616C726561647920766F7465 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE DUP4 MLOAD PUSH2 0x110D SWAP3 DUP6 ADD SWAP1 PUSH2 0x118F JUMP JUMPDEST POP PUSH2 0x1117 DUP2 PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP2 DUP3 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH3 0xFFFF00 NOT AND SWAP1 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH6 0x5AF3107A4000 SWAP1 DUP3 DUP2 DUP2 DUP2 DUP6 DUP9 DUP4 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1171 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1185 SWAP2 SWAP1 PUSH2 0x1737 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x119B SWAP1 PUSH2 0x174F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x11BD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x1203 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x11D6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1203 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1203 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1203 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x11E8 JUMP JUMPDEST POP PUSH2 0x120F SWAP3 SWAP2 POP PUSH2 0x1213 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x120F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1214 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x123A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1267 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x124B JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1279 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x131B JUMPI PUSH1 0x3F NOT DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 MLOAD DUP2 DUP7 MSTORE PUSH2 0x12DB DUP3 DUP8 ADD DUP3 PUSH2 0x1241 JUMP JUMPDEST SWAP2 POP POP DUP9 DUP3 ADD MLOAD DUP6 DUP3 SUB DUP11 DUP8 ADD MSTORE PUSH2 0x12F3 DUP3 DUP3 PUSH2 0x1241 JUMP JUMPDEST DUP4 DUP11 ADD MLOAD DUP8 DUP12 ADD MSTORE PUSH1 0x60 SWAP4 DUP5 ADD MLOAD SWAP4 SWAP1 SWAP7 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP SWAP4 DUP7 ADD SWAP4 SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12B5 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1362 JUMPI PUSH2 0x1362 PUSH2 0x1329 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1391 JUMPI PUSH2 0x1391 PUSH2 0x1329 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13C4 JUMPI PUSH2 0x13C4 PUSH2 0x1329 JUMP JUMPDEST PUSH2 0x13D7 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1368 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x13EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x141B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x143E DUP5 DUP3 DUP6 ADD PUSH2 0x1399 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1459 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x1241 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x146B DUP2 DUP8 PUSH2 0x1241 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x14B4 DUP2 PUSH2 0x147F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x14CE PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 CALLDATALOAD GT ISZERO PUSH2 0x1507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x151A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x152C JUMPI PUSH2 0x152C PUSH2 0x1329 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH2 0x153B DUP6 DUP3 ADD PUSH2 0x1368 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP3 DUP2 ADD DUP6 ADD SWAP2 DUP6 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 0x1555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 DUP6 ADD SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH2 0x15E7 JUMPI DUP6 DUP4 CALLDATALOAD GT ISZERO PUSH2 0x1571 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD DUP6 ADD DUP11 PUSH1 0x3F DUP3 ADD SLT PUSH2 0x1584 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x158C PUSH2 0x133F JUMP JUMPDEST DUP1 PUSH1 0x80 DUP4 ADD DUP14 DUP2 GT ISZERO PUSH2 0x159E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 DUP5 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x15D4 JUMPI DUP11 DUP2 CALLDATALOAD GT ISZERO PUSH2 0x15B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15C7 DUP16 DUP14 DUP4 CALLDATALOAD DUP9 ADD ADD PUSH2 0x1399 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP12 ADD SWAP3 DUP12 ADD PUSH2 0x15A2 JUMP JUMPDEST POP POP DUP5 MSTORE POP POP SWAP2 DUP7 ADD SWAP2 SWAP1 DUP7 ADD SWAP1 PUSH2 0x155B JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1607 PUSH1 0xA0 DUP4 ADD DUP9 PUSH2 0x1241 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP7 SWAP1 SWAP7 MSTORE POP SWAP3 ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x131B JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x1678 DUP9 DUP7 ADD DUP3 PUSH2 0x1241 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1654 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x16AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x16B5 DUP2 PUSH2 0x147F JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16DE DUP8 DUP4 DUP9 ADD PUSH2 0x1399 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x16F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1701 DUP7 DUP3 DUP8 ADD PUSH2 0x1399 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x174A JUMPI PUSH2 0x174A PUSH2 0x1721 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1763 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1784 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x179C JUMPI PUSH2 0x179C PUSH2 0x1721 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x17DC JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x17C2 JUMPI PUSH2 0x17C2 PUSH2 0x1721 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x17CF JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x17A6 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x17F3 JUMPI POP PUSH1 0x1 PUSH2 0x1881 JUMP JUMPDEST DUP2 PUSH2 0x1800 JUMPI POP PUSH1 0x0 PUSH2 0x1881 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1816 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1820 JUMPI PUSH2 0x183C JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1881 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1831 JUMPI PUSH2 0x1831 PUSH2 0x1721 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x1881 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x185F JUMPI POP DUP2 DUP2 EXP PUSH2 0x1881 JUMP JUMPDEST PUSH2 0x1869 DUP4 DUP4 PUSH2 0x17A1 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x187D JUMPI PUSH2 0x187D PUSH2 0x1721 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14B4 DUP4 DUP4 PUSH2 0x17E4 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x18AD JUMPI PUSH2 0x18AD PUSH2 0x1721 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x18C6 JUMPI PUSH2 0x18C6 PUSH2 0x1721 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063686169726D616E2063616E206769766520746865207269676874 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x20746F20766F7465 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E 0xB6 0x2A 0xC PUSH15 0xEF37ED36F34E33D9A36A833F9FA783 SWAP5 0x23 SWAP12 0xE3 PUSH6 0x552CC988DDC5 SSTORE PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFE"
    },
    "12": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8C08A4DC"
    },
    "25": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "GT",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x95"
    },
    "29": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xAE315FE4"
    },
    "36": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "GT",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x64"
    },
    "40": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xAE315FE4"
    },
    "47": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2DC"
    },
    "51": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xB60D4288"
    },
    "58": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "59": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "62": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "63": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "64": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xC1CFB99A"
    },
    "69": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "70": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F1"
    },
    "73": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "74": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "75": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD28178D7"
    },
    "80": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "81": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x304"
    },
    "84": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "85": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "86": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xF972C1C4"
    },
    "91": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "92": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x319"
    },
    "95": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "96": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "98": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "REVERT",
      "path": "0"
    },
    "100": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "101": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "102": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8C08A4DC"
    },
    "107": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "108": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x249"
    },
    "111": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "112": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "113": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x9F6680A8"
    },
    "118": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "119": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x269"
    },
    "122": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "123": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "124": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA3EC138D"
    },
    "129": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "130": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x289"
    },
    "133": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "134": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "135": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA8311AA8"
    },
    "140": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "141": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BA"
    },
    "144": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "145": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "147": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "148": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "REVERT",
      "path": "0"
    },
    "149": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "150": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "151": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3477EE2E"
    },
    "156": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "GT",
      "path": "0"
    },
    "157": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD1"
    },
    "160": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "161": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "162": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3477EE2E"
    },
    "167": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "168": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1B6"
    },
    "171": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "172": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "173": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x40DEC728"
    },
    "178": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "179": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E6"
    },
    "182": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "183": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "184": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x685A9DD8"
    },
    "189": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "190": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1FB"
    },
    "193": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "194": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "195": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70651A18"
    },
    "200": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "201": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x21B"
    },
    "204": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "205": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "207": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "208": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "REVERT",
      "path": "0"
    },
    "209": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "210": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "211": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x4CEE9B3"
    },
    "216": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "217": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x103"
    },
    "220": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "221": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "222": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6A49FCE"
    },
    "227": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "228": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x125"
    },
    "231": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "232": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "233": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x1BD95155"
    },
    "238": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "239": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x150"
    },
    "242": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "243": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "244": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2E4176CF"
    },
    "249": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "EQ",
      "path": "0"
    },
    "250": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17E"
    },
    "253": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "254": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "255": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "257": {
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "DUP1",
      "path": "0"
    },
    "258": {
      "first_revert": true,
      "fn": null,
      "offset": [
        89,
        5653
      ],
      "op": "REVERT",
      "path": "0"
    },
    "259": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "260": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "261": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "DUP1",
      "path": "0"
    },
    "262": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "263": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10F"
    },
    "266": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "267": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "269": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "DUP1",
      "path": "0"
    },
    "270": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "REVERT",
      "path": "0"
    },
    "271": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "272": {
      "op": "POP"
    },
    "273": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "276": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11E"
    },
    "279": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "280": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "282": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1228"
    },
    "285": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMP",
      "path": "0"
    },
    "286": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "287": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x339"
    },
    "290": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMP",
      "path": "0"
    },
    "291": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "292": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "STOP",
      "path": "0"
    },
    "293": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "294": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "295": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "DUP1",
      "path": "0"
    },
    "296": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "297": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x131"
    },
    "300": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "301": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "303": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "DUP1",
      "path": "0"
    },
    "304": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "REVERT",
      "path": "0"
    },
    "305": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "306": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "POP",
      "path": "0"
    },
    "307": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13A"
    },
    "310": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x440"
    },
    "313": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMP",
      "path": "0"
    },
    "314": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "315": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "317": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "318": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "321": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "322": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "323": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x128E"
    },
    "326": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMP",
      "path": "0"
    },
    "327": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "328": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "330": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "331": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "DUP1",
      "path": "0"
    },
    "332": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "333": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "SUB",
      "path": "0"
    },
    "334": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "335": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "RETURN",
      "path": "0"
    },
    "336": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "337": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "338": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "DUP1",
      "path": "0"
    },
    "339": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "340": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15C"
    },
    "343": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "344": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "346": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "DUP1",
      "path": "0"
    },
    "347": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "REVERT",
      "path": "0"
    },
    "348": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "349": {
      "op": "POP"
    },
    "350": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "353": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B"
    },
    "356": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "357": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "359": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1409"
    },
    "362": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMP",
      "path": "0"
    },
    "363": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "364": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D7"
    },
    "367": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMP",
      "path": "0"
    },
    "368": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "369": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "371": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "372": {
      "op": "SWAP1"
    },
    "373": {
      "op": "DUP2"
    },
    "374": {
      "op": "MSTORE"
    },
    "375": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "377": {
      "op": "ADD"
    },
    "378": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "381": {
      "op": "JUMP"
    },
    "382": {
      "offset": [
        456,
        482
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "383": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "384": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "DUP1",
      "path": "0"
    },
    "385": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "386": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18A"
    },
    "389": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "390": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "392": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "DUP1",
      "path": "0"
    },
    "393": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "REVERT",
      "path": "0"
    },
    "394": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "395": {
      "op": "POP"
    },
    "396": {
      "offset": [
        456,
        482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "398": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "399": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19E"
    },
    "402": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "407": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "409": {
      "op": "SHL"
    },
    "410": {
      "op": "SUB"
    },
    "411": {
      "offset": [
        456,
        482
      ],
      "op": "AND",
      "path": "0"
    },
    "412": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "DUP2",
      "path": "0"
    },
    "413": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "JUMP",
      "path": "0"
    },
    "414": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "415": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "417": {
      "fn": "Voting.stringToUint",
      "offset": [
        456,
        482
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "422": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "424": {
      "op": "SHL"
    },
    "425": {
      "op": "SUB"
    },
    "426": {
      "op": "SWAP1"
    },
    "427": {
      "op": "SWAP2"
    },
    "428": {
      "op": "AND"
    },
    "429": {
      "op": "DUP2"
    },
    "430": {
      "op": "MSTORE"
    },
    "431": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "433": {
      "op": "ADD"
    },
    "434": {
      "offset": [
        456,
        482
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "437": {
      "op": "JUMP"
    },
    "438": {
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "439": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "440": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "441": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "442": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C2"
    },
    "445": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "446": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "448": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "449": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "REVERT",
      "path": "0"
    },
    "450": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "451": {
      "op": "POP"
    },
    "452": {
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D6"
    },
    "455": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1D1"
    },
    "458": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "459": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "461": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1228"
    },
    "464": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "465": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "466": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x67B"
    },
    "469": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "470": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "471": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "473": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "474": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "477": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "478": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "479": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "480": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "481": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "482": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1446"
    },
    "485": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "486": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "487": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "488": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "DUP1",
      "path": "0"
    },
    "489": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "490": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F2"
    },
    "493": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "494": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "496": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "DUP1",
      "path": "0"
    },
    "497": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "REVERT",
      "path": "0"
    },
    "498": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "499": {
      "op": "POP"
    },
    "500": {
      "fn": "Voting.voters_count",
      "offset": [
        5490,
        5501
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x2"
    },
    "502": {
      "fn": "Voting.voters_count",
      "offset": [
        5490,
        5501
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "503": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "506": {
      "fn": "Voting.voters_count",
      "offset": [
        5419,
        5508
      ],
      "op": "JUMP",
      "path": "0"
    },
    "507": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "508": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "509": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "DUP1",
      "path": "0"
    },
    "510": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "511": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x207"
    },
    "514": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "515": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "517": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "DUP1",
      "path": "0"
    },
    "518": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "REVERT",
      "path": "0"
    },
    "519": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "520": {
      "op": "POP"
    },
    "521": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "524": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x216"
    },
    "527": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "528": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "530": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1497"
    },
    "533": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        3419,
        3889
      ],
      "op": "JUMP",
      "path": "0"
    },
    "534": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "535": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7CB"
    },
    "538": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        3419,
        3889
      ],
      "op": "JUMP",
      "path": "0"
    },
    "539": {
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "540": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "541": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "542": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "543": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x227"
    },
    "546": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "547": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "549": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "550": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "REVERT",
      "path": "0"
    },
    "551": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "552": {
      "op": "POP"
    },
    "553": {
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x23B"
    },
    "556": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x236"
    },
    "559": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "560": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "562": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1228"
    },
    "565": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        597,
        619
      ],
      "op": "JUMP",
      "path": "0"
    },
    "566": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "567": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x97E"
    },
    "570": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        597,
        619
      ],
      "op": "JUMP",
      "path": "0"
    },
    "571": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "572": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "574": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "575": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "578": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "579": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "580": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "581": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14BB"
    },
    "584": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        597,
        619
      ],
      "op": "JUMP",
      "path": "0"
    },
    "585": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "586": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "587": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "DUP1",
      "path": "0"
    },
    "588": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "589": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x255"
    },
    "592": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "593": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "595": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "DUP1",
      "path": "0"
    },
    "596": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "REVERT",
      "path": "0"
    },
    "597": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "598": {
      "op": "POP"
    },
    "599": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "602": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x264"
    },
    "605": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "606": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "608": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1228"
    },
    "611": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        3895,
        4355
      ],
      "op": "JUMP",
      "path": "0"
    },
    "612": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "613": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3A"
    },
    "616": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        3895,
        4355
      ],
      "op": "JUMP",
      "path": "0"
    },
    "617": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "618": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "619": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "DUP1",
      "path": "0"
    },
    "620": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "621": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x275"
    },
    "624": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "625": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "627": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "DUP1",
      "path": "0"
    },
    "628": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "REVERT",
      "path": "0"
    },
    "629": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "630": {
      "op": "POP"
    },
    "631": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "634": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x284"
    },
    "637": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "638": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "640": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14DD"
    },
    "643": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1885,
        2461
      ],
      "op": "JUMP",
      "path": "0"
    },
    "644": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "645": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBA5"
    },
    "648": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1885,
        2461
      ],
      "op": "JUMP",
      "path": "0"
    },
    "649": {
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "650": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "651": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "652": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "653": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x295"
    },
    "656": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "657": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "659": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "660": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "REVERT",
      "path": "0"
    },
    "661": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "662": {
      "op": "POP"
    },
    "663": {
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A9"
    },
    "666": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2A4"
    },
    "669": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "670": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "672": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1497"
    },
    "675": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        488,
        527
      ],
      "op": "JUMP",
      "path": "0"
    },
    "676": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "677": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD07"
    },
    "680": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        488,
        527
      ],
      "op": "JUMP",
      "path": "0"
    },
    "681": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "682": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "684": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "685": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "688": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "689": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "690": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "691": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "692": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "693": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "694": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15F4"
    },
    "697": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        488,
        527
      ],
      "op": "JUMP",
      "path": "0"
    },
    "698": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "699": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "700": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "DUP1",
      "path": "0"
    },
    "701": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "702": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2C6"
    },
    "705": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "706": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "708": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "DUP1",
      "path": "0"
    },
    "709": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "REVERT",
      "path": "0"
    },
    "710": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "711": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "POP",
      "path": "0"
    },
    "712": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2CF"
    },
    "715": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDC6"
    },
    "718": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        2573,
        2663
      ],
      "op": "JUMP",
      "path": "0"
    },
    "719": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "720": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "722": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "723": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x147"
    },
    "726": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "727": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "728": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x162D"
    },
    "731": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        2573,
        2663
      ],
      "op": "JUMP",
      "path": "0"
    },
    "732": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "733": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "734": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "735": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "736": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E8"
    },
    "739": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "740": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "742": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "743": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "REVERT",
      "path": "0"
    },
    "744": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "745": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "POP",
      "path": "0"
    },
    "746": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "749": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEB8"
    },
    "752": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        5070,
        5413
      ],
      "op": "JUMP",
      "path": "0"
    },
    "753": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "754": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "755": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "DUP1",
      "path": "0"
    },
    "756": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "757": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FD"
    },
    "760": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "761": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "763": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "DUP1",
      "path": "0"
    },
    "764": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "REVERT",
      "path": "0"
    },
    "765": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "766": {
      "op": "POP"
    },
    "767": {
      "fn": "Voting.get_balance",
      "offset": [
        5623,
        5644
      ],
      "op": "SELFBALANCE",
      "path": "0",
      "statement": 1
    },
    "768": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "771": {
      "fn": "Voting.get_balance",
      "offset": [
        5553,
        5651
      ],
      "op": "JUMP",
      "path": "0"
    },
    "772": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "773": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "774": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "DUP1",
      "path": "0"
    },
    "775": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "776": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x310"
    },
    "779": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "780": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "782": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "DUP1",
      "path": "0"
    },
    "783": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "REVERT",
      "path": "0"
    },
    "784": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "785": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "POP",
      "path": "0"
    },
    "786": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170"
    },
    "789": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF35"
    },
    "792": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        4672,
        5064
      ],
      "op": "JUMP",
      "path": "0"
    },
    "793": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "794": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "795": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "796": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "797": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x325"
    },
    "800": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "801": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "803": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "DUP1",
      "path": "0"
    },
    "804": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "REVERT",
      "path": "0"
    },
    "805": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "806": {
      "op": "POP"
    },
    "807": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "810": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x334"
    },
    "813": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "814": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "816": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1695"
    },
    "819": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        2669,
        3413
      ],
      "op": "JUMP",
      "path": "0"
    },
    "820": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "821": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFAD"
    },
    "824": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        2669,
        3413
      ],
      "op": "JUMP",
      "path": "0"
    },
    "825": {
      "fn": "Voting.voteParty",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "826": {
      "fn": "Voting.voteParty",
      "offset": [
        4444,
        4454
      ],
      "op": "CALLER",
      "path": "0"
    },
    "827": {
      "fn": "Voting.voteParty",
      "offset": [
        4414,
        4434
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "829": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4455
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "830": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4455
      ],
      "op": "DUP2",
      "path": "0"
    },
    "831": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4455
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "832": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4443
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "834": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4455
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "836": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4455
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "837": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4455
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "839": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4455
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "840": {
      "fn": "Voting.voteParty",
      "offset": [
        4437,
        4455
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "841": {
      "fn": "Voting.voteParty",
      "offset": [
        4473,
        4487
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x2"
    },
    "843": {
      "fn": "Voting.voteParty",
      "offset": [
        4473,
        4487
      ],
      "op": "DUP2",
      "path": "0"
    },
    "844": {
      "fn": "Voting.voteParty",
      "offset": [
        4473,
        4487
      ],
      "op": "ADD",
      "path": "0"
    },
    "845": {
      "fn": "Voting.voteParty",
      "offset": [
        4473,
        4487
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "846": {
      "fn": "Voting.voteParty",
      "offset": [
        4473,
        4487
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "848": {
      "branch": 39,
      "fn": "Voting.voteParty",
      "offset": [
        4473,
        4487
      ],
      "op": "AND",
      "path": "0"
    },
    "849": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x398"
    },
    "852": {
      "branch": 39,
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "853": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "855": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "856": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "860": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "862": {
      "op": "SHL"
    },
    "863": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "DUP2",
      "path": "0"
    },
    "864": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "865": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "867": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "869": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "DUP3",
      "path": "0"
    },
    "870": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "ADD",
      "path": "0"
    },
    "871": {
      "op": "MSTORE"
    },
    "872": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "874": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "876": {
      "op": "DUP3"
    },
    "877": {
      "op": "ADD"
    },
    "878": {
      "op": "MSTORE"
    },
    "879": {
      "op": "PUSH20",
      "value": "0x486173206E6F20726967687420746F20766F7465"
    },
    "900": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "902": {
      "op": "SHL"
    },
    "903": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "905": {
      "op": "DUP3"
    },
    "906": {
      "op": "ADD"
    },
    "907": {
      "op": "MSTORE"
    },
    "908": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "910": {
      "op": "ADD"
    },
    "911": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "912": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "914": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "915": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "DUP1",
      "path": "0"
    },
    "916": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "917": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "SUB",
      "path": "0"
    },
    "918": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "919": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "920": {
      "fn": "Voting.voteParty",
      "offset": [
        4465,
        4512
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "921": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x2"
    },
    "923": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "DUP2",
      "path": "0"
    },
    "924": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "ADD",
      "path": "0"
    },
    "925": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "926": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "930": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "931": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "DIV",
      "path": "0"
    },
    "932": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "934": {
      "fn": "Voting.voteParty",
      "offset": [
        4531,
        4551
      ],
      "op": "AND",
      "path": "0"
    },
    "935": {
      "branch": 40,
      "fn": "Voting.voteParty",
      "offset": [
        4530,
        4551
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "936": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3F3"
    },
    "939": {
      "branch": 40,
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "940": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "942": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "943": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "947": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "949": {
      "op": "SHL"
    },
    "950": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "DUP2",
      "path": "0"
    },
    "951": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "952": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "954": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "956": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "DUP3",
      "path": "0"
    },
    "957": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "ADD",
      "path": "0"
    },
    "958": {
      "op": "MSTORE"
    },
    "959": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "961": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "963": {
      "op": "DUP3"
    },
    "964": {
      "op": "ADD"
    },
    "965": {
      "op": "MSTORE"
    },
    "966": {
      "op": "PUSH32",
      "value": "0x616C726561647920766F74656420666F72207061727479000000000000000000"
    },
    "999": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1001": {
      "op": "DUP3"
    },
    "1002": {
      "op": "ADD"
    },
    "1003": {
      "op": "MSTORE"
    },
    "1004": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1006": {
      "op": "ADD"
    },
    "1007": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "1010": {
      "op": "JUMP"
    },
    "1011": {
      "fn": "Voting.voteParty",
      "offset": [
        4522,
        4579
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1012": {
      "fn": "Voting.voteParty",
      "offset": [
        4617,
        4618
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x1"
    },
    "1014": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4596
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1016": {
      "fn": "Voting.voteParty",
      "offset": [
        4597,
        4602
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1017": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1018": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1019": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1020": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "LT",
      "path": "0"
    },
    "1021": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x408"
    },
    "1024": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1025": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x408"
    },
    "1028": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "1031": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        4589,
        4603
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1032": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1033": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1034": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1036": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1037": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1039": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1041": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1042": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1043": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1045": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "MUL",
      "path": "0"
    },
    "1046": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4603
      ],
      "op": "ADD",
      "path": "0"
    },
    "1047": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4613
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1049": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4613
      ],
      "op": "ADD",
      "path": "0"
    },
    "1050": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4613
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1052": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1053": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1054": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1055": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x428"
    },
    "1058": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1059": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1060": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1737"
    },
    "1063": {
      "fn": "Voting.voteParty",
      "jump": "i",
      "offset": [
        4589,
        4618
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1064": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1065": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1066": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1067": {
      "fn": "Voting.voteParty",
      "offset": [
        4589,
        4618
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1068": {
      "op": "POP"
    },
    "1069": {
      "op": "POP"
    },
    "1070": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4652
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0x2"
    },
    "1072": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4652
      ],
      "op": "ADD",
      "path": "0"
    },
    "1073": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4659
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1074": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4659
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1075": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "1078": {
      "op": "NOT"
    },
    "1079": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4659
      ],
      "op": "AND",
      "path": "0"
    },
    "1080": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4659
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1083": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4659
      ],
      "op": "OR",
      "path": "0"
    },
    "1084": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4659
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1085": {
      "fn": "Voting.voteParty",
      "offset": [
        4628,
        4659
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1086": {
      "op": "POP"
    },
    "1087": {
      "fn": "Voting.voteParty",
      "jump": "o",
      "offset": [
        4361,
        4666
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1088": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1089": {
      "fn": "Voting.getCandidates",
      "offset": [
        2513,
        2531
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "1091": {
      "fn": "Voting.getCandidates",
      "offset": [
        2550,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 6,
      "value": "0x3"
    },
    "1093": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1094": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1095": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1096": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1098": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MUL",
      "path": "0"
    },
    "1099": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1101": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1102": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1104": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1105": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1106": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1107": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1108": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1110": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1111": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1112": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1113": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1114": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1115": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1116": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1117": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1118": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1120": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1121": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1123": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1124": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1125": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1126": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1127": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "LT",
      "path": "0"
    },
    "1128": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1129": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5CE"
    },
    "1132": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1133": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1134": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1135": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1136": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1138": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1139": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1141": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1143": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1144": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1145": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1147": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MUL",
      "path": "0"
    },
    "1148": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1149": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1151": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1152": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1153": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "1155": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1156": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1158": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1159": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1160": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1161": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1163": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1164": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1165": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1166": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1167": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x497"
    },
    "1170": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1171": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "1174": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1175": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1176": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1177": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1179": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1180": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1182": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1183": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1184": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DIV",
      "path": "0"
    },
    "1185": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MUL",
      "path": "0"
    },
    "1186": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1188": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1189": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1191": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1192": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1193": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1194": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1195": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1197": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1198": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1199": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1200": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1201": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1202": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1203": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1204": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1205": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1207": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1208": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1209": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1210": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1211": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4C3"
    },
    "1214": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1215": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "1218": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1219": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1220": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1221": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1222": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x510"
    },
    "1225": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1226": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1227": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1229": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "LT",
      "path": "0"
    },
    "1230": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4E5"
    },
    "1233": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1234": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1237": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1238": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1239": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1240": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DIV",
      "path": "0"
    },
    "1241": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MUL",
      "path": "0"
    },
    "1242": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1243": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1244": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1245": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1247": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1248": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1249": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x510"
    },
    "1252": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1253": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1254": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1255": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1256": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1257": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1258": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1260": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1261": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1263": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1265": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1266": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1267": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1268": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1269": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1270": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1271": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1272": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1273": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1275": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1276": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1277": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1279": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1280": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1281": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1282": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "GT",
      "path": "0"
    },
    "1283": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4F3"
    },
    "1286": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1287": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1288": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1289": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SUB",
      "path": "0"
    },
    "1290": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1292": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "AND",
      "path": "0"
    },
    "1293": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1294": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1295": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1296": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1297": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1298": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1299": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1300": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1301": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1302": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1303": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1304": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1306": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1307": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1309": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1310": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1311": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1312": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1313": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x529"
    },
    "1316": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1317": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "1320": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1321": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1322": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1323": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1325": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1326": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1328": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1329": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1330": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DIV",
      "path": "0"
    },
    "1331": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MUL",
      "path": "0"
    },
    "1332": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1334": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1335": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1337": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1338": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1339": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1340": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1341": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1343": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1344": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1345": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1346": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1347": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1348": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1349": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1350": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1351": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1353": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1354": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1355": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1356": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1357": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x555"
    },
    "1360": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1361": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "1364": {
      "fn": "Voting.getCandidates",
      "jump": "i",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1365": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1366": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1367": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1368": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5A2"
    },
    "1371": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1372": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1373": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1375": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "LT",
      "path": "0"
    },
    "1376": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x577"
    },
    "1379": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1380": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1383": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1384": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1385": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1386": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DIV",
      "path": "0"
    },
    "1387": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MUL",
      "path": "0"
    },
    "1388": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1389": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1390": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1391": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1393": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1394": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1395": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5A2"
    },
    "1398": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1399": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1400": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1401": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1402": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1403": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1404": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1406": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1407": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1409": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1411": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1412": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1413": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1414": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1415": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1416": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1417": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1418": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1419": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1421": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1422": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1423": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1425": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1426": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1427": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1428": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "GT",
      "path": "0"
    },
    "1429": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x585"
    },
    "1432": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1433": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1434": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1435": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SUB",
      "path": "0"
    },
    "1436": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1438": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "AND",
      "path": "0"
    },
    "1439": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1440": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1441": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1442": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1443": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1444": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1445": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1446": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1447": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1448": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1449": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1450": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1452": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1453": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1455": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1456": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1457": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1458": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1459": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1460": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1462": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1463": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1465": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1466": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1467": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1468": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1469": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1470": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1471": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1472": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1473": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1474": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1476": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1477": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1478": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1480": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "ADD",
      "path": "0"
    },
    "1481": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1482": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x464"
    },
    "1485": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1486": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1487": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1488": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1489": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1490": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1491": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1492": {
      "fn": "Voting.getCandidates",
      "offset": [
        2543,
        2560
      ],
      "op": "POP",
      "path": "0"
    },
    "1493": {
      "fn": "Voting.getCandidates",
      "offset": [
        2467,
        2567
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1494": {
      "fn": "Voting.getCandidates",
      "jump": "o",
      "offset": [
        2467,
        2567
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1495": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1496": {
      "fn": "Voting.stringToUint",
      "offset": [
        1458,
        1465
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1498": {
      "fn": "Voting.stringToUint",
      "offset": [
        1458,
        1465
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1499": {
      "fn": "Voting.stringToUint",
      "offset": [
        1539,
        1548
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1500": {
      "fn": "Voting.stringToUint",
      "offset": [
        1458,
        1465
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1501": {
      "fn": "Voting.stringToUint",
      "offset": [
        1559,
        1853
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1502": {
      "fn": "Voting.stringToUint",
      "offset": [
        1583,
        1594
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1503": {
      "fn": "Voting.stringToUint",
      "offset": [
        1583,
        1601
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1504": {
      "fn": "Voting.stringToUint",
      "offset": [
        1579,
        1580
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1505": {
      "fn": "Voting.stringToUint",
      "offset": [
        1579,
        1601
      ],
      "op": "LT",
      "path": "0"
    },
    "1506": {
      "fn": "Voting.stringToUint",
      "offset": [
        1559,
        1853
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1507": {
      "fn": "Voting.stringToUint",
      "offset": [
        1559,
        1853
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x672"
    },
    "1510": {
      "fn": "Voting.stringToUint",
      "offset": [
        1559,
        1853
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1511": {
      "fn": "Voting.stringToUint",
      "offset": [
        1622,
        1633
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1513": {
      "fn": "Voting.stringToUint",
      "offset": [
        1657,
        1658
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1514": {
      "fn": "Voting.stringToUint",
      "offset": [
        1636,
        1647
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1515": {
      "fn": "Voting.stringToUint",
      "offset": [
        1636,
        1654
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1516": {
      "fn": "Voting.stringToUint",
      "offset": [
        1636,
        1658
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5F5"
    },
    "1519": {
      "fn": "Voting.stringToUint",
      "offset": [
        1636,
        1658
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1520": {
      "fn": "Voting.stringToUint",
      "offset": [
        1636,
        1658
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1521": {
      "fn": "Voting.stringToUint",
      "offset": [
        1636,
        1658
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x178A"
    },
    "1524": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1636,
        1658
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1525": {
      "fn": "Voting.stringToUint",
      "offset": [
        1636,
        1658
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1526": {
      "fn": "Voting.stringToUint",
      "offset": [
        1622,
        1658
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1527": {
      "fn": "Voting.stringToUint",
      "offset": [
        1622,
        1658
      ],
      "op": "POP",
      "path": "0"
    },
    "1528": {
      "fn": "Voting.stringToUint",
      "offset": [
        1672,
        1683
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1530": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1697
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1531": {
      "fn": "Voting.stringToUint",
      "offset": [
        1698,
        1699
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1532": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1533": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1534": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1535": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "LT",
      "path": "0"
    },
    "1536": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x60B"
    },
    "1539": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1540": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x60B"
    },
    "1543": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "1546": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1686,
        1700
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1547": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1548": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "ADD",
      "path": "0"
    },
    "1549": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1551": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "ADD",
      "path": "0"
    },
    "1552": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1553": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1555": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1557": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "1559": {
      "op": "SHL"
    },
    "1560": {
      "op": "SUB"
    },
    "1561": {
      "op": "NOT"
    },
    "1562": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1563": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "AND",
      "path": "0"
    },
    "1564": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1565": {
      "op": "POP"
    },
    "1566": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xF8"
    },
    "1568": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "SHR",
      "path": "0"
    },
    "1569": {
      "fn": "Voting.stringToUint",
      "offset": [
        1714,
        1724
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1571": {
      "fn": "Voting.stringToUint",
      "offset": [
        1767,
        1787
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x62D"
    },
    "1574": {
      "fn": "Voting.stringToUint",
      "offset": [
        1782,
        1786
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x30"
    },
    "1576": {
      "fn": "Voting.stringToUint",
      "offset": [
        1686,
        1700
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1577": {
      "fn": "Voting.stringToUint",
      "offset": [
        1767,
        1787
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x178A"
    },
    "1580": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1767,
        1787
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1581": {
      "fn": "Voting.stringToUint",
      "offset": [
        1767,
        1787
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1582": {
      "fn": "Voting.stringToUint",
      "offset": [
        1752,
        1787
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1583": {
      "op": "POP"
    },
    "1584": {
      "fn": "Voting.stringToUint",
      "offset": [
        1832,
        1839
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 7,
      "value": "0x63A"
    },
    "1587": {
      "fn": "Voting.stringToUint",
      "offset": [
        1838,
        1839
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1589": {
      "fn": "Voting.stringToUint",
      "offset": [
        1832,
        1835
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1590": {
      "fn": "Voting.stringToUint",
      "offset": [
        1832,
        1839
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x178A"
    },
    "1593": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1832,
        1839
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1594": {
      "fn": "Voting.stringToUint",
      "offset": [
        1832,
        1839
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1595": {
      "fn": "Voting.stringToUint",
      "offset": [
        1827,
        1840
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x645"
    },
    "1598": {
      "fn": "Voting.stringToUint",
      "offset": [
        1827,
        1840
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1599": {
      "fn": "Voting.stringToUint",
      "offset": [
        1827,
        1829
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xA"
    },
    "1601": {
      "fn": "Voting.stringToUint",
      "offset": [
        1827,
        1840
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1887"
    },
    "1604": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1827,
        1840
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1605": {
      "fn": "Voting.stringToUint",
      "offset": [
        1827,
        1840
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1606": {
      "fn": "Voting.stringToUint",
      "offset": [
        1810,
        1841
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x64F"
    },
    "1609": {
      "fn": "Voting.stringToUint",
      "offset": [
        1810,
        1841
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1610": {
      "fn": "Voting.stringToUint",
      "offset": [
        1818,
        1822
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1611": {
      "fn": "Voting.stringToUint",
      "offset": [
        1810,
        1841
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1893"
    },
    "1614": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1810,
        1841
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1615": {
      "fn": "Voting.stringToUint",
      "offset": [
        1810,
        1841
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1616": {
      "fn": "Voting.stringToUint",
      "offset": [
        1802,
        1842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x659"
    },
    "1619": {
      "fn": "Voting.stringToUint",
      "offset": [
        1802,
        1842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1620": {
      "fn": "Voting.stringToUint",
      "offset": [
        1802,
        1842
      ],
      "op": "DUP9",
      "path": "0"
    },
    "1621": {
      "fn": "Voting.stringToUint",
      "offset": [
        1802,
        1842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1737"
    },
    "1624": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1802,
        1842
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1625": {
      "fn": "Voting.stringToUint",
      "offset": [
        1802,
        1842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1626": {
      "fn": "Voting.stringToUint",
      "offset": [
        1802,
        1842
      ],
      "op": "SWAP7",
      "path": "0"
    },
    "1627": {
      "fn": "Voting.stringToUint",
      "offset": [
        1802,
        1842
      ],
      "op": "POP",
      "path": "0"
    },
    "1628": {
      "fn": "Voting.stringToUint",
      "offset": [
        1608,
        1853
      ],
      "op": "POP",
      "path": "0"
    },
    "1629": {
      "fn": "Voting.stringToUint",
      "offset": [
        1608,
        1853
      ],
      "op": "POP",
      "path": "0"
    },
    "1630": {
      "fn": "Voting.stringToUint",
      "offset": [
        1608,
        1853
      ],
      "op": "POP",
      "path": "0"
    },
    "1631": {
      "fn": "Voting.stringToUint",
      "offset": [
        1608,
        1853
      ],
      "op": "POP",
      "path": "0"
    },
    "1632": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 8
    },
    "1633": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1634": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x66A"
    },
    "1637": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1638": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18B2"
    },
    "1641": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        1603,
        1606
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1642": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1643": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1644": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "POP",
      "path": "0"
    },
    "1645": {
      "fn": "Voting.stringToUint",
      "offset": [
        1603,
        1606
      ],
      "op": "POP",
      "path": "0"
    },
    "1646": {
      "fn": "Voting.stringToUint",
      "offset": [
        1559,
        1853
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5DD"
    },
    "1649": {
      "fn": "Voting.stringToUint",
      "offset": [
        1559,
        1853
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1650": {
      "fn": "Voting.stringToUint",
      "offset": [
        1559,
        1853
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1651": {
      "op": "POP"
    },
    "1652": {
      "fn": "Voting.stringToUint",
      "offset": [
        1869,
        1872
      ],
      "op": "SWAP1",
      "path": "0",
      "statement": 9
    },
    "1653": {
      "fn": "Voting.stringToUint",
      "offset": [
        1869,
        1872
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1654": {
      "fn": "Voting.stringToUint",
      "offset": [
        1366,
        1879
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1655": {
      "op": "POP"
    },
    "1656": {
      "op": "POP"
    },
    "1657": {
      "op": "POP"
    },
    "1658": {
      "fn": "Voting.stringToUint",
      "jump": "o",
      "offset": [
        1366,
        1879
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1659": {
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1660": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1662": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1663": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1664": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1665": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1666": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "LT",
      "path": "0"
    },
    "1667": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x68B"
    },
    "1670": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1671": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1673": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1674": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "REVERT",
      "path": "0"
    },
    "1675": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1676": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1677": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1679": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1680": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1682": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1684": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1685": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1686": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1688": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MUL",
      "path": "0"
    },
    "1689": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1690": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1692": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1693": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1694": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1695": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1696": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1697": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1699": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1700": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1701": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1702": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6AE"
    },
    "1705": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1706": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "1709": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1710": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1711": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1712": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1714": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1715": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1717": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1718": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1719": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DIV",
      "path": "0"
    },
    "1720": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MUL",
      "path": "0"
    },
    "1721": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1723": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1724": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1726": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1727": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1728": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1729": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1730": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1732": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1733": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1734": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1735": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1736": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1737": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1738": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1739": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1740": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1742": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1743": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1744": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1745": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1746": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6DA"
    },
    "1749": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1750": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "1753": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1754": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1755": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1756": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1757": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x727"
    },
    "1760": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1761": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1762": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1764": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "LT",
      "path": "0"
    },
    "1765": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6FC"
    },
    "1768": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1769": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1772": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1773": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1774": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1775": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DIV",
      "path": "0"
    },
    "1776": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MUL",
      "path": "0"
    },
    "1777": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1778": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1779": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1780": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1782": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1783": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1784": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x727"
    },
    "1787": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1788": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1789": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1790": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1791": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1792": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1793": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1795": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1796": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1798": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1800": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1801": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1802": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1803": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1804": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1805": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1806": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1807": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1808": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1810": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1811": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1812": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1814": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1815": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1816": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1817": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "GT",
      "path": "0"
    },
    "1818": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x70A"
    },
    "1821": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1822": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1823": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1824": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SUB",
      "path": "0"
    },
    "1825": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1827": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "AND",
      "path": "0"
    },
    "1828": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1829": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1830": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1831": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1832": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1833": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1834": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1835": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1836": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1837": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1838": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1839": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1841": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1842": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1843": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1844": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x73C"
    },
    "1847": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1848": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "1851": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1852": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1853": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1854": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1856": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1857": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1859": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1860": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1861": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DIV",
      "path": "0"
    },
    "1862": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MUL",
      "path": "0"
    },
    "1863": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1865": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1866": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1868": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1869": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1870": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1871": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1872": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1874": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1875": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1876": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1877": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1878": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1879": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1880": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1881": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1882": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1884": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1885": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1886": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1887": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1888": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x768"
    },
    "1891": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1892": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "1895": {
      "fn": "Voting.stringToUint",
      "jump": "i",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1896": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1897": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1898": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1899": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7B5"
    },
    "1902": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1903": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1904": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1906": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "LT",
      "path": "0"
    },
    "1907": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x78A"
    },
    "1910": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1911": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "1914": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1915": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1916": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1917": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DIV",
      "path": "0"
    },
    "1918": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MUL",
      "path": "0"
    },
    "1919": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1920": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1921": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1922": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1924": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1925": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1926": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7B5"
    },
    "1929": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1930": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1931": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1932": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1933": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1934": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1935": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1937": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1938": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1940": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1942": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1943": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1944": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1945": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1946": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1947": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1948": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1949": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1950": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1952": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1953": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1954": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1956": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1957": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1958": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1959": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "GT",
      "path": "0"
    },
    "1960": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x798"
    },
    "1963": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1964": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1965": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1966": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SUB",
      "path": "0"
    },
    "1967": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1969": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "AND",
      "path": "0"
    },
    "1970": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1971": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1972": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1973": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1974": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1975": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1976": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1977": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1978": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1979": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1980": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1981": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1983": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1984": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1985": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1986": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1987": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "1989": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "ADD",
      "path": "0"
    },
    "1990": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1991": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1992": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "POP",
      "path": "0"
    },
    "1993": {
      "fn": "Voting.stringToUint",
      "offset": [
        562,
        591
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1994": {
      "fn": "Voting.stringToUint",
      "jump": "o",
      "offset": [
        562,
        591
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1995": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3419,
        3889
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1996": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3515,
        3526
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 10,
      "value": "0x0"
    },
    "1998": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3515,
        3526
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1999": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2001": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2003": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2005": {
      "op": "SHL"
    },
    "2006": {
      "op": "SUB"
    },
    "2007": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3515,
        3526
      ],
      "op": "AND",
      "path": "0"
    },
    "2008": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3501,
        3511
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2009": {
      "branch": 41,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3501,
        3526
      ],
      "op": "EQ",
      "path": "0"
    },
    "2010": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x83B"
    },
    "2013": {
      "branch": 41,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2014": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2016": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2017": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2021": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2023": {
      "op": "SHL"
    },
    "2024": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2025": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2026": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2028": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2030": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2031": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "ADD",
      "path": "0"
    },
    "2032": {
      "op": "MSTORE"
    },
    "2033": {
      "op": "PUSH1",
      "value": "0x2D"
    },
    "2035": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2037": {
      "op": "DUP3"
    },
    "2038": {
      "op": "ADD"
    },
    "2039": {
      "op": "MSTORE"
    },
    "2040": {
      "op": "PUSH32",
      "value": "0x4F6E6C792063686169726D616E2063616E20676976652064656E6F756E636520"
    },
    "2073": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2075": {
      "op": "DUP3"
    },
    "2076": {
      "op": "ADD"
    },
    "2077": {
      "op": "MSTORE"
    },
    "2078": {
      "op": "PUSH13",
      "value": "0x726967687420746F20766F7465"
    },
    "2092": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "2094": {
      "op": "SHL"
    },
    "2095": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2097": {
      "op": "DUP3"
    },
    "2098": {
      "op": "ADD"
    },
    "2099": {
      "op": "MSTORE"
    },
    "2100": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2102": {
      "op": "ADD"
    },
    "2103": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "2106": {
      "op": "JUMP"
    },
    "2107": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3480,
        3597
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2108": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2110": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2112": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2114": {
      "op": "SHL"
    },
    "2115": {
      "op": "SUB"
    },
    "2116": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 11
    },
    "2117": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "AND",
      "path": "0"
    },
    "2118": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2120": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2121": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2122": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2123": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3635
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2125": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2127": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2128": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2130": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2131": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3642
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2132": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3660
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2134": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3660
      ],
      "op": "ADD",
      "path": "0"
    },
    "2135": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3660
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2136": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3660
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2139": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3660
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2140": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3660
      ],
      "op": "DIV",
      "path": "0"
    },
    "2141": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3660
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2143": {
      "branch": 42,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3629,
        3660
      ],
      "op": "AND",
      "path": "0"
    },
    "2144": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3628,
        3660
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2145": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3628,
        3660
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2146": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3628,
        3692
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88D"
    },
    "2149": {
      "branch": 42,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3628,
        3692
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2150": {
      "op": "POP"
    },
    "2151": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2153": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2155": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2157": {
      "op": "SHL"
    },
    "2158": {
      "op": "SUB"
    },
    "2159": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2160": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "AND",
      "path": "0"
    },
    "2161": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2163": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2164": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2165": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2166": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3671
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2168": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2170": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2171": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2173": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2174": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3678
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2175": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3692
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2177": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3692
      ],
      "op": "ADD",
      "path": "0"
    },
    "2178": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3692
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2179": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3692
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "2183": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3692
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2184": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3692
      ],
      "op": "DIV",
      "path": "0"
    },
    "2185": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3692
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2187": {
      "branch": 43,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3665,
        3692
      ],
      "op": "AND",
      "path": "0"
    },
    "2188": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3664,
        3692
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2189": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3628,
        3692
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2190": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8D3"
    },
    "2193": {
      "branch": 43,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2194": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2196": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2197": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2201": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2203": {
      "op": "SHL"
    },
    "2204": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2205": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2206": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2208": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2210": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2211": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "ADD",
      "path": "0"
    },
    "2212": {
      "op": "MSTORE"
    },
    "2213": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "2215": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2217": {
      "op": "DUP3"
    },
    "2218": {
      "op": "ADD"
    },
    "2219": {
      "op": "MSTORE"
    },
    "2220": {
      "op": "PUSH23",
      "value": "0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959"
    },
    "2244": {
      "op": "PUSH1",
      "value": "0x4A"
    },
    "2246": {
      "op": "SHL"
    },
    "2247": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2249": {
      "op": "DUP3"
    },
    "2250": {
      "op": "ADD"
    },
    "2251": {
      "op": "MSTORE"
    },
    "2252": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2254": {
      "op": "ADD"
    },
    "2255": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "2258": {
      "op": "JUMP"
    },
    "2259": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3607,
        3741
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2260": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2262": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2264": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2266": {
      "op": "SHL"
    },
    "2267": {
      "op": "SUB"
    },
    "2268": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 12
    },
    "2269": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "AND",
      "path": "0"
    },
    "2270": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2272": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2273": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2274": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2275": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2277": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2279": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2280": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2282": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2283": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3772
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2284": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3780
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2286": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3780
      ],
      "op": "ADD",
      "path": "0"
    },
    "2287": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3780
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2288": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3780
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2290": {
      "branch": 44,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3759,
        3780
      ],
      "op": "AND",
      "path": "0"
    },
    "2291": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x93E"
    },
    "2294": {
      "branch": 44,
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2295": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2297": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2298": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2302": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2304": {
      "op": "SHL"
    },
    "2305": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2306": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2307": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2309": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2311": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2312": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "ADD",
      "path": "0"
    },
    "2313": {
      "op": "DUP2"
    },
    "2314": {
      "op": "SWAP1"
    },
    "2315": {
      "op": "MSTORE"
    },
    "2316": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2318": {
      "op": "DUP3"
    },
    "2319": {
      "op": "ADD"
    },
    "2320": {
      "op": "MSTORE"
    },
    "2321": {
      "op": "PUSH32",
      "value": "0x566F74657220646F65736E2774206861766520726967687420746F20766F7465"
    },
    "2354": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2356": {
      "op": "DUP3"
    },
    "2357": {
      "op": "ADD"
    },
    "2358": {
      "op": "MSTORE"
    },
    "2359": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2361": {
      "op": "ADD"
    },
    "2362": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "2365": {
      "op": "JUMP"
    },
    "2366": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3751,
        3817
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2367": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2369": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2371": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2373": {
      "op": "SHL"
    },
    "2374": {
      "op": "SUB"
    },
    "2375": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 13
    },
    "2376": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "AND",
      "path": "0"
    },
    "2377": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3851,
        3856
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2379": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2380": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2381": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2382": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3833
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2384": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2386": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2387": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2388": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2389": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2391": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2392": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3840
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2393": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3848
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2395": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3848
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2396": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3848
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2397": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3848
      ],
      "op": "ADD",
      "path": "0"
    },
    "2398": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3856
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2399": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3856
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2400": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2402": {
      "op": "NOT"
    },
    "2403": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3856
      ],
      "op": "AND",
      "path": "0"
    },
    "2404": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3856
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2405": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3856
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2406": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 14
    },
    "2407": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2408": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3833
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2409": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3833
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2410": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3848
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2411": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3848
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2412": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x976"
    },
    "2415": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2416": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3833
      ],
      "op": "DUP5",
      "path": "0"
    },
    "2417": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3827,
        3833
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2418": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x178A"
    },
    "2421": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        3866,
        3882
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2422": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2423": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2424": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2425": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        3866,
        3882
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "2426": {
      "op": "POP"
    },
    "2427": {
      "op": "POP"
    },
    "2428": {
      "op": "POP"
    },
    "2429": {
      "fn": "Voting.removeRightToVote",
      "jump": "o",
      "offset": [
        3419,
        3889
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2430": {
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2431": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2433": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2434": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2435": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2436": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2437": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "LT",
      "path": "0"
    },
    "2438": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x98E"
    },
    "2441": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2442": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2444": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2445": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "REVERT",
      "path": "0"
    },
    "2446": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2447": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2448": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2450": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2451": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2453": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2455": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2456": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2457": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2459": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MUL",
      "path": "0"
    },
    "2460": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2461": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2463": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2464": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "POP",
      "path": "0"
    },
    "2465": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2466": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "POP",
      "path": "0"
    },
    "2467": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2468": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2470": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2471": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2472": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2473": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9B1"
    },
    "2476": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2477": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "2480": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        597,
        619
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2481": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2482": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2483": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2485": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2486": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2488": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2489": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2490": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DIV",
      "path": "0"
    },
    "2491": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MUL",
      "path": "0"
    },
    "2492": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2494": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2495": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2497": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2498": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2499": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2500": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2501": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2503": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2504": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2505": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "2506": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2507": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2508": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2509": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2510": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2511": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2513": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2514": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2515": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2516": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2517": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9DD"
    },
    "2520": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2521": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "2524": {
      "fn": "Voting.removeRightToVote",
      "jump": "i",
      "offset": [
        597,
        619
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2525": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2526": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2527": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2528": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA2A"
    },
    "2531": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2532": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2533": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2535": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "LT",
      "path": "0"
    },
    "2536": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9FF"
    },
    "2539": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2540": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2543": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2544": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2545": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2546": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DIV",
      "path": "0"
    },
    "2547": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MUL",
      "path": "0"
    },
    "2548": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2549": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2550": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2551": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2553": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2554": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2555": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA2A"
    },
    "2558": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2559": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2560": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2561": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2562": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2563": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2564": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2566": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2567": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2569": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2571": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2572": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2573": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2574": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2575": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2576": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2577": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2578": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2579": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2581": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2582": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2583": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2585": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2586": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2587": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2588": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "GT",
      "path": "0"
    },
    "2589": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA0D"
    },
    "2592": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2593": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2594": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2595": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SUB",
      "path": "0"
    },
    "2596": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "2598": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "AND",
      "path": "0"
    },
    "2599": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2600": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2601": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2602": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2603": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "POP",
      "path": "0"
    },
    "2604": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "POP",
      "path": "0"
    },
    "2605": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "POP",
      "path": "0"
    },
    "2606": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "POP",
      "path": "0"
    },
    "2607": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "POP",
      "path": "0"
    },
    "2608": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2609": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP1",
      "path": "0"
    },
    "2610": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2612": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "ADD",
      "path": "0"
    },
    "2613": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2614": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2615": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "POP",
      "path": "0"
    },
    "2616": {
      "fn": "Voting.removeRightToVote",
      "offset": [
        597,
        619
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2617": {
      "fn": "Voting.removeRightToVote",
      "jump": "o",
      "offset": [
        597,
        619
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2618": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3895,
        4355
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2619": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3986,
        3996
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2620": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3956,
        3976
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2622": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3997
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2623": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3997
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2624": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3997
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2625": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3985
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2627": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3997
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2629": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3997
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2630": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3997
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2632": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3997
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2633": {
      "fn": "Voting.voteCandidate",
      "offset": [
        3979,
        3997
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2634": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4015,
        4029
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 15,
      "value": "0x2"
    },
    "2636": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4015,
        4029
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2637": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4015,
        4029
      ],
      "op": "ADD",
      "path": "0"
    },
    "2638": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4015,
        4029
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2639": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4015,
        4029
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2641": {
      "branch": 45,
      "fn": "Voting.voteCandidate",
      "offset": [
        4015,
        4029
      ],
      "op": "AND",
      "path": "0"
    },
    "2642": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA94"
    },
    "2645": {
      "branch": 45,
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2646": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2648": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2649": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2653": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2655": {
      "op": "SHL"
    },
    "2656": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2657": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2658": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2660": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2662": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2663": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "ADD",
      "path": "0"
    },
    "2664": {
      "op": "MSTORE"
    },
    "2665": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "2667": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2669": {
      "op": "DUP3"
    },
    "2670": {
      "op": "ADD"
    },
    "2671": {
      "op": "MSTORE"
    },
    "2672": {
      "op": "PUSH20",
      "value": "0x486173206E6F20726967687420746F20766F7465"
    },
    "2693": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2695": {
      "op": "SHL"
    },
    "2696": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2698": {
      "op": "DUP3"
    },
    "2699": {
      "op": "ADD"
    },
    "2700": {
      "op": "MSTORE"
    },
    "2701": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2703": {
      "op": "ADD"
    },
    "2704": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "2707": {
      "op": "JUMP"
    },
    "2708": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4007,
        4054
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2709": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 16,
      "value": "0x2"
    },
    "2711": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2712": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "ADD",
      "path": "0"
    },
    "2713": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2714": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "2717": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2718": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "DIV",
      "path": "0"
    },
    "2719": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "2721": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4073,
        4097
      ],
      "op": "AND",
      "path": "0"
    },
    "2722": {
      "branch": 46,
      "fn": "Voting.voteCandidate",
      "offset": [
        4072,
        4097
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "2723": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAEE"
    },
    "2726": {
      "branch": 46,
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2727": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2729": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2730": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2734": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2736": {
      "op": "SHL"
    },
    "2737": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2738": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2739": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2741": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2743": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2744": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "ADD",
      "path": "0"
    },
    "2745": {
      "op": "MSTORE"
    },
    "2746": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "2748": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2750": {
      "op": "DUP3"
    },
    "2751": {
      "op": "ADD"
    },
    "2752": {
      "op": "MSTORE"
    },
    "2753": {
      "op": "PUSH32",
      "value": "0x616C726561647920766F74656420666F722063616E6469646174650000000000"
    },
    "2786": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2788": {
      "op": "DUP3"
    },
    "2789": {
      "op": "ADD"
    },
    "2790": {
      "op": "MSTORE"
    },
    "2791": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2793": {
      "op": "ADD"
    },
    "2794": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "2797": {
      "op": "JUMP"
    },
    "2798": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4064,
        4129
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2799": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4185
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 17,
      "value": "0x3"
    },
    "2801": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4186,
        4195
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2802": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2803": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2804": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2805": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "LT",
      "path": "0"
    },
    "2806": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB01"
    },
    "2809": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2810": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB01"
    },
    "2813": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "2816": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        4175,
        4196
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2817": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2818": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2819": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2821": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2822": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2824": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2826": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2827": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2828": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2830": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "MUL",
      "path": "0"
    },
    "2831": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4196
      ],
      "op": "ADD",
      "path": "0"
    },
    "2832": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4201
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "2834": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4201
      ],
      "op": "ADD",
      "path": "0"
    },
    "2835": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4175,
        4201
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2836": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4160,
        4166
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2837": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4160,
        4171
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "2839": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4160,
        4171
      ],
      "op": "ADD",
      "path": "0"
    },
    "2840": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4160,
        4171
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2841": {
      "branch": 47,
      "fn": "Voting.voteCandidate",
      "offset": [
        4160,
        4201
      ],
      "op": "EQ",
      "path": "0"
    },
    "2842": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB70"
    },
    "2845": {
      "branch": 47,
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2846": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2848": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2849": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2853": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2855": {
      "op": "SHL"
    },
    "2856": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2857": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2858": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2860": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2862": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2863": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "ADD",
      "path": "0"
    },
    "2864": {
      "op": "MSTORE"
    },
    "2865": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2867": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2869": {
      "op": "DUP3"
    },
    "2870": {
      "op": "ADD"
    },
    "2871": {
      "op": "MSTORE"
    },
    "2872": {
      "op": "PUSH32",
      "value": "0x63616E6E6F7420766F74652063616E64696461746520696E2074686973206172"
    },
    "2905": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2907": {
      "op": "DUP3"
    },
    "2908": {
      "op": "ADD"
    },
    "2909": {
      "op": "MSTORE"
    },
    "2910": {
      "op": "PUSH2",
      "value": "0x6561"
    },
    "2913": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "2915": {
      "op": "SHL"
    },
    "2916": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2918": {
      "op": "DUP3"
    },
    "2919": {
      "op": "ADD"
    },
    "2920": {
      "op": "MSTORE"
    },
    "2921": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2923": {
      "op": "ADD"
    },
    "2924": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "2927": {
      "op": "JUMP"
    },
    "2928": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4139,
        4261
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2929": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4306,
        4307
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 18,
      "value": "0x1"
    },
    "2931": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4281
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2933": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4282,
        4291
      ],
      "op": "DUP4",
      "path": "0"
    },
    "2934": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2935": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2936": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2937": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "LT",
      "path": "0"
    },
    "2938": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB85"
    },
    "2941": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2942": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB85"
    },
    "2945": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "2948": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        4271,
        4292
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2949": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2950": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2951": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2953": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2954": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "2956": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2958": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "2959": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2960": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2962": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "MUL",
      "path": "0"
    },
    "2963": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4292
      ],
      "op": "ADD",
      "path": "0"
    },
    "2964": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4302
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "2966": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4302
      ],
      "op": "ADD",
      "path": "0"
    },
    "2967": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4302
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2969": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4307
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2970": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4307
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2971": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4307
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2972": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4307
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x428"
    },
    "2975": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4307
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "2976": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4307
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "2977": {
      "fn": "Voting.voteCandidate",
      "offset": [
        4271,
        4307
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1737"
    },
    "2980": {
      "fn": "Voting.voteCandidate",
      "jump": "i",
      "offset": [
        4271,
        4307
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2981": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2982": {
      "fn": "Voting.addCandidates",
      "offset": [
        2002,
        2013
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 19,
      "value": "0x0"
    },
    "2984": {
      "fn": "Voting.addCandidates",
      "offset": [
        2002,
        2013
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2985": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2987": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2989": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2991": {
      "op": "SHL"
    },
    "2992": {
      "op": "SUB"
    },
    "2993": {
      "fn": "Voting.addCandidates",
      "offset": [
        2002,
        2013
      ],
      "op": "AND",
      "path": "0"
    },
    "2994": {
      "fn": "Voting.addCandidates",
      "offset": [
        1988,
        1998
      ],
      "op": "CALLER",
      "path": "0"
    },
    "2995": {
      "branch": 48,
      "fn": "Voting.addCandidates",
      "offset": [
        1988,
        2013
      ],
      "op": "EQ",
      "path": "0"
    },
    "2996": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBCF"
    },
    "2999": {
      "branch": 48,
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3000": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3002": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3003": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3007": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3009": {
      "op": "SHL"
    },
    "3010": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3011": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3012": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3014": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "ADD",
      "path": "0"
    },
    "3015": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "3018": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3019": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18CD"
    },
    "3022": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        1967,
        2079
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3023": {
      "fn": "Voting.addCandidates",
      "offset": [
        1967,
        2079
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3024": {
      "fn": "Voting.addCandidates",
      "offset": [
        2094,
        2103
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3026": {
      "fn": "Voting.addCandidates",
      "offset": [
        2089,
        2455
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3027": {
      "fn": "Voting.addCandidates",
      "offset": [
        2113,
        2132
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3028": {
      "fn": "Voting.addCandidates",
      "offset": [
        2113,
        2139
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3029": {
      "fn": "Voting.addCandidates",
      "offset": [
        2109,
        2110
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3030": {
      "fn": "Voting.addCandidates",
      "offset": [
        2109,
        2139
      ],
      "op": "LT",
      "path": "0"
    },
    "3031": {
      "fn": "Voting.addCandidates",
      "offset": [
        2089,
        2455
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3032": {
      "fn": "Voting.addCandidates",
      "offset": [
        2089,
        2455
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD03"
    },
    "3035": {
      "fn": "Voting.addCandidates",
      "offset": [
        2089,
        2455
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3036": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2170
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 20,
      "value": "0x3"
    },
    "3038": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3040": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3041": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3042": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "3044": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "ADD",
      "path": "0"
    },
    "3045": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3047": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3048": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3049": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2250
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3050": {
      "fn": "Voting.addCandidates",
      "offset": [
        2251,
        2252
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3051": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3052": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3053": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3054": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "LT",
      "path": "0"
    },
    "3055": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBFA"
    },
    "3058": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3059": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBFA"
    },
    "3062": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3065": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2231,
        2253
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3066": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3067": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3069": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "MUL",
      "path": "0"
    },
    "3070": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3072": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "ADD",
      "path": "0"
    },
    "3073": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "ADD",
      "path": "0"
    },
    "3074": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2253
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3075": {
      "fn": "Voting.addCandidates",
      "offset": [
        2254,
        2255
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3077": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3079": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3080": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "LT",
      "path": "0"
    },
    "3081": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC14"
    },
    "3084": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3085": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC14"
    },
    "3088": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3091": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2231,
        2256
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3092": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3093": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3095": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "MUL",
      "path": "0"
    },
    "3096": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "ADD",
      "path": "0"
    },
    "3097": {
      "fn": "Voting.addCandidates",
      "offset": [
        2231,
        2256
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3098": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3099": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3100": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3102": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "ADD",
      "path": "0"
    },
    "3103": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2304
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3104": {
      "fn": "Voting.addCandidates",
      "offset": [
        2305,
        2306
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3105": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3106": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3107": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3108": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "LT",
      "path": "0"
    },
    "3109": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC30"
    },
    "3112": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3113": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC30"
    },
    "3116": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3119": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2285,
        2307
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3120": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3121": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3123": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "MUL",
      "path": "0"
    },
    "3124": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3126": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "ADD",
      "path": "0"
    },
    "3127": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "ADD",
      "path": "0"
    },
    "3128": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2307
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3129": {
      "fn": "Voting.addCandidates",
      "offset": [
        2308,
        2309
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3131": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3133": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3134": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "LT",
      "path": "0"
    },
    "3135": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC4A"
    },
    "3138": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3139": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC4A"
    },
    "3142": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3145": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2285,
        2310
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3146": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3147": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3149": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "MUL",
      "path": "0"
    },
    "3150": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "ADD",
      "path": "0"
    },
    "3151": {
      "fn": "Voting.addCandidates",
      "offset": [
        2285,
        2310
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3152": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3153": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3154": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3156": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "ADD",
      "path": "0"
    },
    "3157": {
      "fn": "Voting.addCandidates",
      "offset": [
        2338,
        2377
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC8D"
    },
    "3160": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2370
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3161": {
      "fn": "Voting.addCandidates",
      "offset": [
        2371,
        2372
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3162": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3163": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3164": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3165": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "LT",
      "path": "0"
    },
    "3166": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC69"
    },
    "3169": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3170": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC69"
    },
    "3173": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3176": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2351,
        2373
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3177": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3178": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3180": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "MUL",
      "path": "0"
    },
    "3181": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3183": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "ADD",
      "path": "0"
    },
    "3184": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "ADD",
      "path": "0"
    },
    "3185": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2373
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3186": {
      "fn": "Voting.addCandidates",
      "offset": [
        2374,
        2375
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3188": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3190": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3191": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "LT",
      "path": "0"
    },
    "3192": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC83"
    },
    "3195": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3196": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC83"
    },
    "3199": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3202": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2351,
        2376
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3203": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3204": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3206": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "MUL",
      "path": "0"
    },
    "3207": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "ADD",
      "path": "0"
    },
    "3208": {
      "fn": "Voting.addCandidates",
      "offset": [
        2351,
        2376
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3209": {
      "fn": "Voting.addCandidates",
      "offset": [
        2338,
        2350
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D7"
    },
    "3212": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2338,
        2377
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3213": {
      "fn": "Voting.addCandidates",
      "offset": [
        2338,
        2377
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3214": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3215": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3216": {
      "fn": "Voting.addCandidates",
      "offset": [
        2410,
        2411
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3218": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3220": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3221": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3222": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "ADD",
      "path": "0"
    },
    "3223": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3224": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3225": {
      "fn": "Voting.addCandidates",
      "offset": [
        2193,
        2430
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3226": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3227": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3228": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3230": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3231": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3232": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3233": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3234": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3235": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3236": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3237": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3238": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3239": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3240": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3241": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3242": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3243": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3244": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3245": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "3246": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3248": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "MUL",
      "path": "0"
    },
    "3249": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3250": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3251": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3252": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3253": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC1"
    },
    "3256": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3257": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP5",
      "path": "0"
    },
    "3258": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3259": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3260": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3261": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x118F"
    },
    "3264": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2160,
        2444
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3265": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3266": {
      "op": "POP"
    },
    "3267": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3269": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3270": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3271": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3272": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3273": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3274": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3275": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCDA"
    },
    "3278": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3279": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3281": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3282": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3283": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3284": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3285": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3286": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x118F"
    },
    "3289": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2160,
        2444
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3290": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3291": {
      "op": "POP"
    },
    "3292": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3294": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3295": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3296": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3297": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3299": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3300": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3301": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3302": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "3304": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3305": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3306": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3307": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3308": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3310": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3311": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3312": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "ADD",
      "path": "0"
    },
    "3313": {
      "fn": "Voting.addCandidates",
      "offset": [
        2160,
        2444
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3314": {
      "fn": "Voting.addCandidates",
      "offset": [
        2141,
        2144
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 21
    },
    "3315": {
      "fn": "Voting.addCandidates",
      "offset": [
        2141,
        2144
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCFB"
    },
    "3318": {
      "fn": "Voting.addCandidates",
      "offset": [
        2141,
        2144
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3319": {
      "fn": "Voting.addCandidates",
      "offset": [
        2141,
        2144
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18B2"
    },
    "3322": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        2141,
        2144
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3323": {
      "fn": "Voting.addCandidates",
      "offset": [
        2141,
        2144
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3324": {
      "fn": "Voting.addCandidates",
      "offset": [
        2141,
        2144
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3325": {
      "fn": "Voting.addCandidates",
      "offset": [
        2141,
        2144
      ],
      "op": "POP",
      "path": "0"
    },
    "3326": {
      "fn": "Voting.addCandidates",
      "offset": [
        2141,
        2144
      ],
      "op": "POP",
      "path": "0"
    },
    "3327": {
      "fn": "Voting.addCandidates",
      "offset": [
        2089,
        2455
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBD2"
    },
    "3330": {
      "fn": "Voting.addCandidates",
      "offset": [
        2089,
        2455
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3331": {
      "fn": "Voting.addCandidates",
      "offset": [
        2089,
        2455
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3332": {
      "fn": "Voting.addCandidates",
      "offset": [
        2089,
        2455
      ],
      "op": "POP",
      "path": "0"
    },
    "3333": {
      "fn": "Voting.addCandidates",
      "offset": [
        1885,
        2461
      ],
      "op": "POP",
      "path": "0"
    },
    "3334": {
      "fn": "Voting.addCandidates",
      "jump": "o",
      "offset": [
        1885,
        2461
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3335": {
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3336": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3338": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3340": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3341": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3343": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3344": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3345": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3346": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3348": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3349": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3350": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3351": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3352": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3353": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3354": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD22"
    },
    "3357": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3358": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "3361": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        488,
        527
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3362": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3363": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3364": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3366": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3367": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3369": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3370": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3371": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DIV",
      "path": "0"
    },
    "3372": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MUL",
      "path": "0"
    },
    "3373": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3375": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3376": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3378": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3379": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3380": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3381": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3382": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3384": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3385": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3386": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3387": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3388": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3389": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3390": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3391": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3392": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3394": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3395": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3396": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3397": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3398": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD4E"
    },
    "3401": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3402": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "3405": {
      "fn": "Voting.addCandidates",
      "jump": "i",
      "offset": [
        488,
        527
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3406": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3407": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3408": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3409": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD9B"
    },
    "3412": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3413": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3414": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3416": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "LT",
      "path": "0"
    },
    "3417": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD70"
    },
    "3420": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3421": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3424": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3425": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3426": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3427": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DIV",
      "path": "0"
    },
    "3428": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MUL",
      "path": "0"
    },
    "3429": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3430": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3431": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3432": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3434": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3435": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3436": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD9B"
    },
    "3439": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3440": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3441": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3442": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3443": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3444": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3445": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3447": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3448": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3450": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3452": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3453": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3454": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3455": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3456": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3457": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3458": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3459": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3460": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3462": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3463": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3464": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3466": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3467": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3468": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3469": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "GT",
      "path": "0"
    },
    "3470": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD7E"
    },
    "3473": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3474": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3475": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3476": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SUB",
      "path": "0"
    },
    "3477": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3479": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "AND",
      "path": "0"
    },
    "3480": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3481": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3482": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3483": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3484": {
      "op": "POP"
    },
    "3485": {
      "op": "POP"
    },
    "3486": {
      "op": "POP"
    },
    "3487": {
      "op": "POP"
    },
    "3488": {
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3490": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3491": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3492": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3493": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3495": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3496": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3497": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "ADD",
      "path": "0"
    },
    "3498": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3499": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3500": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3501": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3502": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "3504": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3505": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3506": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "AND",
      "path": "0"
    },
    "3507": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3508": {
      "op": "POP"
    },
    "3509": {
      "offset": [
        488,
        527
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3512": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3513": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DIV",
      "path": "0"
    },
    "3514": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3515": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "AND",
      "path": "0"
    },
    "3516": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3517": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "3521": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3522": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DIV",
      "path": "0"
    },
    "3523": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "AND",
      "path": "0"
    },
    "3524": {
      "fn": "Voting.addCandidates",
      "offset": [
        488,
        527
      ],
      "op": "DUP6",
      "path": "0"
    },
    "3525": {
      "fn": "Voting.addCandidates",
      "jump": "o",
      "offset": [
        488,
        527
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3526": {
      "fn": "Voting.getParties",
      "offset": [
        2573,
        2663
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3527": {
      "fn": "Voting.getParties",
      "offset": [
        2616,
        2630
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "3529": {
      "fn": "Voting.getParties",
      "offset": [
        2649,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 22,
      "value": "0x4"
    },
    "3531": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3532": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3533": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3534": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3536": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MUL",
      "path": "0"
    },
    "3537": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3539": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3540": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3542": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3543": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3544": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3545": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3546": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3548": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3549": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3550": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3551": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3552": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3553": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3554": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3555": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3556": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3558": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3559": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3561": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3562": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3563": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3564": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3565": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "LT",
      "path": "0"
    },
    "3566": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3567": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5CE"
    },
    "3570": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3571": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3572": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3573": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3574": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3576": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3577": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3579": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3581": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3582": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3583": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3585": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MUL",
      "path": "0"
    },
    "3586": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3587": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3589": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3590": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3591": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3593": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3594": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3596": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3597": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3598": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3599": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3601": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3602": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3603": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3604": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3605": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE1D"
    },
    "3608": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3609": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "3612": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3613": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3614": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3615": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3617": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3618": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3620": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3621": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3622": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DIV",
      "path": "0"
    },
    "3623": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MUL",
      "path": "0"
    },
    "3624": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3626": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3627": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3629": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3630": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3631": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3632": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3633": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3635": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3636": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3637": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3638": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3639": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3640": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3641": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3642": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3643": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3645": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3646": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3647": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3648": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3649": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE49"
    },
    "3652": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3653": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174F"
    },
    "3656": {
      "fn": "Voting.getParties",
      "jump": "i",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3657": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3658": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3659": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3660": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE96"
    },
    "3663": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3664": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3665": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3667": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "LT",
      "path": "0"
    },
    "3668": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE6B"
    },
    "3671": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3672": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "3675": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3676": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3677": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3678": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DIV",
      "path": "0"
    },
    "3679": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MUL",
      "path": "0"
    },
    "3680": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3681": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3682": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3683": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3685": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3686": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3687": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE96"
    },
    "3690": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3691": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3692": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3693": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3694": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3695": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3696": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3698": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3699": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3701": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3703": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3704": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3705": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3706": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3707": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3708": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3709": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3710": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3711": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3713": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3714": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3715": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3717": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3718": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3719": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3720": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "GT",
      "path": "0"
    },
    "3721": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE79"
    },
    "3724": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3725": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3726": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3727": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SUB",
      "path": "0"
    },
    "3728": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "3730": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "AND",
      "path": "0"
    },
    "3731": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3732": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3733": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3734": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3735": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "POP",
      "path": "0"
    },
    "3736": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "POP",
      "path": "0"
    },
    "3737": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "POP",
      "path": "0"
    },
    "3738": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "POP",
      "path": "0"
    },
    "3739": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "POP",
      "path": "0"
    },
    "3740": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3741": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3742": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3744": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3745": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3747": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3748": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3749": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3750": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3751": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3752": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "POP",
      "path": "0"
    },
    "3753": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "POP",
      "path": "0"
    },
    "3754": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3755": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3756": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3758": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3759": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3760": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3762": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "ADD",
      "path": "0"
    },
    "3763": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3764": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDEA"
    },
    "3767": {
      "fn": "Voting.getParties",
      "offset": [
        2642,
        2656
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3768": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3769": {
      "fn": "Voting.winningParty",
      "offset": [
        5115,
        5136
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3771": {
      "fn": "Voting.winningParty",
      "offset": [
        5115,
        5136
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3772": {
      "fn": "Voting.winningParty",
      "offset": [
        5115,
        5136
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3773": {
      "fn": "Voting.winningParty",
      "offset": [
        5186,
        5407
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3774": {
      "fn": "Voting.winningParty",
      "offset": [
        5210,
        5217
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3776": {
      "fn": "Voting.winningParty",
      "offset": [
        5210,
        5224
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3777": {
      "fn": "Voting.winningParty",
      "offset": [
        5206,
        5224
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3778": {
      "fn": "Voting.winningParty",
      "offset": [
        5206,
        5224
      ],
      "op": "LT",
      "path": "0"
    },
    "3779": {
      "fn": "Voting.winningParty",
      "offset": [
        5186,
        5407
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3780": {
      "fn": "Voting.winningParty",
      "offset": [
        5186,
        5407
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF30"
    },
    "3783": {
      "fn": "Voting.winningParty",
      "offset": [
        5186,
        5407
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3784": {
      "fn": "Voting.winningParty",
      "offset": [
        5272,
        5288
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3785": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5256
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3787": {
      "fn": "Voting.winningParty",
      "offset": [
        5257,
        5258
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3788": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3789": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3790": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3791": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "LT",
      "path": "0"
    },
    "3792": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEDB"
    },
    "3795": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3796": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEDB"
    },
    "3799": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3802": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        5249,
        5259
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3803": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3804": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3805": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3807": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3808": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3810": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3812": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3813": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3814": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3816": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "MUL",
      "path": "0"
    },
    "3817": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5259
      ],
      "op": "ADD",
      "path": "0"
    },
    "3818": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5269
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3820": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5269
      ],
      "op": "ADD",
      "path": "0"
    },
    "3821": {
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5269
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3822": {
      "branch": 49,
      "fn": "Voting.winningParty",
      "offset": [
        5249,
        5288
      ],
      "op": "GT",
      "path": "0"
    },
    "3823": {
      "fn": "Voting.winningParty",
      "offset": [
        5245,
        5397
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3824": {
      "fn": "Voting.winningParty",
      "offset": [
        5245,
        5397
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF1E"
    },
    "3827": {
      "branch": 49,
      "fn": "Voting.winningParty",
      "offset": [
        5245,
        5397
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3828": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5334
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 23,
      "value": "0x4"
    },
    "3830": {
      "fn": "Voting.winningParty",
      "offset": [
        5335,
        5336
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3831": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3832": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3833": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3834": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "LT",
      "path": "0"
    },
    "3835": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF06"
    },
    "3838": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3839": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF06"
    },
    "3842": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3845": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        5327,
        5337
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3846": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3847": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3848": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3850": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3851": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3853": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3855": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3856": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3857": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "3859": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "MUL",
      "path": "0"
    },
    "3860": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5337
      ],
      "op": "ADD",
      "path": "0"
    },
    "3861": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5347
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "3863": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5347
      ],
      "op": "ADD",
      "path": "0"
    },
    "3864": {
      "fn": "Voting.winningParty",
      "offset": [
        5327,
        5347
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3865": {
      "fn": "Voting.winningParty",
      "offset": [
        5308,
        5347
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3866": {
      "fn": "Voting.winningParty",
      "offset": [
        5308,
        5347
      ],
      "op": "POP",
      "path": "0"
    },
    "3867": {
      "fn": "Voting.winningParty",
      "offset": [
        5381,
        5382
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 24
    },
    "3868": {
      "fn": "Voting.winningParty",
      "offset": [
        5365,
        5382
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3869": {
      "fn": "Voting.winningParty",
      "offset": [
        5365,
        5382
      ],
      "op": "POP",
      "path": "0"
    },
    "3870": {
      "fn": "Voting.winningParty",
      "offset": [
        5245,
        5397
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3871": {
      "fn": "Voting.winningParty",
      "offset": [
        5226,
        5229
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 25
    },
    "3872": {
      "fn": "Voting.winningParty",
      "offset": [
        5226,
        5229
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF28"
    },
    "3875": {
      "fn": "Voting.winningParty",
      "offset": [
        5226,
        5229
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3876": {
      "fn": "Voting.winningParty",
      "offset": [
        5226,
        5229
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18B2"
    },
    "3879": {
      "fn": "Voting.winningParty",
      "jump": "i",
      "offset": [
        5226,
        5229
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3880": {
      "fn": "Voting.winningParty",
      "offset": [
        5226,
        5229
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3881": {
      "fn": "Voting.winningParty",
      "offset": [
        5226,
        5229
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3882": {
      "fn": "Voting.winningParty",
      "offset": [
        5226,
        5229
      ],
      "op": "POP",
      "path": "0"
    },
    "3883": {
      "fn": "Voting.winningParty",
      "offset": [
        5226,
        5229
      ],
      "op": "POP",
      "path": "0"
    },
    "3884": {
      "fn": "Voting.winningParty",
      "offset": [
        5186,
        5407
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEBD"
    },
    "3887": {
      "fn": "Voting.winningParty",
      "offset": [
        5186,
        5407
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3888": {
      "fn": "Voting.winningParty",
      "offset": [
        5186,
        5407
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3889": {
      "fn": "Voting.winningParty",
      "offset": [
        5186,
        5407
      ],
      "op": "POP",
      "path": "0"
    },
    "3890": {
      "fn": "Voting.winningParty",
      "offset": [
        5138,
        5413
      ],
      "op": "POP",
      "path": "0"
    },
    "3891": {
      "fn": "Voting.winningParty",
      "offset": [
        5070,
        5413
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3892": {
      "fn": "Voting.winningParty",
      "jump": "o",
      "offset": [
        5070,
        5413
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3893": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4672,
        5064
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3894": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4745,
        4770
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3896": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4745,
        4770
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3897": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4745,
        4770
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3898": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4824,
        5058
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3899": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4848,
        4858
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3901": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4848,
        4865
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3902": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4844,
        4865
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3903": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4844,
        4865
      ],
      "op": "LT",
      "path": "0"
    },
    "3904": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4824,
        5058
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3905": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4824,
        5058
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF30"
    },
    "3908": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4824,
        5058
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3909": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4916,
        4932
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3910": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4900
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3912": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4901,
        4902
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3913": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3914": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3915": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3916": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "LT",
      "path": "0"
    },
    "3917": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF58"
    },
    "3920": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3921": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF58"
    },
    "3924": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3927": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        4890,
        4903
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3928": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3929": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3930": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3932": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3933": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3935": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3937": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3938": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3939": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3941": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "MUL",
      "path": "0"
    },
    "3942": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4903
      ],
      "op": "ADD",
      "path": "0"
    },
    "3943": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4913
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3945": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4913
      ],
      "op": "ADD",
      "path": "0"
    },
    "3946": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4913
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3947": {
      "branch": 50,
      "fn": "Voting.winningCandidate",
      "offset": [
        4890,
        4932
      ],
      "op": "GT",
      "path": "0"
    },
    "3948": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4886,
        5048
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "3949": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4886,
        5048
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF9B"
    },
    "3952": {
      "branch": 50,
      "fn": "Voting.winningCandidate",
      "offset": [
        4886,
        5048
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3953": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4981
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 26,
      "value": "0x3"
    },
    "3955": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4982,
        4983
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3956": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3957": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3958": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3959": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "LT",
      "path": "0"
    },
    "3960": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF83"
    },
    "3963": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3964": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF83"
    },
    "3967": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x170B"
    },
    "3970": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        4971,
        4984
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3971": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3972": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3973": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3975": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3976": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "3978": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3980": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "3981": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3982": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3984": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "MUL",
      "path": "0"
    },
    "3985": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4984
      ],
      "op": "ADD",
      "path": "0"
    },
    "3986": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4994
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "3988": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4994
      ],
      "op": "ADD",
      "path": "0"
    },
    "3989": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4971,
        4994
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3990": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4952,
        4994
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3991": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4952,
        4994
      ],
      "op": "POP",
      "path": "0"
    },
    "3992": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5032,
        5033
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 27
    },
    "3993": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5012,
        5033
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "3994": {
      "fn": "Voting.winningCandidate",
      "offset": [
        5012,
        5033
      ],
      "op": "POP",
      "path": "0"
    },
    "3995": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4886,
        5048
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3996": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4867,
        4870
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 28
    },
    "3997": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4867,
        4870
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA5"
    },
    "4000": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4867,
        4870
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4001": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4867,
        4870
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18B2"
    },
    "4004": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        4867,
        4870
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4005": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4867,
        4870
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4006": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4867,
        4870
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4007": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4867,
        4870
      ],
      "op": "POP",
      "path": "0"
    },
    "4008": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4867,
        4870
      ],
      "op": "POP",
      "path": "0"
    },
    "4009": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4824,
        5058
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF3A"
    },
    "4012": {
      "fn": "Voting.winningCandidate",
      "offset": [
        4824,
        5058
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4013": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2669,
        3413
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4014": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2839,
        2850
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 29,
      "value": "0x0"
    },
    "4016": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2839,
        2850
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4017": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4019": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4021": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4023": {
      "op": "SHL"
    },
    "4024": {
      "op": "SUB"
    },
    "4025": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2839,
        2850
      ],
      "op": "AND",
      "path": "0"
    },
    "4026": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2825,
        2835
      ],
      "op": "CALLER",
      "path": "0"
    },
    "4027": {
      "branch": 51,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2825,
        2850
      ],
      "op": "EQ",
      "path": "0"
    },
    "4028": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFD7"
    },
    "4031": {
      "branch": 51,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4032": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4034": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4035": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4039": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4041": {
      "op": "SHL"
    },
    "4042": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4043": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4044": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4046": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "ADD",
      "path": "0"
    },
    "4047": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "4050": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4051": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18CD"
    },
    "4054": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        2804,
        2916
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4055": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2804,
        2916
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4056": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4058": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4060": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4062": {
      "op": "SHL"
    },
    "4063": {
      "op": "SUB"
    },
    "4064": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 30
    },
    "4065": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "AND",
      "path": "0"
    },
    "4066": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4068": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4069": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4070": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4071": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2954
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4073": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4075": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4076": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4078": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4079": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2961
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4080": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2979
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4082": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2979
      ],
      "op": "ADD",
      "path": "0"
    },
    "4083": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2979
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4084": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2979
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "4087": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2979
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4088": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2979
      ],
      "op": "DIV",
      "path": "0"
    },
    "4089": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2979
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4091": {
      "branch": 52,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2948,
        2979
      ],
      "op": "AND",
      "path": "0"
    },
    "4092": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2947,
        2979
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4093": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2947,
        2979
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4094": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2947,
        3011
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1029"
    },
    "4097": {
      "branch": 52,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2947,
        3011
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4098": {
      "op": "POP"
    },
    "4099": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4101": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4103": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4105": {
      "op": "SHL"
    },
    "4106": {
      "op": "SUB"
    },
    "4107": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4108": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "AND",
      "path": "0"
    },
    "4109": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4111": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4112": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4113": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4114": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2990
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4116": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4118": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4119": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4121": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4122": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        2997
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4123": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        3011
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4125": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        3011
      ],
      "op": "ADD",
      "path": "0"
    },
    "4126": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        3011
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4127": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        3011
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "4131": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        3011
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4132": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        3011
      ],
      "op": "DIV",
      "path": "0"
    },
    "4133": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        3011
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4135": {
      "branch": 53,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2984,
        3011
      ],
      "op": "AND",
      "path": "0"
    },
    "4136": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2983,
        3011
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4137": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2947,
        3011
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4138": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x106F"
    },
    "4141": {
      "branch": 53,
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4142": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4144": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4145": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4149": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4151": {
      "op": "SHL"
    },
    "4152": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4153": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4154": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4156": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4158": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4159": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "ADD",
      "path": "0"
    },
    "4160": {
      "op": "MSTORE"
    },
    "4161": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "4163": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4165": {
      "op": "DUP3"
    },
    "4166": {
      "op": "ADD"
    },
    "4167": {
      "op": "MSTORE"
    },
    "4168": {
      "op": "PUSH23",
      "value": "0x151A19481D9BDD195C88185B1C9958591E481D9BDD1959"
    },
    "4192": {
      "op": "PUSH1",
      "value": "0x4A"
    },
    "4194": {
      "op": "SHL"
    },
    "4195": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4197": {
      "op": "DUP3"
    },
    "4198": {
      "op": "ADD"
    },
    "4199": {
      "op": "MSTORE"
    },
    "4200": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4202": {
      "op": "ADD"
    },
    "4203": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "4206": {
      "op": "JUMP"
    },
    "4207": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        2926,
        3060
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4208": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4210": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4212": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4214": {
      "op": "SHL"
    },
    "4215": {
      "op": "SUB"
    },
    "4216": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 31
    },
    "4217": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "AND",
      "path": "0"
    },
    "4218": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4220": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4221": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4222": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4223": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3085
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4225": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4227": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4228": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4230": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4231": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3092
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4232": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3100
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4234": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3100
      ],
      "op": "ADD",
      "path": "0"
    },
    "4235": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3100
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4236": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3100
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "4238": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3079,
        3100
      ],
      "op": "AND",
      "path": "0"
    },
    "4239": {
      "branch": 54,
      "fn": "Voting.giveRightToVote",
      "offset": [
        3078,
        3100
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4240": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10D4"
    },
    "4243": {
      "branch": 54,
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4244": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4246": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4247": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4251": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4253": {
      "op": "SHL"
    },
    "4254": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4255": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4256": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4258": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "4260": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4261": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "ADD",
      "path": "0"
    },
    "4262": {
      "op": "MSTORE"
    },
    "4263": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "4265": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4267": {
      "op": "DUP3"
    },
    "4268": {
      "op": "ADD"
    },
    "4269": {
      "op": "MSTORE"
    },
    "4270": {
      "op": "PUSH22",
      "value": "0x566F7465722063616E20616C726561647920766F7465"
    },
    "4293": {
      "op": "PUSH1",
      "value": "0x50"
    },
    "4295": {
      "op": "SHL"
    },
    "4296": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4298": {
      "op": "DUP3"
    },
    "4299": {
      "op": "ADD"
    },
    "4300": {
      "op": "MSTORE"
    },
    "4301": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4303": {
      "op": "ADD"
    },
    "4304": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38F"
    },
    "4307": {
      "op": "JUMP"
    },
    "4308": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3070,
        3127
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4311": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4313": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4315": {
      "op": "SHL"
    },
    "4316": {
      "op": "SUB"
    },
    "4317": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 32
    },
    "4318": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "AND",
      "path": "0"
    },
    "4319": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4321": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4322": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4323": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4324": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3161,
        3165
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4326": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4328": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4329": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4330": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4331": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4333": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4334": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4335": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3150
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4336": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3158
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4338": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3158
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4339": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3158
      ],
      "op": "ADD",
      "path": "0"
    },
    "4340": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4341": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4342": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4344": {
      "op": "NOT"
    },
    "4345": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "AND",
      "path": "0"
    },
    "4346": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4347": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4348": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "OR",
      "path": "0"
    },
    "4349": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4350": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4351": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3137,
        3165
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4352": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 33
    },
    "4353": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4354": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x110D"
    },
    "4357": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "4358": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4359": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "ADD",
      "path": "0"
    },
    "4360": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4361": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x118F"
    },
    "4364": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        3175,
        3196
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4365": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4366": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3175,
        3196
      ],
      "op": "POP",
      "path": "0"
    },
    "4367": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3227,
        3245
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 34,
      "value": "0x1117"
    },
    "4370": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3240,
        3244
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4371": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3227,
        3239
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D7"
    },
    "4374": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        3227,
        3245
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4375": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3227,
        3245
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4378": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4380": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4382": {
      "op": "SHL"
    },
    "4383": {
      "op": "SUB"
    },
    "4384": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP5",
      "path": "0"
    },
    "4385": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "AND",
      "path": "0"
    },
    "4386": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4388": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4389": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4390": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4391": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3212
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "4393": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "4395": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4396": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4397": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "4398": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4400": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4401": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4402": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "4403": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3224
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4404": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3224
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4405": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3224
      ],
      "op": "ADD",
      "path": "0"
    },
    "4406": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3245
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4407": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3245
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4408": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3245
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "4409": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3245
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4410": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3255,
        3286
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 35,
      "value": "0x2"
    },
    "4412": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3255,
        3286
      ],
      "op": "ADD",
      "path": "0"
    },
    "4413": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3255,
        3294
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4414": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3255,
        3294
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4415": {
      "op": "PUSH3",
      "value": "0xFFFF00"
    },
    "4419": {
      "op": "NOT"
    },
    "4420": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3339
      ],
      "op": "AND",
      "path": "0",
      "statement": 36
    },
    "4421": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3339
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4422": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3304,
        3339
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4423": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 37
    },
    "4424": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "4425": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4426": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4427": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4428": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3364,
        3379
      ],
      "op": "PUSH6",
      "path": "0",
      "value": "0x5AF3107A4000"
    },
    "4435": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3364,
        3379
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4436": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4437": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4438": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4439": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "DUP2",
      "path": "0"
    },
    "4440": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3364,
        3379
      ],
      "op": "DUP6",
      "path": "0"
    },
    "4441": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP9",
      "path": "0"
    },
    "4442": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3206,
        3219
      ],
      "op": "DUP4",
      "path": "0"
    },
    "4443": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "CALL",
      "path": "0"
    },
    "4444": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "4445": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "POP",
      "path": "0"
    },
    "4446": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "POP",
      "path": "0"
    },
    "4447": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "POP",
      "path": "0"
    },
    "4448": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "POP",
      "path": "0"
    },
    "4449": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4450": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4451": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "4452": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1171"
    },
    "4455": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "4456": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4457": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4459": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "DUP1",
      "path": "0"
    },
    "4460": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "4461": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "4462": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4464": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "REVERT",
      "path": "0"
    },
    "4465": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4466": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3349,
        3380
      ],
      "op": "POP",
      "path": "0"
    },
    "4467": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3405,
        3406
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 38,
      "value": "0x1"
    },
    "4469": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3401
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "4471": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3401
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "4473": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4474": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "DUP3",
      "path": "0"
    },
    "4475": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "4476": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1185"
    },
    "4479": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4480": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4481": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1737"
    },
    "4484": {
      "fn": "Voting.giveRightToVote",
      "jump": "i",
      "offset": [
        3390,
        3406
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4485": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "4486": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "4487": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "4488": {
      "fn": "Voting.giveRightToVote",
      "offset": [
        3390,
        3406
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "4489": {
      "op": "POP"
    },
    "4490": {
      "op": "POP"
    },
    "4491": {
      "op": "POP"
    },
    "4492": {
      "op": "POP"
    },
    "4493": {
      "op": "POP"
    },
    "4494": {
      "fn": "Voting.giveRightToVote",
      "jump": "o",
      "offset": [
        2669,
        3413
      ],
      "op": "JUMP",
      "path": "0"
    },
    "4495": {
      "op": "JUMPDEST"
    },
    "4496": {
      "op": "DUP3"
    },
    "4497": {
      "op": "DUP1"
    },
    "4498": {
      "op": "SLOAD"
    },
    "4499": {
      "op": "PUSH2",
      "value": "0x119B"
    },
    "4502": {
      "op": "SWAP1"
    },
    "4503": {
      "op": "PUSH2",
      "value": "0x174F"
    },
    "4506": {
      "jump": "i",
      "op": "JUMP"
    },
    "4507": {
      "op": "JUMPDEST"
    },
    "4508": {
      "op": "SWAP1"
    },
    "4509": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4511": {
      "op": "MSTORE"
    },
    "4512": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4514": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4516": {
      "op": "KECCAK256"
    },
    "4517": {
      "op": "SWAP1"
    },
    "4518": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4520": {
      "op": "ADD"
    },
    "4521": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4523": {
      "op": "SWAP1"
    },
    "4524": {
      "op": "DIV"
    },
    "4525": {
      "op": "DUP2"
    },
    "4526": {
      "op": "ADD"
    },
    "4527": {
      "op": "SWAP3"
    },
    "4528": {
      "op": "DUP3"
    },
    "4529": {
      "op": "PUSH2",
      "value": "0x11BD"
    },
    "4532": {
      "op": "JUMPI"
    },
    "4533": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4535": {
      "op": "DUP6"
    },
    "4536": {
      "op": "SSTORE"
    },
    "4537": {
      "op": "PUSH2",
      "value": "0x1203"
    },
    "4540": {
      "op": "JUMP"
    },
    "4541": {
      "op": "JUMPDEST"
    },
    "4542": {
      "op": "DUP3"
    },
    "4543": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4545": {
      "op": "LT"
    },
    "4546": {
      "op": "PUSH2",
      "value": "0x11D6"
    },
    "4549": {
      "op": "JUMPI"
    },
    "4550": {
      "op": "DUP1"
    },
    "4551": {
      "op": "MLOAD"
    },
    "4552": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4554": {
      "op": "NOT"
    },
    "4555": {
      "op": "AND"
    },
    "4556": {
      "op": "DUP4"
    },
    "4557": {
      "op": "DUP1"
    },
    "4558": {
      "op": "ADD"
    },
    "4559": {
      "op": "OR"
    },
    "4560": {
      "op": "DUP6"
    },
    "4561": {
      "op": "SSTORE"
    },
    "4562": {
      "op": "PUSH2",
      "value": "0x1203"
    },
    "4565": {
      "op": "JUMP"
    },
    "4566": {
      "op": "JUMPDEST"
    },
    "4567": {
      "op": "DUP3"
    },
    "4568": {
      "op": "DUP1"
    },
    "4569": {
      "op": "ADD"
    },
    "4570": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4572": {
      "op": "ADD"
    },
    "4573": {
      "op": "DUP6"
    },
    "4574": {
      "op": "SSTORE"
    },
    "4575": {
      "op": "DUP3"
    },
    "4576": {
      "op": "ISZERO"
    },
    "4577": {
      "op": "PUSH2",
      "value": "0x1203"
    },
    "4580": {
      "op": "JUMPI"
    },
    "4581": {
      "op": "SWAP2"
    },
    "4582": {
      "op": "DUP3"
    },
    "4583": {
      "op": "ADD"
    },
    "4584": {
      "op": "JUMPDEST"
    },
    "4585": {
      "op": "DUP3"
    },
    "4586": {
      "op": "DUP2"
    },
    "4587": {
      "op": "GT"
    },
    "4588": {
      "op": "ISZERO"
    },
    "4589": {
      "op": "PUSH2",
      "value": "0x1203"
    },
    "4592": {
      "op": "JUMPI"
    },
    "4593": {
      "op": "DUP3"
    },
    "4594": {
      "op": "MLOAD"
    },
    "4595": {
      "op": "DUP3"
    },
    "4596": {
      "op": "SSTORE"
    },
    "4597": {
      "op": "SWAP2"
    },
    "4598": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4600": {
      "op": "ADD"
    },
    "4601": {
      "op": "SWAP2"
    },
    "4602": {
      "op": "SWAP1"
    },
    "4603": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4605": {
      "op": "ADD"
    },
    "4606": {
      "op": "SWAP1"
    },
    "4607": {
      "op": "PUSH2",
      "value": "0x11E8"
    },
    "4610": {
      "op": "JUMP"
    },
    "4611": {
      "op": "JUMPDEST"
    },
    "4612": {
      "op": "POP"
    },
    "4613": {
      "op": "PUSH2",
      "value": "0x120F"
    },
    "4616": {
      "op": "SWAP3"
    },
    "4617": {
      "op": "SWAP2"
    },
    "4618": {
      "op": "POP"
    },
    "4619": {
      "op": "PUSH2",
      "value": "0x1213"
    },
    "4622": {
      "jump": "i",
      "op": "JUMP"
    },
    "4623": {
      "op": "JUMPDEST"
    },
    "4624": {
      "op": "POP"
    },
    "4625": {
      "op": "SWAP1"
    },
    "4626": {
      "jump": "o",
      "op": "JUMP"
    },
    "4627": {
      "op": "JUMPDEST"
    },
    "4628": {
      "op": "JUMPDEST"
    },
    "4629": {
      "op": "DUP1"
    },
    "4630": {
      "op": "DUP3"
    },
    "4631": {
      "op": "GT"
    },
    "4632": {
      "op": "ISZERO"
    },
    "4633": {
      "op": "PUSH2",
      "value": "0x120F"
    },
    "4636": {
      "op": "JUMPI"
    },
    "4637": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4639": {
      "op": "DUP2"
    },
    "4640": {
      "op": "SSTORE"
    },
    "4641": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4643": {
      "op": "ADD"
    },
    "4644": {
      "op": "PUSH2",
      "value": "0x1214"
    },
    "4647": {
      "op": "JUMP"
    },
    "4648": {
      "op": "JUMPDEST"
    },
    "4649": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4651": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4653": {
      "op": "DUP3"
    },
    "4654": {
      "op": "DUP5"
    },
    "4655": {
      "op": "SUB"
    },
    "4656": {
      "op": "SLT"
    },
    "4657": {
      "op": "ISZERO"
    },
    "4658": {
      "op": "PUSH2",
      "value": "0x123A"
    },
    "4661": {
      "op": "JUMPI"
    },
    "4662": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4664": {
      "op": "DUP1"
    },
    "4665": {
      "op": "REVERT"
    },
    "4666": {
      "op": "JUMPDEST"
    },
    "4667": {
      "op": "POP"
    },
    "4668": {
      "op": "CALLDATALOAD"
    },
    "4669": {
      "op": "SWAP2"
    },
    "4670": {
      "op": "SWAP1"
    },
    "4671": {
      "op": "POP"
    },
    "4672": {
      "jump": "o",
      "op": "JUMP"
    },
    "4673": {
      "op": "JUMPDEST"
    },
    "4674": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4676": {
      "op": "DUP2"
    },
    "4677": {
      "op": "MLOAD"
    },
    "4678": {
      "op": "DUP1"
    },
    "4679": {
      "op": "DUP5"
    },
    "4680": {
      "op": "MSTORE"
    },
    "4681": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4683": {
      "op": "JUMPDEST"
    },
    "4684": {
      "op": "DUP2"
    },
    "4685": {
      "op": "DUP2"
    },
    "4686": {
      "op": "LT"
    },
    "4687": {
      "op": "ISZERO"
    },
    "4688": {
      "op": "PUSH2",
      "value": "0x1267"
    },
    "4691": {
      "op": "JUMPI"
    },
    "4692": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4694": {
      "op": "DUP2"
    },
    "4695": {
      "op": "DUP6"
    },
    "4696": {
      "op": "ADD"
    },
    "4697": {
      "op": "DUP2"
    },
    "4698": {
      "op": "ADD"
    },
    "4699": {
      "op": "MLOAD"
    },
    "4700": {
      "op": "DUP7"
    },
    "4701": {
      "op": "DUP4"
    },
    "4702": {
      "op": "ADD"
    },
    "4703": {
      "op": "DUP3"
    },
    "4704": {
      "op": "ADD"
    },
    "4705": {
      "op": "MSTORE"
    },
    "4706": {
      "op": "ADD"
    },
    "4707": {
      "op": "PUSH2",
      "value": "0x124B"
    },
    "4710": {
      "op": "JUMP"
    },
    "4711": {
      "op": "JUMPDEST"
    },
    "4712": {
      "op": "DUP2"
    },
    "4713": {
      "op": "DUP2"
    },
    "4714": {
      "op": "GT"
    },
    "4715": {
      "op": "ISZERO"
    },
    "4716": {
      "op": "PUSH2",
      "value": "0x1279"
    },
    "4719": {
      "op": "JUMPI"
    },
    "4720": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4722": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4724": {
      "op": "DUP4"
    },
    "4725": {
      "op": "DUP8"
    },
    "4726": {
      "op": "ADD"
    },
    "4727": {
      "op": "ADD"
    },
    "4728": {
      "op": "MSTORE"
    },
    "4729": {
      "op": "JUMPDEST"
    },
    "4730": {
      "op": "POP"
    },
    "4731": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4733": {
      "op": "ADD"
    },
    "4734": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4736": {
      "op": "NOT"
    },
    "4737": {
      "op": "AND"
    },
    "4738": {
      "op": "SWAP3"
    },
    "4739": {
      "op": "SWAP1"
    },
    "4740": {
      "op": "SWAP3"
    },
    "4741": {
      "op": "ADD"
    },
    "4742": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4744": {
      "op": "ADD"
    },
    "4745": {
      "op": "SWAP3"
    },
    "4746": {
      "op": "SWAP2"
    },
    "4747": {
      "op": "POP"
    },
    "4748": {
      "op": "POP"
    },
    "4749": {
      "jump": "o",
      "op": "JUMP"
    },
    "4750": {
      "op": "JUMPDEST"
    },
    "4751": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4753": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4755": {
      "op": "DUP1"
    },
    "4756": {
      "op": "DUP4"
    },
    "4757": {
      "op": "ADD"
    },
    "4758": {
      "op": "DUP2"
    },
    "4759": {
      "op": "DUP5"
    },
    "4760": {
      "op": "MSTORE"
    },
    "4761": {
      "op": "DUP1"
    },
    "4762": {
      "op": "DUP6"
    },
    "4763": {
      "op": "MLOAD"
    },
    "4764": {
      "op": "DUP1"
    },
    "4765": {
      "op": "DUP4"
    },
    "4766": {
      "op": "MSTORE"
    },
    "4767": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4769": {
      "op": "SWAP3"
    },
    "4770": {
      "op": "POP"
    },
    "4771": {
      "op": "DUP3"
    },
    "4772": {
      "op": "DUP7"
    },
    "4773": {
      "op": "ADD"
    },
    "4774": {
      "op": "SWAP2"
    },
    "4775": {
      "op": "POP"
    },
    "4776": {
      "op": "DUP3"
    },
    "4777": {
      "op": "DUP2"
    },
    "4778": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "4780": {
      "op": "SHL"
    },
    "4781": {
      "op": "DUP8"
    },
    "4782": {
      "op": "ADD"
    },
    "4783": {
      "op": "ADD"
    },
    "4784": {
      "op": "DUP5"
    },
    "4785": {
      "op": "DUP9"
    },
    "4786": {
      "op": "ADD"
    },
    "4787": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4789": {
      "op": "JUMPDEST"
    },
    "4790": {
      "op": "DUP4"
    },
    "4791": {
      "op": "DUP2"
    },
    "4792": {
      "op": "LT"
    },
    "4793": {
      "op": "ISZERO"
    },
    "4794": {
      "op": "PUSH2",
      "value": "0x131B"
    },
    "4797": {
      "op": "JUMPI"
    },
    "4798": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "4800": {
      "op": "NOT"
    },
    "4801": {
      "op": "DUP10"
    },
    "4802": {
      "op": "DUP5"
    },
    "4803": {
      "op": "SUB"
    },
    "4804": {
      "op": "ADD"
    },
    "4805": {
      "op": "DUP6"
    },
    "4806": {
      "op": "MSTORE"
    },
    "4807": {
      "op": "DUP2"
    },
    "4808": {
      "op": "MLOAD"
    },
    "4809": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4811": {
      "op": "DUP2"
    },
    "4812": {
      "op": "MLOAD"
    },
    "4813": {
      "op": "DUP2"
    },
    "4814": {
      "op": "DUP7"
    },
    "4815": {
      "op": "MSTORE"
    },
    "4816": {
      "op": "PUSH2",
      "value": "0x12DB"
    },
    "4819": {
      "op": "DUP3"
    },
    "4820": {
      "op": "DUP8"
    },
    "4821": {
      "op": "ADD"
    },
    "4822": {
      "op": "DUP3"
    },
    "4823": {
      "op": "PUSH2",
      "value": "0x1241"
    },
    "4826": {
      "jump": "i",
      "op": "JUMP"
    },
    "4827": {
      "op": "JUMPDEST"
    },
    "4828": {
      "op": "SWAP2"
    },
    "4829": {
      "op": "POP"
    },
    "4830": {
      "op": "POP"
    },
    "4831": {
      "op": "DUP9"
    },
    "4832": {
      "op": "DUP3"
    },
    "4833": {
      "op": "ADD"
    },
    "4834": {
      "op": "MLOAD"
    },
    "4835": {
      "op": "DUP6"
    },
    "4836": {
      "op": "DUP3"
    },
    "4837": {
      "op": "SUB"
    },
    "4838": {
      "op": "DUP11"
    },
    "4839": {
      "op": "DUP8"
    },
    "4840": {
      "op": "ADD"
    },
    "4841": {
      "op": "MSTORE"
    },
    "4842": {
      "op": "PUSH2",
      "value": "0x12F3"
    },
    "4845": {
      "op": "DUP3"
    },
    "4846": {
      "op": "DUP3"
    },
    "4847": {
      "op": "PUSH2",
      "value": "0x1241"
    },
    "4850": {
      "jump": "i",
      "op": "JUMP"
    },
    "4851": {
      "op": "JUMPDEST"
    },
    "4852": {
      "op": "DUP4"
    },
    "4853": {
      "op": "DUP11"
    },
    "4854": {
      "op": "ADD"
    },
    "4855": {
      "op": "MLOAD"
    },
    "4856": {
      "op": "DUP8"
    },
    "4857": {
      "op": "DUP12"
    },
    "4858": {
      "op": "ADD"
    },
    "4859": {
      "op": "MSTORE"
    },
    "4860": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4862": {
      "op": "SWAP4"
    },
    "4863": {
      "op": "DUP5"
    },
    "4864": {
      "op": "ADD"
    },
    "4865": {
      "op": "MLOAD"
    },
    "4866": {
      "op": "SWAP4"
    },
    "4867": {
      "op": "SWAP1"
    },
    "4868": {
      "op": "SWAP7"
    },
    "4869": {
      "op": "ADD"
    },
    "4870": {
      "op": "SWAP3"
    },
    "4871": {
      "op": "SWAP1"
    },
    "4872": {
      "op": "SWAP3"
    },
    "4873": {
      "op": "MSTORE"
    },
    "4874": {
      "op": "POP"
    },
    "4875": {
      "op": "POP"
    },
    "4876": {
      "op": "SWAP4"
    },
    "4877": {
      "op": "DUP7"
    },
    "4878": {
      "op": "ADD"
    },
    "4879": {
      "op": "SWAP4"
    },
    "4880": {
      "op": "SWAP1"
    },
    "4881": {
      "op": "DUP7"
    },
    "4882": {
      "op": "ADD"
    },
    "4883": {
      "op": "SWAP1"
    },
    "4884": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4886": {
      "op": "ADD"
    },
    "4887": {
      "op": "PUSH2",
      "value": "0x12B5"
    },
    "4890": {
      "op": "JUMP"
    },
    "4891": {
      "op": "JUMPDEST"
    },
    "4892": {
      "op": "POP"
    },
    "4893": {
      "op": "SWAP1"
    },
    "4894": {
      "op": "SWAP9"
    },
    "4895": {
      "op": "SWAP8"
    },
    "4896": {
      "op": "POP"
    },
    "4897": {
      "op": "POP"
    },
    "4898": {
      "op": "POP"
    },
    "4899": {
      "op": "POP"
    },
    "4900": {
      "op": "POP"
    },
    "4901": {
      "op": "POP"
    },
    "4902": {
      "op": "POP"
    },
    "4903": {
      "op": "POP"
    },
    "4904": {
      "jump": "o",
      "op": "JUMP"
    },
    "4905": {
      "op": "JUMPDEST"
    },
    "4906": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4911": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4913": {
      "op": "SHL"
    },
    "4914": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4916": {
      "op": "MSTORE"
    },
    "4917": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "4919": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4921": {
      "op": "MSTORE"
    },
    "4922": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4924": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4926": {
      "op": "REVERT"
    },
    "4927": {
      "op": "JUMPDEST"
    },
    "4928": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4930": {
      "op": "MLOAD"
    },
    "4931": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4933": {
      "op": "DUP2"
    },
    "4934": {
      "op": "ADD"
    },
    "4935": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4944": {
      "op": "DUP2"
    },
    "4945": {
      "op": "GT"
    },
    "4946": {
      "op": "DUP3"
    },
    "4947": {
      "op": "DUP3"
    },
    "4948": {
      "op": "LT"
    },
    "4949": {
      "op": "OR"
    },
    "4950": {
      "op": "ISZERO"
    },
    "4951": {
      "op": "PUSH2",
      "value": "0x1362"
    },
    "4954": {
      "op": "JUMPI"
    },
    "4955": {
      "op": "PUSH2",
      "value": "0x1362"
    },
    "4958": {
      "op": "PUSH2",
      "value": "0x1329"
    },
    "4961": {
      "jump": "i",
      "op": "JUMP"
    },
    "4962": {
      "op": "JUMPDEST"
    },
    "4963": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4965": {
      "op": "MSTORE"
    },
    "4966": {
      "op": "SWAP1"
    },
    "4967": {
      "jump": "o",
      "op": "JUMP"
    },
    "4968": {
      "op": "JUMPDEST"
    },
    "4969": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4971": {
      "op": "MLOAD"
    },
    "4972": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4974": {
      "op": "DUP3"
    },
    "4975": {
      "op": "ADD"
    },
    "4976": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4978": {
      "op": "NOT"
    },
    "4979": {
      "op": "AND"
    },
    "4980": {
      "op": "DUP2"
    },
    "4981": {
      "op": "ADD"
    },
    "4982": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "4991": {
      "op": "DUP2"
    },
    "4992": {
      "op": "GT"
    },
    "4993": {
      "op": "DUP3"
    },
    "4994": {
      "op": "DUP3"
    },
    "4995": {
      "op": "LT"
    },
    "4996": {
      "op": "OR"
    },
    "4997": {
      "op": "ISZERO"
    },
    "4998": {
      "op": "PUSH2",
      "value": "0x1391"
    },
    "5001": {
      "op": "JUMPI"
    },
    "5002": {
      "op": "PUSH2",
      "value": "0x1391"
    },
    "5005": {
      "op": "PUSH2",
      "value": "0x1329"
    },
    "5008": {
      "jump": "i",
      "op": "JUMP"
    },
    "5009": {
      "op": "JUMPDEST"
    },
    "5010": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5012": {
      "op": "MSTORE"
    },
    "5013": {
      "op": "SWAP2"
    },
    "5014": {
      "op": "SWAP1"
    },
    "5015": {
      "op": "POP"
    },
    "5016": {
      "jump": "o",
      "op": "JUMP"
    },
    "5017": {
      "op": "JUMPDEST"
    },
    "5018": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5020": {
      "op": "DUP3"
    },
    "5021": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5023": {
      "op": "DUP4"
    },
    "5024": {
      "op": "ADD"
    },
    "5025": {
      "op": "SLT"
    },
    "5026": {
      "op": "PUSH2",
      "value": "0x13AA"
    },
    "5029": {
      "op": "JUMPI"
    },
    "5030": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5032": {
      "op": "DUP1"
    },
    "5033": {
      "op": "REVERT"
    },
    "5034": {
      "op": "JUMPDEST"
    },
    "5035": {
      "op": "DUP2"
    },
    "5036": {
      "op": "CALLDATALOAD"
    },
    "5037": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5046": {
      "op": "DUP2"
    },
    "5047": {
      "op": "GT"
    },
    "5048": {
      "op": "ISZERO"
    },
    "5049": {
      "op": "PUSH2",
      "value": "0x13C4"
    },
    "5052": {
      "op": "JUMPI"
    },
    "5053": {
      "op": "PUSH2",
      "value": "0x13C4"
    },
    "5056": {
      "op": "PUSH2",
      "value": "0x1329"
    },
    "5059": {
      "jump": "i",
      "op": "JUMP"
    },
    "5060": {
      "op": "JUMPDEST"
    },
    "5061": {
      "op": "PUSH2",
      "value": "0x13D7"
    },
    "5064": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5066": {
      "op": "DUP3"
    },
    "5067": {
      "op": "ADD"
    },
    "5068": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5070": {
      "op": "NOT"
    },
    "5071": {
      "op": "AND"
    },
    "5072": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5074": {
      "op": "ADD"
    },
    "5075": {
      "op": "PUSH2",
      "value": "0x1368"
    },
    "5078": {
      "jump": "i",
      "op": "JUMP"
    },
    "5079": {
      "op": "JUMPDEST"
    },
    "5080": {
      "op": "DUP2"
    },
    "5081": {
      "op": "DUP2"
    },
    "5082": {
      "op": "MSTORE"
    },
    "5083": {
      "op": "DUP5"
    },
    "5084": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5086": {
      "op": "DUP4"
    },
    "5087": {
      "op": "DUP7"
    },
    "5088": {
      "op": "ADD"
    },
    "5089": {
      "op": "ADD"
    },
    "5090": {
      "op": "GT"
    },
    "5091": {
      "op": "ISZERO"
    },
    "5092": {
      "op": "PUSH2",
      "value": "0x13EC"
    },
    "5095": {
      "op": "JUMPI"
    },
    "5096": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5098": {
      "op": "DUP1"
    },
    "5099": {
      "op": "REVERT"
    },
    "5100": {
      "op": "JUMPDEST"
    },
    "5101": {
      "op": "DUP2"
    },
    "5102": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5104": {
      "op": "DUP6"
    },
    "5105": {
      "op": "ADD"
    },
    "5106": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5108": {
      "op": "DUP4"
    },
    "5109": {
      "op": "ADD"
    },
    "5110": {
      "op": "CALLDATACOPY"
    },
    "5111": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5113": {
      "op": "SWAP2"
    },
    "5114": {
      "op": "DUP2"
    },
    "5115": {
      "op": "ADD"
    },
    "5116": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5118": {
      "op": "ADD"
    },
    "5119": {
      "op": "SWAP2"
    },
    "5120": {
      "op": "SWAP1"
    },
    "5121": {
      "op": "SWAP2"
    },
    "5122": {
      "op": "MSTORE"
    },
    "5123": {
      "op": "SWAP4"
    },
    "5124": {
      "op": "SWAP3"
    },
    "5125": {
      "op": "POP"
    },
    "5126": {
      "op": "POP"
    },
    "5127": {
      "op": "POP"
    },
    "5128": {
      "jump": "o",
      "op": "JUMP"
    },
    "5129": {
      "op": "JUMPDEST"
    },
    "5130": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5132": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5134": {
      "op": "DUP3"
    },
    "5135": {
      "op": "DUP5"
    },
    "5136": {
      "op": "SUB"
    },
    "5137": {
      "op": "SLT"
    },
    "5138": {
      "op": "ISZERO"
    },
    "5139": {
      "op": "PUSH2",
      "value": "0x141B"
    },
    "5142": {
      "op": "JUMPI"
    },
    "5143": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5145": {
      "op": "DUP1"
    },
    "5146": {
      "op": "REVERT"
    },
    "5147": {
      "op": "JUMPDEST"
    },
    "5148": {
      "op": "DUP2"
    },
    "5149": {
      "op": "CALLDATALOAD"
    },
    "5150": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5159": {
      "op": "DUP2"
    },
    "5160": {
      "op": "GT"
    },
    "5161": {
      "op": "ISZERO"
    },
    "5162": {
      "op": "PUSH2",
      "value": "0x1432"
    },
    "5165": {
      "op": "JUMPI"
    },
    "5166": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5168": {
      "op": "DUP1"
    },
    "5169": {
      "op": "REVERT"
    },
    "5170": {
      "op": "JUMPDEST"
    },
    "5171": {
      "op": "PUSH2",
      "value": "0x143E"
    },
    "5174": {
      "op": "DUP5"
    },
    "5175": {
      "op": "DUP3"
    },
    "5176": {
      "op": "DUP6"
    },
    "5177": {
      "op": "ADD"
    },
    "5178": {
      "op": "PUSH2",
      "value": "0x1399"
    },
    "5181": {
      "jump": "i",
      "op": "JUMP"
    },
    "5182": {
      "op": "JUMPDEST"
    },
    "5183": {
      "op": "SWAP5"
    },
    "5184": {
      "op": "SWAP4"
    },
    "5185": {
      "op": "POP"
    },
    "5186": {
      "op": "POP"
    },
    "5187": {
      "op": "POP"
    },
    "5188": {
      "op": "POP"
    },
    "5189": {
      "jump": "o",
      "op": "JUMP"
    },
    "5190": {
      "op": "JUMPDEST"
    },
    "5191": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5193": {
      "op": "DUP2"
    },
    "5194": {
      "op": "MSTORE"
    },
    "5195": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5197": {
      "op": "PUSH2",
      "value": "0x1459"
    },
    "5200": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5202": {
      "op": "DUP4"
    },
    "5203": {
      "op": "ADD"
    },
    "5204": {
      "op": "DUP8"
    },
    "5205": {
      "op": "PUSH2",
      "value": "0x1241"
    },
    "5208": {
      "jump": "i",
      "op": "JUMP"
    },
    "5209": {
      "op": "JUMPDEST"
    },
    "5210": {
      "op": "DUP3"
    },
    "5211": {
      "op": "DUP2"
    },
    "5212": {
      "op": "SUB"
    },
    "5213": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5215": {
      "op": "DUP5"
    },
    "5216": {
      "op": "ADD"
    },
    "5217": {
      "op": "MSTORE"
    },
    "5218": {
      "op": "PUSH2",
      "value": "0x146B"
    },
    "5221": {
      "op": "DUP2"
    },
    "5222": {
      "op": "DUP8"
    },
    "5223": {
      "op": "PUSH2",
      "value": "0x1241"
    },
    "5226": {
      "jump": "i",
      "op": "JUMP"
    },
    "5227": {
      "op": "JUMPDEST"
    },
    "5228": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5230": {
      "op": "DUP5"
    },
    "5231": {
      "op": "ADD"
    },
    "5232": {
      "op": "SWAP6"
    },
    "5233": {
      "op": "SWAP1"
    },
    "5234": {
      "op": "SWAP6"
    },
    "5235": {
      "op": "MSTORE"
    },
    "5236": {
      "op": "POP"
    },
    "5237": {
      "op": "POP"
    },
    "5238": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5240": {
      "op": "ADD"
    },
    "5241": {
      "op": "MSTORE"
    },
    "5242": {
      "op": "SWAP3"
    },
    "5243": {
      "op": "SWAP2"
    },
    "5244": {
      "op": "POP"
    },
    "5245": {
      "op": "POP"
    },
    "5246": {
      "jump": "o",
      "op": "JUMP"
    },
    "5247": {
      "op": "JUMPDEST"
    },
    "5248": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5252": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5254": {
      "op": "SHL"
    },
    "5255": {
      "op": "SUB"
    },
    "5256": {
      "op": "DUP2"
    },
    "5257": {
      "op": "AND"
    },
    "5258": {
      "op": "DUP2"
    },
    "5259": {
      "op": "EQ"
    },
    "5260": {
      "op": "PUSH2",
      "value": "0x1494"
    },
    "5263": {
      "op": "JUMPI"
    },
    "5264": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5266": {
      "op": "DUP1"
    },
    "5267": {
      "op": "REVERT"
    },
    "5268": {
      "op": "JUMPDEST"
    },
    "5269": {
      "op": "POP"
    },
    "5270": {
      "jump": "o",
      "op": "JUMP"
    },
    "5271": {
      "op": "JUMPDEST"
    },
    "5272": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5274": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5276": {
      "op": "DUP3"
    },
    "5277": {
      "op": "DUP5"
    },
    "5278": {
      "op": "SUB"
    },
    "5279": {
      "op": "SLT"
    },
    "5280": {
      "op": "ISZERO"
    },
    "5281": {
      "op": "PUSH2",
      "value": "0x14A9"
    },
    "5284": {
      "op": "JUMPI"
    },
    "5285": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5287": {
      "op": "DUP1"
    },
    "5288": {
      "op": "REVERT"
    },
    "5289": {
      "op": "JUMPDEST"
    },
    "5290": {
      "op": "DUP2"
    },
    "5291": {
      "op": "CALLDATALOAD"
    },
    "5292": {
      "op": "PUSH2",
      "value": "0x14B4"
    },
    "5295": {
      "op": "DUP2"
    },
    "5296": {
      "op": "PUSH2",
      "value": "0x147F"
    },
    "5299": {
      "jump": "i",
      "op": "JUMP"
    },
    "5300": {
      "op": "JUMPDEST"
    },
    "5301": {
      "op": "SWAP4"
    },
    "5302": {
      "op": "SWAP3"
    },
    "5303": {
      "op": "POP"
    },
    "5304": {
      "op": "POP"
    },
    "5305": {
      "op": "POP"
    },
    "5306": {
      "jump": "o",
      "op": "JUMP"
    },
    "5307": {
      "op": "JUMPDEST"
    },
    "5308": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5310": {
      "op": "DUP2"
    },
    "5311": {
      "op": "MSTORE"
    },
    "5312": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5314": {
      "op": "PUSH2",
      "value": "0x14CE"
    },
    "5317": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5319": {
      "op": "DUP4"
    },
    "5320": {
      "op": "ADD"
    },
    "5321": {
      "op": "DUP6"
    },
    "5322": {
      "op": "PUSH2",
      "value": "0x1241"
    },
    "5325": {
      "jump": "i",
      "op": "JUMP"
    },
    "5326": {
      "op": "JUMPDEST"
    },
    "5327": {
      "op": "SWAP1"
    },
    "5328": {
      "op": "POP"
    },
    "5329": {
      "op": "DUP3"
    },
    "5330": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5332": {
      "op": "DUP4"
    },
    "5333": {
      "op": "ADD"
    },
    "5334": {
      "op": "MSTORE"
    },
    "5335": {
      "op": "SWAP4"
    },
    "5336": {
      "op": "SWAP3"
    },
    "5337": {
      "op": "POP"
    },
    "5338": {
      "op": "POP"
    },
    "5339": {
      "op": "POP"
    },
    "5340": {
      "jump": "o",
      "op": "JUMP"
    },
    "5341": {
      "op": "JUMPDEST"
    },
    "5342": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5344": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5346": {
      "op": "DUP1"
    },
    "5347": {
      "op": "DUP4"
    },
    "5348": {
      "op": "DUP6"
    },
    "5349": {
      "op": "SUB"
    },
    "5350": {
      "op": "SLT"
    },
    "5351": {
      "op": "ISZERO"
    },
    "5352": {
      "op": "PUSH2",
      "value": "0x14F0"
    },
    "5355": {
      "op": "JUMPI"
    },
    "5356": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5358": {
      "op": "DUP1"
    },
    "5359": {
      "op": "REVERT"
    },
    "5360": {
      "op": "JUMPDEST"
    },
    "5361": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5370": {
      "op": "DUP1"
    },
    "5371": {
      "op": "DUP5"
    },
    "5372": {
      "op": "CALLDATALOAD"
    },
    "5373": {
      "op": "GT"
    },
    "5374": {
      "op": "ISZERO"
    },
    "5375": {
      "op": "PUSH2",
      "value": "0x1507"
    },
    "5378": {
      "op": "JUMPI"
    },
    "5379": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5381": {
      "op": "DUP1"
    },
    "5382": {
      "op": "REVERT"
    },
    "5383": {
      "op": "JUMPDEST"
    },
    "5384": {
      "op": "DUP4"
    },
    "5385": {
      "op": "CALLDATALOAD"
    },
    "5386": {
      "op": "DUP5"
    },
    "5387": {
      "op": "ADD"
    },
    "5388": {
      "op": "DUP6"
    },
    "5389": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5391": {
      "op": "DUP3"
    },
    "5392": {
      "op": "ADD"
    },
    "5393": {
      "op": "SLT"
    },
    "5394": {
      "op": "PUSH2",
      "value": "0x151A"
    },
    "5397": {
      "op": "JUMPI"
    },
    "5398": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5400": {
      "op": "DUP1"
    },
    "5401": {
      "op": "REVERT"
    },
    "5402": {
      "op": "JUMPDEST"
    },
    "5403": {
      "op": "DUP1"
    },
    "5404": {
      "op": "CALLDATALOAD"
    },
    "5405": {
      "op": "DUP3"
    },
    "5406": {
      "op": "DUP2"
    },
    "5407": {
      "op": "GT"
    },
    "5408": {
      "op": "ISZERO"
    },
    "5409": {
      "op": "PUSH2",
      "value": "0x152C"
    },
    "5412": {
      "op": "JUMPI"
    },
    "5413": {
      "op": "PUSH2",
      "value": "0x152C"
    },
    "5416": {
      "op": "PUSH2",
      "value": "0x1329"
    },
    "5419": {
      "jump": "i",
      "op": "JUMP"
    },
    "5420": {
      "op": "JUMPDEST"
    },
    "5421": {
      "op": "DUP1"
    },
    "5422": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "5424": {
      "op": "SHL"
    },
    "5425": {
      "op": "PUSH2",
      "value": "0x153B"
    },
    "5428": {
      "op": "DUP6"
    },
    "5429": {
      "op": "DUP3"
    },
    "5430": {
      "op": "ADD"
    },
    "5431": {
      "op": "PUSH2",
      "value": "0x1368"
    },
    "5434": {
      "jump": "i",
      "op": "JUMP"
    },
    "5435": {
      "op": "JUMPDEST"
    },
    "5436": {
      "op": "SWAP2"
    },
    "5437": {
      "op": "DUP3"
    },
    "5438": {
      "op": "MSTORE"
    },
    "5439": {
      "op": "DUP3"
    },
    "5440": {
      "op": "DUP2"
    },
    "5441": {
      "op": "ADD"
    },
    "5442": {
      "op": "DUP6"
    },
    "5443": {
      "op": "ADD"
    },
    "5444": {
      "op": "SWAP2"
    },
    "5445": {
      "op": "DUP6"
    },
    "5446": {
      "op": "DUP2"
    },
    "5447": {
      "op": "ADD"
    },
    "5448": {
      "op": "SWAP1"
    },
    "5449": {
      "op": "DUP10"
    },
    "5450": {
      "op": "DUP5"
    },
    "5451": {
      "op": "GT"
    },
    "5452": {
      "op": "ISZERO"
    },
    "5453": {
      "op": "PUSH2",
      "value": "0x1555"
    },
    "5456": {
      "op": "JUMPI"
    },
    "5457": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5459": {
      "op": "DUP1"
    },
    "5460": {
      "op": "REVERT"
    },
    "5461": {
      "op": "JUMPDEST"
    },
    "5462": {
      "op": "DUP7"
    },
    "5463": {
      "op": "DUP6"
    },
    "5464": {
      "op": "ADD"
    },
    "5465": {
      "op": "SWAP3"
    },
    "5466": {
      "op": "POP"
    },
    "5467": {
      "op": "JUMPDEST"
    },
    "5468": {
      "op": "DUP4"
    },
    "5469": {
      "op": "DUP4"
    },
    "5470": {
      "op": "LT"
    },
    "5471": {
      "op": "ISZERO"
    },
    "5472": {
      "op": "PUSH2",
      "value": "0x15E7"
    },
    "5475": {
      "op": "JUMPI"
    },
    "5476": {
      "op": "DUP6"
    },
    "5477": {
      "op": "DUP4"
    },
    "5478": {
      "op": "CALLDATALOAD"
    },
    "5479": {
      "op": "GT"
    },
    "5480": {
      "op": "ISZERO"
    },
    "5481": {
      "op": "PUSH2",
      "value": "0x1571"
    },
    "5484": {
      "op": "JUMPI"
    },
    "5485": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5487": {
      "op": "DUP1"
    },
    "5488": {
      "op": "REVERT"
    },
    "5489": {
      "op": "JUMPDEST"
    },
    "5490": {
      "op": "DUP3"
    },
    "5491": {
      "op": "CALLDATALOAD"
    },
    "5492": {
      "op": "DUP6"
    },
    "5493": {
      "op": "ADD"
    },
    "5494": {
      "op": "DUP11"
    },
    "5495": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "5497": {
      "op": "DUP3"
    },
    "5498": {
      "op": "ADD"
    },
    "5499": {
      "op": "SLT"
    },
    "5500": {
      "op": "PUSH2",
      "value": "0x1584"
    },
    "5503": {
      "op": "JUMPI"
    },
    "5504": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5506": {
      "op": "DUP1"
    },
    "5507": {
      "op": "REVERT"
    },
    "5508": {
      "op": "JUMPDEST"
    },
    "5509": {
      "op": "PUSH2",
      "value": "0x158C"
    },
    "5512": {
      "op": "PUSH2",
      "value": "0x133F"
    },
    "5515": {
      "jump": "i",
      "op": "JUMP"
    },
    "5516": {
      "op": "JUMPDEST"
    },
    "5517": {
      "op": "DUP1"
    },
    "5518": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5520": {
      "op": "DUP4"
    },
    "5521": {
      "op": "ADD"
    },
    "5522": {
      "op": "DUP14"
    },
    "5523": {
      "op": "DUP2"
    },
    "5524": {
      "op": "GT"
    },
    "5525": {
      "op": "ISZERO"
    },
    "5526": {
      "op": "PUSH2",
      "value": "0x159E"
    },
    "5529": {
      "op": "JUMPI"
    },
    "5530": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5532": {
      "op": "DUP1"
    },
    "5533": {
      "op": "REVERT"
    },
    "5534": {
      "op": "JUMPDEST"
    },
    "5535": {
      "op": "DUP11"
    },
    "5536": {
      "op": "DUP5"
    },
    "5537": {
      "op": "ADD"
    },
    "5538": {
      "op": "JUMPDEST"
    },
    "5539": {
      "op": "DUP2"
    },
    "5540": {
      "op": "DUP2"
    },
    "5541": {
      "op": "LT"
    },
    "5542": {
      "op": "ISZERO"
    },
    "5543": {
      "op": "PUSH2",
      "value": "0x15D4"
    },
    "5546": {
      "op": "JUMPI"
    },
    "5547": {
      "op": "DUP11"
    },
    "5548": {
      "op": "DUP2"
    },
    "5549": {
      "op": "CALLDATALOAD"
    },
    "5550": {
      "op": "GT"
    },
    "5551": {
      "op": "ISZERO"
    },
    "5552": {
      "op": "PUSH2",
      "value": "0x15B8"
    },
    "5555": {
      "op": "JUMPI"
    },
    "5556": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5558": {
      "op": "DUP1"
    },
    "5559": {
      "op": "REVERT"
    },
    "5560": {
      "op": "JUMPDEST"
    },
    "5561": {
      "op": "PUSH2",
      "value": "0x15C7"
    },
    "5564": {
      "op": "DUP16"
    },
    "5565": {
      "op": "DUP14"
    },
    "5566": {
      "op": "DUP4"
    },
    "5567": {
      "op": "CALLDATALOAD"
    },
    "5568": {
      "op": "DUP9"
    },
    "5569": {
      "op": "ADD"
    },
    "5570": {
      "op": "ADD"
    },
    "5571": {
      "op": "PUSH2",
      "value": "0x1399"
    },
    "5574": {
      "jump": "i",
      "op": "JUMP"
    },
    "5575": {
      "op": "JUMPDEST"
    },
    "5576": {
      "op": "DUP5"
    },
    "5577": {
      "op": "MSTORE"
    },
    "5578": {
      "op": "SWAP3"
    },
    "5579": {
      "op": "DUP12"
    },
    "5580": {
      "op": "ADD"
    },
    "5581": {
      "op": "SWAP3"
    },
    "5582": {
      "op": "DUP12"
    },
    "5583": {
      "op": "ADD"
    },
    "5584": {
      "op": "PUSH2",
      "value": "0x15A2"
    },
    "5587": {
      "op": "JUMP"
    },
    "5588": {
      "op": "JUMPDEST"
    },
    "5589": {
      "op": "POP"
    },
    "5590": {
      "op": "POP"
    },
    "5591": {
      "op": "DUP5"
    },
    "5592": {
      "op": "MSTORE"
    },
    "5593": {
      "op": "POP"
    },
    "5594": {
      "op": "POP"
    },
    "5595": {
      "op": "SWAP2"
    },
    "5596": {
      "op": "DUP7"
    },
    "5597": {
      "op": "ADD"
    },
    "5598": {
      "op": "SWAP2"
    },
    "5599": {
      "op": "SWAP1"
    },
    "5600": {
      "op": "DUP7"
    },
    "5601": {
      "op": "ADD"
    },
    "5602": {
      "op": "SWAP1"
    },
    "5603": {
      "op": "PUSH2",
      "value": "0x155B"
    },
    "5606": {
      "op": "JUMP"
    },
    "5607": {
      "op": "JUMPDEST"
    },
    "5608": {
      "op": "SWAP10"
    },
    "5609": {
      "op": "SWAP9"
    },
    "5610": {
      "op": "POP"
    },
    "5611": {
      "op": "POP"
    },
    "5612": {
      "op": "POP"
    },
    "5613": {
      "op": "POP"
    },
    "5614": {
      "op": "POP"
    },
    "5615": {
      "op": "POP"
    },
    "5616": {
      "op": "POP"
    },
    "5617": {
      "op": "POP"
    },
    "5618": {
      "op": "POP"
    },
    "5619": {
      "jump": "o",
      "op": "JUMP"
    },
    "5620": {
      "op": "JUMPDEST"
    },
    "5621": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5623": {
      "op": "DUP2"
    },
    "5624": {
      "op": "MSTORE"
    },
    "5625": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5627": {
      "op": "PUSH2",
      "value": "0x1607"
    },
    "5630": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5632": {
      "op": "DUP4"
    },
    "5633": {
      "op": "ADD"
    },
    "5634": {
      "op": "DUP9"
    },
    "5635": {
      "op": "PUSH2",
      "value": "0x1241"
    },
    "5638": {
      "jump": "i",
      "op": "JUMP"
    },
    "5639": {
      "op": "JUMPDEST"
    },
    "5640": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5642": {
      "op": "DUP4"
    },
    "5643": {
      "op": "ADD"
    },
    "5644": {
      "op": "SWAP7"
    },
    "5645": {
      "op": "SWAP1"
    },
    "5646": {
      "op": "SWAP7"
    },
    "5647": {
      "op": "MSTORE"
    },
    "5648": {
      "op": "POP"
    },
    "5649": {
      "op": "SWAP3"
    },
    "5650": {
      "op": "ISZERO"
    },
    "5651": {
      "op": "ISZERO"
    },
    "5652": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5654": {
      "op": "DUP5"
    },
    "5655": {
      "op": "ADD"
    },
    "5656": {
      "op": "MSTORE"
    },
    "5657": {
      "op": "SWAP1"
    },
    "5658": {
      "op": "ISZERO"
    },
    "5659": {
      "op": "ISZERO"
    },
    "5660": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5662": {
      "op": "DUP4"
    },
    "5663": {
      "op": "ADD"
    },
    "5664": {
      "op": "MSTORE"
    },
    "5665": {
      "op": "ISZERO"
    },
    "5666": {
      "op": "ISZERO"
    },
    "5667": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5669": {
      "op": "SWAP1"
    },
    "5670": {
      "op": "SWAP2"
    },
    "5671": {
      "op": "ADD"
    },
    "5672": {
      "op": "MSTORE"
    },
    "5673": {
      "op": "SWAP2"
    },
    "5674": {
      "op": "SWAP1"
    },
    "5675": {
      "op": "POP"
    },
    "5676": {
      "jump": "o",
      "op": "JUMP"
    },
    "5677": {
      "op": "JUMPDEST"
    },
    "5678": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5680": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5682": {
      "op": "DUP1"
    },
    "5683": {
      "op": "DUP4"
    },
    "5684": {
      "op": "ADD"
    },
    "5685": {
      "op": "DUP2"
    },
    "5686": {
      "op": "DUP5"
    },
    "5687": {
      "op": "MSTORE"
    },
    "5688": {
      "op": "DUP1"
    },
    "5689": {
      "op": "DUP6"
    },
    "5690": {
      "op": "MLOAD"
    },
    "5691": {
      "op": "DUP1"
    },
    "5692": {
      "op": "DUP4"
    },
    "5693": {
      "op": "MSTORE"
    },
    "5694": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5696": {
      "op": "SWAP3"
    },
    "5697": {
      "op": "POP"
    },
    "5698": {
      "op": "DUP3"
    },
    "5699": {
      "op": "DUP7"
    },
    "5700": {
      "op": "ADD"
    },
    "5701": {
      "op": "SWAP2"
    },
    "5702": {
      "op": "POP"
    },
    "5703": {
      "op": "DUP3"
    },
    "5704": {
      "op": "DUP2"
    },
    "5705": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "5707": {
      "op": "SHL"
    },
    "5708": {
      "op": "DUP8"
    },
    "5709": {
      "op": "ADD"
    },
    "5710": {
      "op": "ADD"
    },
    "5711": {
      "op": "DUP5"
    },
    "5712": {
      "op": "DUP9"
    },
    "5713": {
      "op": "ADD"
    },
    "5714": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5716": {
      "op": "JUMPDEST"
    },
    "5717": {
      "op": "DUP4"
    },
    "5718": {
      "op": "DUP2"
    },
    "5719": {
      "op": "LT"
    },
    "5720": {
      "op": "ISZERO"
    },
    "5721": {
      "op": "PUSH2",
      "value": "0x131B"
    },
    "5724": {
      "op": "JUMPI"
    },
    "5725": {
      "op": "DUP9"
    },
    "5726": {
      "op": "DUP4"
    },
    "5727": {
      "op": "SUB"
    },
    "5728": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "5730": {
      "op": "NOT"
    },
    "5731": {
      "op": "ADD"
    },
    "5732": {
      "op": "DUP6"
    },
    "5733": {
      "op": "MSTORE"
    },
    "5734": {
      "op": "DUP2"
    },
    "5735": {
      "op": "MLOAD"
    },
    "5736": {
      "op": "DUP1"
    },
    "5737": {
      "op": "MLOAD"
    },
    "5738": {
      "op": "DUP8"
    },
    "5739": {
      "op": "DUP6"
    },
    "5740": {
      "op": "MSTORE"
    },
    "5741": {
      "op": "PUSH2",
      "value": "0x1678"
    },
    "5744": {
      "op": "DUP9"
    },
    "5745": {
      "op": "DUP7"
    },
    "5746": {
      "op": "ADD"
    },
    "5747": {
      "op": "DUP3"
    },
    "5748": {
      "op": "PUSH2",
      "value": "0x1241"
    },
    "5751": {
      "jump": "i",
      "op": "JUMP"
    },
    "5752": {
      "op": "JUMPDEST"
    },
    "5753": {
      "op": "SWAP2"
    },
    "5754": {
      "op": "DUP10"
    },
    "5755": {
      "op": "ADD"
    },
    "5756": {
      "op": "MLOAD"
    },
    "5757": {
      "op": "SWAP5"
    },
    "5758": {
      "op": "DUP10"
    },
    "5759": {
      "op": "ADD"
    },
    "5760": {
      "op": "SWAP5"
    },
    "5761": {
      "op": "SWAP1"
    },
    "5762": {
      "op": "SWAP5"
    },
    "5763": {
      "op": "MSTORE"
    },
    "5764": {
      "op": "SWAP5"
    },
    "5765": {
      "op": "DUP8"
    },
    "5766": {
      "op": "ADD"
    },
    "5767": {
      "op": "SWAP5"
    },
    "5768": {
      "op": "SWAP3"
    },
    "5769": {
      "op": "POP"
    },
    "5770": {
      "op": "SWAP1"
    },
    "5771": {
      "op": "DUP7"
    },
    "5772": {
      "op": "ADD"
    },
    "5773": {
      "op": "SWAP1"
    },
    "5774": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5776": {
      "op": "ADD"
    },
    "5777": {
      "op": "PUSH2",
      "value": "0x1654"
    },
    "5780": {
      "op": "JUMP"
    },
    "5781": {
      "op": "JUMPDEST"
    },
    "5782": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5784": {
      "op": "DUP1"
    },
    "5785": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5787": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5789": {
      "op": "DUP5"
    },
    "5790": {
      "op": "DUP7"
    },
    "5791": {
      "op": "SUB"
    },
    "5792": {
      "op": "SLT"
    },
    "5793": {
      "op": "ISZERO"
    },
    "5794": {
      "op": "PUSH2",
      "value": "0x16AA"
    },
    "5797": {
      "op": "JUMPI"
    },
    "5798": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5800": {
      "op": "DUP1"
    },
    "5801": {
      "op": "REVERT"
    },
    "5802": {
      "op": "JUMPDEST"
    },
    "5803": {
      "op": "DUP4"
    },
    "5804": {
      "op": "CALLDATALOAD"
    },
    "5805": {
      "op": "PUSH2",
      "value": "0x16B5"
    },
    "5808": {
      "op": "DUP2"
    },
    "5809": {
      "op": "PUSH2",
      "value": "0x147F"
    },
    "5812": {
      "jump": "i",
      "op": "JUMP"
    },
    "5813": {
      "op": "JUMPDEST"
    },
    "5814": {
      "op": "SWAP3"
    },
    "5815": {
      "op": "POP"
    },
    "5816": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5818": {
      "op": "DUP5"
    },
    "5819": {
      "op": "ADD"
    },
    "5820": {
      "op": "CALLDATALOAD"
    },
    "5821": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5830": {
      "op": "DUP1"
    },
    "5831": {
      "op": "DUP3"
    },
    "5832": {
      "op": "GT"
    },
    "5833": {
      "op": "ISZERO"
    },
    "5834": {
      "op": "PUSH2",
      "value": "0x16D2"
    },
    "5837": {
      "op": "JUMPI"
    },
    "5838": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5840": {
      "op": "DUP1"
    },
    "5841": {
      "op": "REVERT"
    },
    "5842": {
      "op": "JUMPDEST"
    },
    "5843": {
      "op": "PUSH2",
      "value": "0x16DE"
    },
    "5846": {
      "op": "DUP8"
    },
    "5847": {
      "op": "DUP4"
    },
    "5848": {
      "op": "DUP9"
    },
    "5849": {
      "op": "ADD"
    },
    "5850": {
      "op": "PUSH2",
      "value": "0x1399"
    },
    "5853": {
      "jump": "i",
      "op": "JUMP"
    },
    "5854": {
      "op": "JUMPDEST"
    },
    "5855": {
      "op": "SWAP4"
    },
    "5856": {
      "op": "POP"
    },
    "5857": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5859": {
      "op": "DUP7"
    },
    "5860": {
      "op": "ADD"
    },
    "5861": {
      "op": "CALLDATALOAD"
    },
    "5862": {
      "op": "SWAP2"
    },
    "5863": {
      "op": "POP"
    },
    "5864": {
      "op": "DUP1"
    },
    "5865": {
      "op": "DUP3"
    },
    "5866": {
      "op": "GT"
    },
    "5867": {
      "op": "ISZERO"
    },
    "5868": {
      "op": "PUSH2",
      "value": "0x16F4"
    },
    "5871": {
      "op": "JUMPI"
    },
    "5872": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5874": {
      "op": "DUP1"
    },
    "5875": {
      "op": "REVERT"
    },
    "5876": {
      "op": "JUMPDEST"
    },
    "5877": {
      "op": "POP"
    },
    "5878": {
      "op": "PUSH2",
      "value": "0x1701"
    },
    "5881": {
      "op": "DUP7"
    },
    "5882": {
      "op": "DUP3"
    },
    "5883": {
      "op": "DUP8"
    },
    "5884": {
      "op": "ADD"
    },
    "5885": {
      "op": "PUSH2",
      "value": "0x1399"
    },
    "5888": {
      "jump": "i",
      "op": "JUMP"
    },
    "5889": {
      "op": "JUMPDEST"
    },
    "5890": {
      "op": "SWAP2"
    },
    "5891": {
      "op": "POP"
    },
    "5892": {
      "op": "POP"
    },
    "5893": {
      "op": "SWAP3"
    },
    "5894": {
      "op": "POP"
    },
    "5895": {
      "op": "SWAP3"
    },
    "5896": {
      "op": "POP"
    },
    "5897": {
      "op": "SWAP3"
    },
    "5898": {
      "jump": "o",
      "op": "JUMP"
    },
    "5899": {
      "op": "JUMPDEST"
    },
    "5900": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5905": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5907": {
      "op": "SHL"
    },
    "5908": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5910": {
      "op": "MSTORE"
    },
    "5911": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "5913": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5915": {
      "op": "MSTORE"
    },
    "5916": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5918": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5920": {
      "op": "REVERT"
    },
    "5921": {
      "op": "JUMPDEST"
    },
    "5922": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5927": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5929": {
      "op": "SHL"
    },
    "5930": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5932": {
      "op": "MSTORE"
    },
    "5933": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "5935": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5937": {
      "op": "MSTORE"
    },
    "5938": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5940": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5942": {
      "op": "REVERT"
    },
    "5943": {
      "op": "JUMPDEST"
    },
    "5944": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5946": {
      "op": "DUP3"
    },
    "5947": {
      "op": "NOT"
    },
    "5948": {
      "op": "DUP3"
    },
    "5949": {
      "op": "GT"
    },
    "5950": {
      "op": "ISZERO"
    },
    "5951": {
      "op": "PUSH2",
      "value": "0x174A"
    },
    "5954": {
      "op": "JUMPI"
    },
    "5955": {
      "op": "PUSH2",
      "value": "0x174A"
    },
    "5958": {
      "op": "PUSH2",
      "value": "0x1721"
    },
    "5961": {
      "jump": "i",
      "op": "JUMP"
    },
    "5962": {
      "op": "JUMPDEST"
    },
    "5963": {
      "op": "POP"
    },
    "5964": {
      "op": "ADD"
    },
    "5965": {
      "op": "SWAP1"
    },
    "5966": {
      "jump": "o",
      "op": "JUMP"
    },
    "5967": {
      "op": "JUMPDEST"
    },
    "5968": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5970": {
      "op": "DUP2"
    },
    "5971": {
      "op": "DUP2"
    },
    "5972": {
      "op": "SHR"
    },
    "5973": {
      "op": "SWAP1"
    },
    "5974": {
      "op": "DUP3"
    },
    "5975": {
      "op": "AND"
    },
    "5976": {
      "op": "DUP1"
    },
    "5977": {
      "op": "PUSH2",
      "value": "0x1763"
    },
    "5980": {
      "op": "JUMPI"
    },
    "5981": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "5983": {
      "op": "DUP3"
    },
    "5984": {
      "op": "AND"
    },
    "5985": {
      "op": "SWAP2"
    },
    "5986": {
      "op": "POP"
    },
    "5987": {
      "op": "JUMPDEST"
    },
    "5988": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5990": {
      "op": "DUP3"
    },
    "5991": {
      "op": "LT"
    },
    "5992": {
      "op": "DUP2"
    },
    "5993": {
      "op": "EQ"
    },
    "5994": {
      "op": "ISZERO"
    },
    "5995": {
      "op": "PUSH2",
      "value": "0x1784"
    },
    "5998": {
      "op": "JUMPI"
    },
    "5999": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6004": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6006": {
      "op": "SHL"
    },
    "6007": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6009": {
      "op": "MSTORE"
    },
    "6010": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "6012": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6014": {
      "op": "MSTORE"
    },
    "6015": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6017": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6019": {
      "op": "REVERT"
    },
    "6020": {
      "op": "JUMPDEST"
    },
    "6021": {
      "op": "POP"
    },
    "6022": {
      "op": "SWAP2"
    },
    "6023": {
      "op": "SWAP1"
    },
    "6024": {
      "op": "POP"
    },
    "6025": {
      "jump": "o",
      "op": "JUMP"
    },
    "6026": {
      "op": "JUMPDEST"
    },
    "6027": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6029": {
      "op": "DUP3"
    },
    "6030": {
      "op": "DUP3"
    },
    "6031": {
      "op": "LT"
    },
    "6032": {
      "op": "ISZERO"
    },
    "6033": {
      "op": "PUSH2",
      "value": "0x179C"
    },
    "6036": {
      "op": "JUMPI"
    },
    "6037": {
      "op": "PUSH2",
      "value": "0x179C"
    },
    "6040": {
      "op": "PUSH2",
      "value": "0x1721"
    },
    "6043": {
      "jump": "i",
      "op": "JUMP"
    },
    "6044": {
      "op": "JUMPDEST"
    },
    "6045": {
      "op": "POP"
    },
    "6046": {
      "op": "SUB"
    },
    "6047": {
      "op": "SWAP1"
    },
    "6048": {
      "jump": "o",
      "op": "JUMP"
    },
    "6049": {
      "op": "JUMPDEST"
    },
    "6050": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6052": {
      "op": "DUP2"
    },
    "6053": {
      "op": "DUP2"
    },
    "6054": {
      "op": "JUMPDEST"
    },
    "6055": {
      "op": "DUP1"
    },
    "6056": {
      "op": "DUP6"
    },
    "6057": {
      "op": "GT"
    },
    "6058": {
      "op": "ISZERO"
    },
    "6059": {
      "op": "PUSH2",
      "value": "0x17DC"
    },
    "6062": {
      "op": "JUMPI"
    },
    "6063": {
      "op": "DUP2"
    },
    "6064": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6066": {
      "op": "NOT"
    },
    "6067": {
      "op": "DIV"
    },
    "6068": {
      "op": "DUP3"
    },
    "6069": {
      "op": "GT"
    },
    "6070": {
      "op": "ISZERO"
    },
    "6071": {
      "op": "PUSH2",
      "value": "0x17C2"
    },
    "6074": {
      "op": "JUMPI"
    },
    "6075": {
      "op": "PUSH2",
      "value": "0x17C2"
    },
    "6078": {
      "op": "PUSH2",
      "value": "0x1721"
    },
    "6081": {
      "jump": "i",
      "op": "JUMP"
    },
    "6082": {
      "op": "JUMPDEST"
    },
    "6083": {
      "op": "DUP1"
    },
    "6084": {
      "op": "DUP6"
    },
    "6085": {
      "op": "AND"
    },
    "6086": {
      "op": "ISZERO"
    },
    "6087": {
      "op": "PUSH2",
      "value": "0x17CF"
    },
    "6090": {
      "op": "JUMPI"
    },
    "6091": {
      "op": "SWAP2"
    },
    "6092": {
      "op": "DUP2"
    },
    "6093": {
      "op": "MUL"
    },
    "6094": {
      "op": "SWAP2"
    },
    "6095": {
      "op": "JUMPDEST"
    },
    "6096": {
      "op": "SWAP4"
    },
    "6097": {
      "op": "DUP5"
    },
    "6098": {
      "op": "SHR"
    },
    "6099": {
      "op": "SWAP4"
    },
    "6100": {
      "op": "SWAP1"
    },
    "6101": {
      "op": "DUP1"
    },
    "6102": {
      "op": "MUL"
    },
    "6103": {
      "op": "SWAP1"
    },
    "6104": {
      "op": "PUSH2",
      "value": "0x17A6"
    },
    "6107": {
      "op": "JUMP"
    },
    "6108": {
      "op": "JUMPDEST"
    },
    "6109": {
      "op": "POP"
    },
    "6110": {
      "op": "SWAP3"
    },
    "6111": {
      "op": "POP"
    },
    "6112": {
      "op": "SWAP3"
    },
    "6113": {
      "op": "SWAP1"
    },
    "6114": {
      "op": "POP"
    },
    "6115": {
      "jump": "o",
      "op": "JUMP"
    },
    "6116": {
      "op": "JUMPDEST"
    },
    "6117": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6119": {
      "op": "DUP3"
    },
    "6120": {
      "op": "PUSH2",
      "value": "0x17F3"
    },
    "6123": {
      "op": "JUMPI"
    },
    "6124": {
      "op": "POP"
    },
    "6125": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6127": {
      "op": "PUSH2",
      "value": "0x1881"
    },
    "6130": {
      "op": "JUMP"
    },
    "6131": {
      "op": "JUMPDEST"
    },
    "6132": {
      "op": "DUP2"
    },
    "6133": {
      "op": "PUSH2",
      "value": "0x1800"
    },
    "6136": {
      "op": "JUMPI"
    },
    "6137": {
      "op": "POP"
    },
    "6138": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6140": {
      "op": "PUSH2",
      "value": "0x1881"
    },
    "6143": {
      "op": "JUMP"
    },
    "6144": {
      "op": "JUMPDEST"
    },
    "6145": {
      "op": "DUP2"
    },
    "6146": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6148": {
      "op": "DUP2"
    },
    "6149": {
      "op": "EQ"
    },
    "6150": {
      "op": "PUSH2",
      "value": "0x1816"
    },
    "6153": {
      "op": "JUMPI"
    },
    "6154": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "6156": {
      "op": "DUP2"
    },
    "6157": {
      "op": "EQ"
    },
    "6158": {
      "op": "PUSH2",
      "value": "0x1820"
    },
    "6161": {
      "op": "JUMPI"
    },
    "6162": {
      "op": "PUSH2",
      "value": "0x183C"
    },
    "6165": {
      "op": "JUMP"
    },
    "6166": {
      "op": "JUMPDEST"
    },
    "6167": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6169": {
      "op": "SWAP2"
    },
    "6170": {
      "op": "POP"
    },
    "6171": {
      "op": "POP"
    },
    "6172": {
      "op": "PUSH2",
      "value": "0x1881"
    },
    "6175": {
      "op": "JUMP"
    },
    "6176": {
      "op": "JUMPDEST"
    },
    "6177": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6179": {
      "op": "DUP5"
    },
    "6180": {
      "op": "GT"
    },
    "6181": {
      "op": "ISZERO"
    },
    "6182": {
      "op": "PUSH2",
      "value": "0x1831"
    },
    "6185": {
      "op": "JUMPI"
    },
    "6186": {
      "op": "PUSH2",
      "value": "0x1831"
    },
    "6189": {
      "op": "PUSH2",
      "value": "0x1721"
    },
    "6192": {
      "jump": "i",
      "op": "JUMP"
    },
    "6193": {
      "op": "JUMPDEST"
    },
    "6194": {
      "op": "POP"
    },
    "6195": {
      "op": "POP"
    },
    "6196": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6198": {
      "op": "DUP3"
    },
    "6199": {
      "op": "SHL"
    },
    "6200": {
      "op": "PUSH2",
      "value": "0x1881"
    },
    "6203": {
      "op": "JUMP"
    },
    "6204": {
      "op": "JUMPDEST"
    },
    "6205": {
      "op": "POP"
    },
    "6206": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6208": {
      "op": "DUP4"
    },
    "6209": {
      "op": "LT"
    },
    "6210": {
      "op": "PUSH2",
      "value": "0x133"
    },
    "6213": {
      "op": "DUP4"
    },
    "6214": {
      "op": "LT"
    },
    "6215": {
      "op": "AND"
    },
    "6216": {
      "op": "PUSH1",
      "value": "0x4E"
    },
    "6218": {
      "op": "DUP5"
    },
    "6219": {
      "op": "LT"
    },
    "6220": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "6222": {
      "op": "DUP5"
    },
    "6223": {
      "op": "LT"
    },
    "6224": {
      "op": "AND"
    },
    "6225": {
      "op": "OR"
    },
    "6226": {
      "op": "ISZERO"
    },
    "6227": {
      "op": "PUSH2",
      "value": "0x185F"
    },
    "6230": {
      "op": "JUMPI"
    },
    "6231": {
      "op": "POP"
    },
    "6232": {
      "op": "DUP2"
    },
    "6233": {
      "op": "DUP2"
    },
    "6234": {
      "op": "EXP"
    },
    "6235": {
      "op": "PUSH2",
      "value": "0x1881"
    },
    "6238": {
      "op": "JUMP"
    },
    "6239": {
      "op": "JUMPDEST"
    },
    "6240": {
      "op": "PUSH2",
      "value": "0x1869"
    },
    "6243": {
      "op": "DUP4"
    },
    "6244": {
      "op": "DUP4"
    },
    "6245": {
      "op": "PUSH2",
      "value": "0x17A1"
    },
    "6248": {
      "jump": "i",
      "op": "JUMP"
    },
    "6249": {
      "op": "JUMPDEST"
    },
    "6250": {
      "op": "DUP1"
    },
    "6251": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6253": {
      "op": "NOT"
    },
    "6254": {
      "op": "DIV"
    },
    "6255": {
      "op": "DUP3"
    },
    "6256": {
      "op": "GT"
    },
    "6257": {
      "op": "ISZERO"
    },
    "6258": {
      "op": "PUSH2",
      "value": "0x187D"
    },
    "6261": {
      "op": "JUMPI"
    },
    "6262": {
      "op": "PUSH2",
      "value": "0x187D"
    },
    "6265": {
      "op": "PUSH2",
      "value": "0x1721"
    },
    "6268": {
      "jump": "i",
      "op": "JUMP"
    },
    "6269": {
      "op": "JUMPDEST"
    },
    "6270": {
      "op": "MUL"
    },
    "6271": {
      "op": "SWAP1"
    },
    "6272": {
      "op": "POP"
    },
    "6273": {
      "op": "JUMPDEST"
    },
    "6274": {
      "op": "SWAP3"
    },
    "6275": {
      "op": "SWAP2"
    },
    "6276": {
      "op": "POP"
    },
    "6277": {
      "op": "POP"
    },
    "6278": {
      "jump": "o",
      "op": "JUMP"
    },
    "6279": {
      "op": "JUMPDEST"
    },
    "6280": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6282": {
      "op": "PUSH2",
      "value": "0x14B4"
    },
    "6285": {
      "op": "DUP4"
    },
    "6286": {
      "op": "DUP4"
    },
    "6287": {
      "op": "PUSH2",
      "value": "0x17E4"
    },
    "6290": {
      "jump": "i",
      "op": "JUMP"
    },
    "6291": {
      "op": "JUMPDEST"
    },
    "6292": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6294": {
      "op": "DUP2"
    },
    "6295": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6297": {
      "op": "NOT"
    },
    "6298": {
      "op": "DIV"
    },
    "6299": {
      "op": "DUP4"
    },
    "6300": {
      "op": "GT"
    },
    "6301": {
      "op": "DUP3"
    },
    "6302": {
      "op": "ISZERO"
    },
    "6303": {
      "op": "ISZERO"
    },
    "6304": {
      "op": "AND"
    },
    "6305": {
      "op": "ISZERO"
    },
    "6306": {
      "op": "PUSH2",
      "value": "0x18AD"
    },
    "6309": {
      "op": "JUMPI"
    },
    "6310": {
      "op": "PUSH2",
      "value": "0x18AD"
    },
    "6313": {
      "op": "PUSH2",
      "value": "0x1721"
    },
    "6316": {
      "jump": "i",
      "op": "JUMP"
    },
    "6317": {
      "op": "JUMPDEST"
    },
    "6318": {
      "op": "POP"
    },
    "6319": {
      "op": "MUL"
    },
    "6320": {
      "op": "SWAP1"
    },
    "6321": {
      "jump": "o",
      "op": "JUMP"
    },
    "6322": {
      "op": "JUMPDEST"
    },
    "6323": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6325": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6327": {
      "op": "NOT"
    },
    "6328": {
      "op": "DUP3"
    },
    "6329": {
      "op": "EQ"
    },
    "6330": {
      "op": "ISZERO"
    },
    "6331": {
      "op": "PUSH2",
      "value": "0x18C6"
    },
    "6334": {
      "op": "JUMPI"
    },
    "6335": {
      "op": "PUSH2",
      "value": "0x18C6"
    },
    "6338": {
      "op": "PUSH2",
      "value": "0x1721"
    },
    "6341": {
      "jump": "i",
      "op": "JUMP"
    },
    "6342": {
      "op": "JUMPDEST"
    },
    "6343": {
      "op": "POP"
    },
    "6344": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6346": {
      "op": "ADD"
    },
    "6347": {
      "op": "SWAP1"
    },
    "6348": {
      "jump": "o",
      "op": "JUMP"
    },
    "6349": {
      "op": "JUMPDEST"
    },
    "6350": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6352": {
      "op": "DUP1"
    },
    "6353": {
      "op": "DUP3"
    },
    "6354": {
      "op": "MSTORE"
    },
    "6355": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "6357": {
      "op": "SWAP1"
    },
    "6358": {
      "op": "DUP3"
    },
    "6359": {
      "op": "ADD"
    },
    "6360": {
      "op": "MSTORE"
    },
    "6361": {
      "op": "PUSH32",
      "value": "0x4F6E6C792063686169726D616E2063616E206769766520746865207269676874"
    },
    "6394": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6396": {
      "op": "DUP3"
    },
    "6397": {
      "op": "ADD"
    },
    "6398": {
      "op": "MSTORE"
    },
    "6399": {
      "op": "PUSH8",
      "value": "0x20746F20766F7465"
    },
    "6408": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "6410": {
      "op": "SHL"
    },
    "6411": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6413": {
      "op": "DUP3"
    },
    "6414": {
      "op": "ADD"
    },
    "6415": {
      "op": "MSTORE"
    },
    "6416": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6418": {
      "op": "ADD"
    },
    "6419": {
      "op": "SWAP1"
    },
    "6420": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "65ea943b4e0bfa3e340cc152e8debac4f9d5f909",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0 <0.9.0;\npragma abicoder v2;\n\ncontract Voting {\n    struct Voter {\n        string id;\n        uint256 area;\n        bool canVote;\n        bool votedForCandidate;\n        bool votedForParty;\n    }\n\n    struct Party {\n        string name;\n        uint256 voteCount;\n    }\n\n    struct Candidate {\n        string name;\n        string party;\n        uint256 area;\n        uint256 voteCount;\n    }\n\n    address public chairperson;\n    mapping(address => Voter) public voters;\n    uint256 voter_count = 0;\n    Candidate[] public candidates;\n    Party[] public parties;\n\n    constructor(\n        string[3][] memory candidateNamesParty,\n        string[] memory partyNames\n    ) payable {\n        chairperson = msg.sender;\n        voters[chairperson].canVote = true;\n        for (uint256 i = 0; i < candidateNamesParty.length; i++) {\n            candidates.push(\n                Candidate({\n                    name: candidateNamesParty[i][0],\n                    party: candidateNamesParty[i][1],\n                    area: stringToUint(candidateNamesParty[i][2]),\n                    voteCount: 0\n                })\n            );\n        }\n        for (uint256 i = 0; i < partyNames.length; i++) {\n            parties.push(Party({name: partyNames[i], voteCount: 0}));\n        }\n        voter_count += 1;\n    }\n\n    function stringToUint(string memory numString)\n        public\n        pure\n        returns (uint256)\n    {\n        uint256 val = 0;\n        bytes memory stringBytes = bytes(numString);\n        for (uint256 i = 0; i < stringBytes.length; i++) {\n            uint256 exp = stringBytes.length - i;\n            bytes1 ival = stringBytes[i];\n            uint8 uval = uint8(ival);\n            uint256 jval = uval - uint256(0x30);\n\n            val += (uint256(jval) * (10**(exp - 1)));\n        }\n        return val;\n    }\n\n    function addCandidates(string[3][] memory candidateNamesParty) external {\n        require(\n            msg.sender == chairperson,\n            \"Only chairman can give the right to vote\"\n        );\n        for (uint256 i = 0; i < candidateNamesParty.length; i++) {\n            candidates.push(\n                Candidate({\n                    name: candidateNamesParty[i][0],\n                    party: candidateNamesParty[i][1],\n                    area: stringToUint(candidateNamesParty[i][2]),\n                    voteCount: 0\n                })\n            );\n        }\n    }\n\n    function getCandidates() public view returns (Candidate[] memory) {\n        return candidates;\n    }\n\n    function getParties() public view returns (Party[] memory) {\n        return parties;\n    }\n\n    function giveRightToVote(\n        address payable voter,\n        string memory id,\n        string memory area\n    ) external {\n        require(\n            msg.sender == chairperson,\n            \"Only chairman can give the right to vote\"\n        );\n        require(\n            !voters[voter].votedForCandidate || !voters[voter].votedForParty,\n            \"The voter already voted\"\n        );\n        require(!voters[voter].canVote, \"Voter can already vote\");\n        voters[voter].canVote = true;\n        voters[voter].id = id;\n        voters[voter].area = stringToUint(area);\n        voters[voter].votedForCandidate = false;\n        voters[voter].votedForParty = false;\n        voter.transfer(100000000000000);\n        voter_count += 1;\n    }\n\n    function removeRightToVote(address voter) external {\n        require(\n            msg.sender == chairperson,\n            \"Only chairman can give denounce right to vote\"\n        );\n        require(\n            !voters[voter].votedForCandidate || !voters[voter].votedForParty,\n            \"The voter already voted\"\n        );\n        require(voters[voter].canVote, \"Voter doesn't have right to vote\");\n        voters[voter].canVote = false;\n        voter_count -= 1;\n    }\n\n    function voteCandidate(uint256 candidate) external {\n        Voter storage sender = voters[msg.sender];\n        require(sender.canVote, \"Has no right to vote\");\n        require(!sender.votedForCandidate, \"already voted for candidate\");\n        require(\n            sender.area == candidates[candidate].area,\n            \"cannot vote candidate in this area\"\n        );\n        candidates[candidate].voteCount += 1;\n        sender.votedForCandidate = true;\n    }\n\n    function voteParty(uint256 party) external {\n        Voter storage sender = voters[msg.sender];\n        require(sender.canVote, \"Has no right to vote\");\n        require(!sender.votedForParty, \"already voted for party\");\n        parties[party].voteCount += 1;\n        sender.votedForCandidate = true;\n    }\n\n    function winningCandidate()\n        public\n        view\n        returns (uint256 winningCandidate_)\n    {\n        uint256 winningVoteCount = 0;\n        for (uint256 i = 0; i < candidates.length; i++) {\n            if (candidates[i].voteCount > winningVoteCount) {\n                winningVoteCount = candidates[i].voteCount;\n                winningCandidate_ = i;\n            }\n        }\n    }\n\n    function winningParty() public view returns (uint256 winningParty_) {\n        uint256 winningVoteCount = 0;\n        for (uint256 i = 0; i < parties.length; i++) {\n            if (parties[i].voteCount > winningVoteCount) {\n                winningVoteCount = parties[i].voteCount;\n                winningParty_ = i;\n            }\n        }\n    }\n\n    function voters_count() public view returns (uint256) {\n        return voter_count;\n    }\n\n    function fund() public payable {}\n\n    function get_balance() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n",
  "sourceMap": "89:5564:0:-:0;;;555:1;533:23;;626:734;;;;;;;;;;;;;;;;;;:::i;:::-;746:11;:24;;-1:-1:-1;;;;;;746:24:0;760:10;746:24;;;;;780:19;;746:24;780:19;;;;;;;:27;;:34;;-1:-1:-1;;780:34:0;;;;;;824:366;848:19;:26;844:1;:30;824:366;;;895:10;928:237;;;;;;;;966:19;986:1;966:22;;;;;;;;:::i;:::-;;;;;;;989:1;966:25;;;;;;;:::i;:::-;;;;;928:237;;;;1020:19;1040:1;1020:22;;;;;;;;:::i;:::-;;;;;;;1043:1;1020:25;;;;;;;:::i;:::-;;;;;928:237;;;;1073:39;1086:19;1106:1;1086:22;;;;;;;;:::i;:::-;;;;;;;1109:1;1086:25;;;;;;;:::i;:::-;;;;;1073:12;:39::i;:::-;928:237;;1145:1;928:237;;;;;;;895:284;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;895:284:0;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;895:284:0;;;;;;;;;;;;;;;;;;876:3;;;;:::i;:::-;;;;824:366;;;;1204:9;1199:129;1223:10;:17;1219:1;:21;1199:129;;;1261:7;1274:42;;;;;;;;1287:10;1298:1;1287:13;;;;;;;;:::i;:::-;;;;;;;;;;;;1274:42;;1313:1;1274:42;;;;;;1261:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;1242:3;;;;;:::i;:::-;;;;1199:129;;;;1352:1;1337:11;;:16;;;;;;;:::i;:::-;;;;-1:-1:-1;89:5564:0;;-1:-1:-1;;;89:5564:0;1366:513;1458:7;;1539:9;1458:7;1559:294;1583:11;:18;1579:1;:22;1559:294;;;1622:11;1657:1;1636:11;:18;:22;;;;:::i;:::-;1622:36;;1672:11;1686;1698:1;1686:14;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;1686:14:0;;1714:10;1767:20;1782:4;1686:14;1767:20;:::i;:::-;1752:35;-1:-1:-1;1832:7:0;1838:1;1832:3;:7;:::i;:::-;1827:13;;:2;:13;:::i;:::-;1810:31;;1818:4;1810:31;:::i;:::-;1802:40;;;;:::i;:::-;;;1608:245;;;;1603:3;;;;;:::i;:::-;;;;1559:294;;;-1:-1:-1;1869:3:0;;1366:513;-1:-1:-1;;;1366:513:0:o;89:5564::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;89:5564:0;;;-1:-1:-1;89:5564:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:1;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:251;218:2;212:9;260:2;248:15;;-1:-1:-1;;;;;278:34:1;;314:22;;;275:62;272:88;;;340:18;;:::i;:::-;376:2;369:22;146:251;:::o;402:275::-;473:2;467:9;538:2;519:13;;-1:-1:-1;;515:27:1;503:40;;-1:-1:-1;;;;;558:34:1;;594:22;;;555:62;552:88;;;620:18;;:::i;:::-;656:2;649:22;402:275;;-1:-1:-1;402:275:1:o;682:188::-;747:4;-1:-1:-1;;;;;769:30:1;;766:56;;;802:18;;:::i;:::-;-1:-1:-1;847:1:1;843:14;859:4;839:25;;682:188::o;875:695::-;929:5;982:3;975:4;967:6;963:17;959:27;949:55;;1000:1;997;990:12;949:55;1023:13;;-1:-1:-1;;;;;1048:26:1;;1045:52;;;1077:18;;:::i;:::-;1116:4;1144:53;1187:2;1168:13;;-1:-1:-1;;1164:27:1;1160:36;;1144:53;:::i;:::-;1222:2;1213:7;1206:19;1266:3;1261:2;1256;1248:6;1244:15;1240:24;1237:33;1234:53;;;1283:1;1280;1273:12;1234:53;1305:1;1315:134;1329:2;1326:1;1323:9;1315:134;;;1418:14;;;1414:23;;1408:30;1386:15;;;1382:24;;1375:64;1340:10;;1315:134;;;1467:2;1464:1;1461:9;1458:81;;;1527:1;1522:2;1517;1508:7;1504:16;1500:25;1493:36;1458:81;-1:-1:-1;1557:7:1;875:695;-1:-1:-1;;;;;875:695:1:o;1575:901::-;1639:5;1692:3;1685:4;1677:6;1673:17;1669:27;1659:55;;1710:1;1707;1700:12;1659:55;1739:6;1733:13;1765:4;1789:65;1805:48;1850:2;1805:48;:::i;:::-;1789:65;:::i;:::-;1888:15;;;1974:1;1970:10;;;;1958:23;;1954:32;;;1919:12;;;;1998:15;;;1995:35;;;2026:1;2023;2016:12;1995:35;2062:2;2054:6;2050:15;2074:373;2090:6;2085:3;2082:15;2074:373;;;2163:10;;-1:-1:-1;;;;;2189:35:1;;2186:125;;;2265:1;2294:2;2290;2283:14;2186:125;2336:68;2400:3;2395:2;2381:11;2373:6;2369:24;2365:33;2336:68;:::i;:::-;2324:81;;-1:-1:-1;2425:12:1;;;;2107;;2074:373;;;-1:-1:-1;2465:5:1;1575:901;-1:-1:-1;;;;;;1575:901:1:o;2481:1900::-;2653:6;2661;2714:2;2702:9;2693:7;2689:23;2685:32;2682:52;;;2730:1;2727;2720:12;2682:52;2757:16;;-1:-1:-1;;;;;2822:14:1;;;2819:34;;;2849:1;2846;2839:12;2819:34;2887:6;2876:9;2872:22;2862:32;;2932:7;2925:4;2921:2;2917:13;2913:27;2903:55;;2954:1;2951;2944:12;2903:55;2983:2;2977:9;3006:65;3022:48;3067:2;3022:48;:::i;3006:65::-;3093:3;3117:2;3112:3;3105:15;3145:4;3140:3;3136:14;3129:21;;3198:4;3192:2;3189:1;3185:10;3181:2;3177:19;3173:30;3159:44;;3226:7;3218:6;3215:19;3212:39;;;3247:1;3244;3237:12;3212:39;3279:4;3275:2;3271:13;3293:869;3309:6;3304:3;3301:15;3293:869;;;3390:3;3384:10;3426:2;3413:11;3410:19;3407:39;;;3442:1;3439;3432:12;3407:39;3469:20;;3524:2;3516:11;;3512:25;-1:-1:-1;3502:53:1;;3551:1;3548;3541:12;3502:53;3581:22;;:::i;:::-;3629:5;3667:7;3661:3;3657:2;3653:12;3650:25;3647:45;;;3688:1;3685;3678:12;3647:45;3726:4;3722:2;3718:13;3744:343;3770:3;3766:2;3762:12;3755:5;3752:23;3744:343;;;3863:5;3857:12;3907:2;3892:13;3889:21;3886:41;;;3923:1;3920;3913:12;3886:41;3958:72;4022:7;4015:4;3999:13;3995:2;3991:22;3987:33;3958:72;:::i;:::-;3944:87;;-1:-1:-1;4068:4:1;4057:16;;;;3787;3744:343;;;-1:-1:-1;4100:18:1;;-1:-1:-1;;4147:4:1;4138:14;;;;3326;3293:869;;;-1:-1:-1;4232:4:1;4217:20;;4211:27;4181:5;;-1:-1:-1;4211:27:1;-1:-1:-1;;;4250:16:1;;;4247:36;;;4279:1;4276;4269:12;4247:36;;4302:73;4367:7;4356:8;4345:9;4341:24;4302:73;:::i;:::-;4292:83;;;2481:1900;;;;;:::o;4386:127::-;4447:10;4442:3;4438:20;4435:1;4428:31;4478:4;4475:1;4468:15;4502:4;4499:1;4492:15;4518:127;4579:10;4574:3;4570:20;4567:1;4560:31;4610:4;4607:1;4600:15;4634:4;4631:1;4624:15;4650:135;4689:3;-1:-1:-1;;4710:17:1;;4707:43;;;4730:18;;:::i;:::-;-1:-1:-1;4777:1:1;4766:13;;4650:135::o;4790:128::-;4830:3;4861:1;4857:6;4854:1;4851:13;4848:39;;;4867:18;;:::i;:::-;-1:-1:-1;4903:9:1;;4790:128::o;4923:125::-;4963:4;4991:1;4988;4985:8;4982:34;;;4996:18;;:::i;:::-;-1:-1:-1;5033:9:1;;4923:125::o;5053:422::-;5142:1;5185:5;5142:1;5199:270;5220:7;5210:8;5207:21;5199:270;;;5279:4;5275:1;5271:6;5267:17;5261:4;5258:27;5255:53;;;5288:18;;:::i;:::-;5338:7;5328:8;5324:22;5321:55;;;5358:16;;;;5321:55;5437:22;;;;5397:15;;;;5199:270;;;5203:3;5053:422;;;;;:::o;5480:806::-;5529:5;5559:8;5549:80;;-1:-1:-1;5600:1:1;5614:5;;5549:80;5648:4;5638:76;;-1:-1:-1;5685:1:1;5699:5;;5638:76;5730:4;5748:1;5743:59;;;;5816:1;5811:130;;;;5723:218;;5743:59;5773:1;5764:10;;5787:5;;;5811:130;5848:3;5838:8;5835:17;5832:43;;;5855:18;;:::i;:::-;-1:-1:-1;;5911:1:1;5897:16;;5926:5;;5723:218;;6025:2;6015:8;6012:16;6006:3;6000:4;5997:13;5993:36;5987:2;5977:8;5974:16;5969:2;5963:4;5960:12;5956:35;5953:77;5950:159;;;-1:-1:-1;6062:19:1;;;6094:5;;5950:159;6141:34;6166:8;6160:4;6141:34;:::i;:::-;6211:6;6207:1;6203:6;6199:19;6190:7;6187:32;6184:58;;;6222:18;;:::i;:::-;6260:20;;-1:-1:-1;5480:806:1;;;;;:::o;6291:131::-;6351:5;6380:36;6407:8;6401:4;6380:36;:::i;:::-;6371:45;6291:131;-1:-1:-1;;;6291:131:1:o;6427:168::-;6467:7;6533:1;6529;6525:6;6521:14;6518:1;6515:21;6510:1;6503:9;6496:17;6492:45;6489:71;;;6540:18;;:::i;:::-;-1:-1:-1;6580:9:1;;6427:168::o;6600:380::-;6679:1;6675:12;;;;6722;;;6743:61;;6797:4;6789:6;6785:17;6775:27;;6743:61;6850:2;6842:6;6839:14;6819:18;6816:38;6813:161;;;6896:10;6891:3;6887:20;6884:1;6877:31;6931:4;6928:1;6921:15;6959:4;6956:1;6949:15;6813:161;;6600:380;;;:::o;:::-;89:5564:0;;;;;;",
  "sourcePath": "contracts/Voting.sol",
  "type": "contract"
}